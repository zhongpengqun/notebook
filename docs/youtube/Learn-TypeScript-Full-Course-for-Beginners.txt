1
00:00:00,040 --> 00:00:01,560
learn the basic building blocks of

2
00:00:01,560 --> 00:00:04,000
typescript while discovering firsthand

3
00:00:04,000 --> 00:00:06,359
how typescript can make your life easier

4
00:00:06,359 --> 00:00:09,120
and your code less air prone popular

5
00:00:09,120 --> 00:00:10,880
instructor Bob zeroll teaches this

6
00:00:10,880 --> 00:00:13,480
course typescript is a superet of

7
00:00:13,480 --> 00:00:15,639
JavaScript meaning all valid JavaScript

8
00:00:15,639 --> 00:00:18,359
code is also valid in typescript however

9
00:00:18,359 --> 00:00:20,199
typescript enhances your coding

10
00:00:20,199 --> 00:00:22,920
experience by enabling you to write code

11
00:00:22,920 --> 00:00:25,400
with greater confidence in the stability

12
00:00:25,400 --> 00:00:29,480
and longevity of your projects

13
00:00:30,400 --> 00:00:32,079
hi there and welcome to this

14
00:00:32,079 --> 00:00:34,399
introductory course on typescript my

15
00:00:34,399 --> 00:00:36,399
name is Bob Zol and I'll be your teacher

16
00:00:36,399 --> 00:00:37,680
through this course guiding you through

17
00:00:37,680 --> 00:00:39,399
learning one of the most important

18
00:00:39,399 --> 00:00:41,520
things you can learn as a front-end web

19
00:00:41,520 --> 00:00:43,480
developer now there might be a lot of

20
00:00:43,480 --> 00:00:45,160
reasons why you're here in this course

21
00:00:45,160 --> 00:00:46,960
trying to learn typescript but I'm going

22
00:00:46,960 --> 00:00:48,760
to give you three of the most important

23
00:00:48,760 --> 00:00:50,640
reasons you can learn typescript the

24
00:00:50,640 --> 00:00:52,640
headliner reason for learning typescript

25
00:00:52,640 --> 00:00:54,280
that I would offer is the confidence

26
00:00:54,280 --> 00:00:56,039
that it gives you as a developer

27
00:00:56,039 --> 00:00:58,160
typescripts ability to check your code

28
00:00:58,160 --> 00:01:00,600
during compile time or using modern

29
00:01:00,600 --> 00:01:03,320
idees essentially in real time as you're

30
00:01:03,320 --> 00:01:05,720
typing your code dramatically reduces

31
00:01:05,720 --> 00:01:07,799
the number of app crashing runtime

32
00:01:07,799 --> 00:01:09,479
errors that would normally only be

33
00:01:09,479 --> 00:01:11,600
caught after your app is running and

34
00:01:11,600 --> 00:01:13,320
possibly even deployed live to

35
00:01:13,320 --> 00:01:15,640
production because typescript can catch

36
00:01:15,640 --> 00:01:17,799
a lot of those errors before anything

37
00:01:17,799 --> 00:01:19,960
gets pushed up live your confidence as a

38
00:01:19,960 --> 00:01:22,079
developer in the stability of your code

39
00:01:22,079 --> 00:01:24,360
will be through the roof another reason

40
00:01:24,360 --> 00:01:25,840
I would offer it's important to learn

41
00:01:25,840 --> 00:01:27,920
typescript is the added productivity

42
00:01:27,920 --> 00:01:29,960
that it brings to you as the developer

43
00:01:29,960 --> 00:01:32,280
sure typescript does take a bit more

44
00:01:32,280 --> 00:01:34,840
time to write than just slinging regular

45
00:01:34,840 --> 00:01:36,920
JavaScript code around but there are a

46
00:01:36,920 --> 00:01:39,320
number of really neat features that make

47
00:01:39,320 --> 00:01:42,079
your life as a developer a lot easier by

48
00:01:42,079 --> 00:01:44,360
simply using typescript in your project

49
00:01:44,360 --> 00:01:47,200
in vs code for example yes in JavaScript

50
00:01:47,200 --> 00:01:49,240
you'll get some autocomplete but you'll

51
00:01:49,240 --> 00:01:50,880
see as you're using typescript

52
00:01:50,880 --> 00:01:52,880
autocomplete turns up to a completely

53
00:01:52,880 --> 00:01:54,880
different level in modern typescript

54
00:01:54,880 --> 00:01:57,200
enabled idees there's also refactoring

55
00:01:57,200 --> 00:01:59,280
capabilities immediate error checking as

56
00:01:59,280 --> 00:02:01,600
we talked about in point number one and

57
00:02:01,600 --> 00:02:03,320
a bunch of other things that you'll find

58
00:02:03,320 --> 00:02:05,280
as you're using typescript that just

59
00:02:05,280 --> 00:02:07,039
greatly improve your developer

60
00:02:07,039 --> 00:02:09,479
experience and thus your productivity

61
00:02:09,479 --> 00:02:11,200
and a third reason I would offer that

62
00:02:11,200 --> 00:02:13,040
it's really helpful to learn typescript

63
00:02:13,040 --> 00:02:14,480
is that it will improve your

64
00:02:14,480 --> 00:02:17,120
employability assuming you are a junior

65
00:02:17,120 --> 00:02:19,360
or maybe even a mid-level developer that

66
00:02:19,360 --> 00:02:21,400
is on the job market or will be on the

67
00:02:21,400 --> 00:02:23,080
job market in the future learning

68
00:02:23,080 --> 00:02:25,120
typescript is oftentimes considered

69
00:02:25,120 --> 00:02:27,519
table Stakes by many companies even if

70
00:02:27,519 --> 00:02:29,400
it's not explicitly listed in their job

71
00:02:29,400 --> 00:02:30,360
description

72
00:02:30,360 --> 00:02:32,000
as such knowing even a little bit of

73
00:02:32,000 --> 00:02:33,959
typescript can really set you apart from

74
00:02:33,959 --> 00:02:36,080
other Junior developer candidates so

75
00:02:36,080 --> 00:02:37,959
what exactly will we be covering in this

76
00:02:37,959 --> 00:02:39,800
course well this is an introductory

77
00:02:39,800 --> 00:02:41,440
course and by the end of the course you

78
00:02:41,440 --> 00:02:42,920
will have an understanding of the

79
00:02:42,920 --> 00:02:44,800
fundamentals of typescript and we'll be

80
00:02:44,800 --> 00:02:46,879
talking quite a bit about why typescript

81
00:02:46,879 --> 00:02:49,000
is so useful as far as the topics goes

82
00:02:49,000 --> 00:02:51,120
we're going to cover the basic literal

83
00:02:51,120 --> 00:02:53,159
and custom types we'll talk briefly

84
00:02:53,159 --> 00:02:56,040
about optional properties unions type

85
00:02:56,040 --> 00:02:58,680
narrowing some built-in utility types

86
00:02:58,680 --> 00:03:01,000
that exist already in typescript and

87
00:03:01,000 --> 00:03:03,000
generics which essentially allow you to

88
00:03:03,000 --> 00:03:05,239
create your own utility types or to make

89
00:03:05,239 --> 00:03:07,080
your functions and other types more

90
00:03:07,080 --> 00:03:09,159
flexible by understanding these

91
00:03:09,159 --> 00:03:10,879
fundamentals of typescript I truly

92
00:03:10,879 --> 00:03:12,519
believe that typescript can be a

93
00:03:12,519 --> 00:03:14,680
catalyst that helps train your brain to

94
00:03:14,680 --> 00:03:16,959
think like a senior developer as such

95
00:03:16,959 --> 00:03:18,799
there's one thing in particular that I

96
00:03:18,799 --> 00:03:20,599
remember when I first started learning

97
00:03:20,599 --> 00:03:22,680
typescript and that is that it can be

98
00:03:22,680 --> 00:03:24,799
challenging to learn at first you have

99
00:03:24,799 --> 00:03:26,319
nothing to worry about because you're

100
00:03:26,319 --> 00:03:27,799
here on scrimba you're going to be

101
00:03:27,799 --> 00:03:29,360
getting your hands on the keyboard quite

102
00:03:29,360 --> 00:03:31,480
a bit throughout this course practicing

103
00:03:31,480 --> 00:03:33,040
really understanding what you're

104
00:03:33,040 --> 00:03:34,920
learning and I've tried my best to

105
00:03:34,920 --> 00:03:36,519
really break down the topics into

106
00:03:36,519 --> 00:03:38,400
bite-sized chunks that are really easy

107
00:03:38,400 --> 00:03:40,200
to comprehend still one of the

108
00:03:40,200 --> 00:03:42,120
challenges I have heard from a number of

109
00:03:42,120 --> 00:03:43,720
people who are learning typescript for

110
00:03:43,720 --> 00:03:45,599
the first time is that it feels like

111
00:03:45,599 --> 00:03:47,959
we're just adding a bunch of extra work

112
00:03:47,959 --> 00:03:50,040
without any additional benefit

113
00:03:50,040 --> 00:03:52,079
especially if you're trying to convert

114
00:03:52,079 --> 00:03:54,640
an existing codebase into typescript it

115
00:03:54,640 --> 00:03:56,640
can be quite overwhelming to see all of

116
00:03:56,640 --> 00:03:58,519
the errors pop up when you change your

117
00:03:58,519 --> 00:04:01,000
file to a typescript file however as my

118
00:04:01,000 --> 00:04:03,120
friend keny dods puts it typescript is

119
00:04:03,120 --> 00:04:04,360
not going to be making your life

120
00:04:04,360 --> 00:04:06,200
terrible it's simply going to be showing

121
00:04:06,200 --> 00:04:08,560
you how terrible your life already is

122
00:04:08,560 --> 00:04:10,000
it's really important to remember that

123
00:04:10,000 --> 00:04:11,680
the errors that you see show up in

124
00:04:11,680 --> 00:04:13,879
typescript they're not there to bug you

125
00:04:13,879 --> 00:04:15,840
or be annoying they're really there to

126
00:04:15,840 --> 00:04:17,600
protect you against some of the Loosey

127
00:04:17,600 --> 00:04:19,759
Goosey typing that happens in vanilla

128
00:04:19,759 --> 00:04:22,199
JavaScript an analogy that I thought of

129
00:04:22,199 --> 00:04:23,680
that kind of helps me understand this

130
00:04:23,680 --> 00:04:25,720
better is the concept of building a

131
00:04:25,720 --> 00:04:27,759
blueprint or a sketch of a project

132
00:04:27,759 --> 00:04:29,759
before you actually start building it on

133
00:04:29,759 --> 00:04:31,919
a large scale if you can imagine someone

134
00:04:31,919 --> 00:04:33,880
trying to just walk up to a pile of

135
00:04:33,880 --> 00:04:35,520
lumber and start building a house

136
00:04:35,520 --> 00:04:37,479
without a plan you can tell that that's

137
00:04:37,479 --> 00:04:39,680
probably not going to end very well yes

138
00:04:39,680 --> 00:04:41,880
drawing out a blueprint planning ahead

139
00:04:41,880 --> 00:04:44,280
it takes a lot of additional work Beyond

140
00:04:44,280 --> 00:04:46,039
just building your house but the

141
00:04:46,039 --> 00:04:48,440
benefits are obvious and I believe after

142
00:04:48,440 --> 00:04:50,199
you've been exposed to typescript and

143
00:04:50,199 --> 00:04:51,720
you've built some projects using

144
00:04:51,720 --> 00:04:53,720
typescript you'll probably see it in a

145
00:04:53,720 --> 00:04:55,840
very similar way maybe to get a little

146
00:04:55,840 --> 00:04:57,759
bit more specific let me talk about what

147
00:04:57,759 --> 00:04:59,919
this item is right here this is called a

148
00:04:59,919 --> 00:05:02,240
stud guard and it's an example of

149
00:05:02,240 --> 00:05:04,199
planning ahead of time to avoid

150
00:05:04,199 --> 00:05:06,199
catastrophic issues in the future now

151
00:05:06,199 --> 00:05:08,560
the idea of a stud guard is often times

152
00:05:08,560 --> 00:05:10,880
homeowners will try to find a stud and

153
00:05:10,880 --> 00:05:13,080
nail or screw something into that stud

154
00:05:13,080 --> 00:05:15,160
maybe to install some kind of Hardware

155
00:05:15,160 --> 00:05:16,880
or hang something heavy or whatever it

156
00:05:16,880 --> 00:05:19,080
might be however in certain parts of our

157
00:05:19,080 --> 00:05:20,800
house it's really important that we

158
00:05:20,800 --> 00:05:23,039
don't nail through the stud if I had a

159
00:05:23,039 --> 00:05:24,960
screw that was too long and right here

160
00:05:24,960 --> 00:05:27,280
tried to screw into this section I would

161
00:05:27,280 --> 00:05:29,199
hit this waterline or even worse it

162
00:05:29,199 --> 00:05:31,560
could be electrical line or even worse

163
00:05:31,560 --> 00:05:33,600
could be a gas line and so these stud

164
00:05:33,600 --> 00:05:36,120
guards which are made of 16 gauge steel

165
00:05:36,120 --> 00:05:38,199
make it so that it would be really

166
00:05:38,199 --> 00:05:40,039
difficult to get through this section of

167
00:05:40,039 --> 00:05:41,759
the stud and accidentally cause

168
00:05:41,759 --> 00:05:43,520
something terrible to happen a little

169
00:05:43,520 --> 00:05:45,840
bit of extra work planning ahead just

170
00:05:45,840 --> 00:05:48,240
like using typescript can save you big

171
00:05:48,240 --> 00:05:50,800
headaches in the future Now typescript

172
00:05:50,800 --> 00:05:53,120
does not solve every programming problem

173
00:05:53,120 --> 00:05:55,280
like this meme might suggest the main

174
00:05:55,280 --> 00:05:57,600
focus of typescript is on fixing

175
00:05:57,600 --> 00:05:59,639
possible runtime errors more spefic

176
00:05:59,639 --> 00:06:01,479
specifically anything that would be a

177
00:06:01,479 --> 00:06:03,600
type error and as I'm sure you've

178
00:06:03,600 --> 00:06:05,639
experienced not every error in your code

179
00:06:05,639 --> 00:06:07,919
is a runtime type error typescript can

180
00:06:07,919 --> 00:06:09,720
do quite a bit to protect you against

181
00:06:09,720 --> 00:06:11,759
the most common errors that people write

182
00:06:11,759 --> 00:06:13,680
into their JavaScript code but it won't

183
00:06:13,680 --> 00:06:15,599
protect you against certain things like

184
00:06:15,599 --> 00:06:17,800
logical errors that said we're about to

185
00:06:17,800 --> 00:06:20,000
see firsthand just how many errors we

186
00:06:20,000 --> 00:06:23,160
can fix by simply changing a file from a

187
00:06:23,160 --> 00:06:25,199
JavaScript extension to a typescript

188
00:06:25,199 --> 00:06:27,199
extension I'm really excited to jump

189
00:06:27,199 --> 00:06:29,240
into this code my name is Bob zero as I

190
00:06:29,240 --> 00:06:31,520
mentioned I'm most active these days on

191
00:06:31,520 --> 00:06:33,560
X you can click my username here to go

192
00:06:33,560 --> 00:06:35,360
directly to my profile I'd appreciate a

193
00:06:35,360 --> 00:06:37,800
follow so without further Ado let's jump

194
00:06:37,800 --> 00:06:40,479
right into learning

195
00:06:42,280 --> 00:06:44,759
typescript when I first started learning

196
00:06:44,759 --> 00:06:47,000
about typescript a number of years ago I

197
00:06:47,000 --> 00:06:48,639
really struggled with understanding what

198
00:06:48,639 --> 00:06:50,759
benefit I was actually going to get by

199
00:06:50,759 --> 00:06:52,720
using typescript instead of vanilla

200
00:06:52,720 --> 00:06:54,639
JavaScript writing your code in

201
00:06:54,639 --> 00:06:57,240
typescript does require a relatively

202
00:06:57,240 --> 00:06:59,599
significant overhead in terms of extra

203
00:06:59,599 --> 00:07:01,360
lines of code that you have to write and

204
00:07:01,360 --> 00:07:03,280
considerations that you have to take and

205
00:07:03,280 --> 00:07:04,960
so for this course I really wanted to

206
00:07:04,960 --> 00:07:06,960
demonstrate the improvements that your

207
00:07:06,960 --> 00:07:09,120
code will receive by using typescript

208
00:07:09,120 --> 00:07:11,520
instead of JavaScript just by itself so

209
00:07:11,520 --> 00:07:13,160
the approach I'm going to take might be

210
00:07:13,160 --> 00:07:14,879
a little bit different but stick with me

211
00:07:14,879 --> 00:07:16,479
it's going to be fun and I really think

212
00:07:16,479 --> 00:07:17,960
it's going to highlight the benefits

213
00:07:17,960 --> 00:07:19,840
that you'll get out of using typescript

214
00:07:19,840 --> 00:07:21,560
the way I'm going to approach this is by

215
00:07:21,560 --> 00:07:23,879
building a really simple restaurant app

216
00:07:23,879 --> 00:07:26,000
it's just going to be console based so

217
00:07:26,000 --> 00:07:27,560
we won't be worrying about HTML or

218
00:07:27,560 --> 00:07:28,919
anything like that and we're going to

219
00:07:28,919 --> 00:07:30,440
start by writing wrting it in regular

220
00:07:30,440 --> 00:07:32,319
JavaScript and I'm going to give you a

221
00:07:32,319 --> 00:07:34,240
couple really simple challenges but

222
00:07:34,240 --> 00:07:35,759
again stick with me this is going to be

223
00:07:35,759 --> 00:07:37,759
really fun okay so we're going to create

224
00:07:37,759 --> 00:07:39,599
a pizza restaurant and the first thing I

225
00:07:39,599 --> 00:07:42,680
want to do is create a menu it'll be an

226
00:07:42,680 --> 00:07:45,199
array of items each of those items will

227
00:07:45,199 --> 00:07:48,199
have a name and let's go ahead and add a

228
00:07:48,199 --> 00:07:50,800
couple pizzas here we'll say a margarita

229
00:07:50,800 --> 00:07:52,000
pizza

230
00:07:52,000 --> 00:07:55,080
margarita and we'll give it a price and

231
00:07:55,080 --> 00:07:56,720
let's go ahead and add four different

232
00:07:56,720 --> 00:07:58,639
pizzas and for the sake of time I'll

233
00:07:58,639 --> 00:08:00,520
speed through adding different pizzas to

234
00:08:00,520 --> 00:08:02,879
our menu all right in our pizza

235
00:08:02,879 --> 00:08:04,960
restaurant we also are going to want to

236
00:08:04,960 --> 00:08:08,280
keep track of the cash in the register

237
00:08:08,280 --> 00:08:11,159
let's say we start each day with $100

238
00:08:11,159 --> 00:08:12,960
and we'll also want to keep track of all

239
00:08:12,960 --> 00:08:15,680
of our pizzas in the queue as people are

240
00:08:15,680 --> 00:08:17,759
placing orders for pizzas this way the

241
00:08:17,759 --> 00:08:19,240
workers in the kitchen can know what

242
00:08:19,240 --> 00:08:21,479
needs to happen next so let's say we

243
00:08:21,479 --> 00:08:23,720
have an order que and we'll just

244
00:08:23,720 --> 00:08:26,400
initialize that as an empty array okay

245
00:08:26,400 --> 00:08:28,560
let's do a quick series of challenges

246
00:08:28,560 --> 00:08:30,319
this is mostly just going to be a way to

247
00:08:30,319 --> 00:08:32,200
get your brain and your fingers working

248
00:08:32,200 --> 00:08:35,120
right away so let me type out your first

249
00:08:35,120 --> 00:08:37,479
challenge okay this is about as simple

250
00:08:37,479 --> 00:08:39,799
as it'll get your challenge is to add a

251
00:08:39,799 --> 00:08:42,399
little utility helper function for us

252
00:08:42,399 --> 00:08:44,320
that's called add new pizza it should

253
00:08:44,320 --> 00:08:46,920
take a pizza object that's just like the

254
00:08:46,920 --> 00:08:49,320
shape of this object up here in our menu

255
00:08:49,320 --> 00:08:51,519
and it's going to just add that object

256
00:08:51,519 --> 00:08:53,560
to the menu pause now and work on this

257
00:08:53,560 --> 00:08:56,560
challenge

258
00:09:00,480 --> 00:09:03,000
okay let's add a function called add new

259
00:09:03,000 --> 00:09:06,240
pizza it's going to take a pizza object

260
00:09:06,240 --> 00:09:08,800
and simply enough it's going to do menu.

261
00:09:08,800 --> 00:09:12,240
push the pizza object Perfect all right

262
00:09:12,240 --> 00:09:14,079
we're really on a roll here let's get

263
00:09:14,079 --> 00:09:16,279
rid of this challenge text and already

264
00:09:16,279 --> 00:09:18,880
it's time for another challenge okay

265
00:09:18,880 --> 00:09:20,480
this one's a little more involved but

266
00:09:20,480 --> 00:09:22,720
still very doable your task is to write

267
00:09:22,720 --> 00:09:24,600
another utility function we'll call it

268
00:09:24,600 --> 00:09:27,640
place order that takes a pizza name so

269
00:09:27,640 --> 00:09:30,040
pepperoni for example as a string and

270
00:09:30,040 --> 00:09:32,279
first finds that pizza object in the

271
00:09:32,279 --> 00:09:34,839
menu so this whole object then it adds

272
00:09:34,839 --> 00:09:37,399
the new price that you just generated as

273
00:09:37,399 --> 00:09:39,519
a business to your cash in the register

274
00:09:39,519 --> 00:09:41,800
then it should create a new order object

275
00:09:41,800 --> 00:09:43,519
which is going to be just like this one

276
00:09:43,519 --> 00:09:45,399
that you see here it'll have a pizza

277
00:09:45,399 --> 00:09:47,240
property whose value is the object that

278
00:09:47,240 --> 00:09:49,839
you got from step one and then a status

279
00:09:49,839 --> 00:09:52,120
which we will set to the string ordered

280
00:09:52,120 --> 00:09:54,120
and then it will push this order object

281
00:09:54,120 --> 00:09:56,640
to the order Q array and then just for

282
00:09:56,640 --> 00:09:58,480
good measure we'll go ahead and return

283
00:09:58,480 --> 00:10:00,120
that New Order object object just in

284
00:10:00,120 --> 00:10:02,360
case we need it in the future okay pause

285
00:10:02,360 --> 00:10:05,200
now and work on this

286
00:10:08,720 --> 00:10:10,760
challenge all right let's do it we'll

287
00:10:10,760 --> 00:10:12,839
have a function that's called place

288
00:10:12,839 --> 00:10:15,760
order it's going to take a pizza name as

289
00:10:15,760 --> 00:10:17,560
a string there's a few different ways

290
00:10:17,560 --> 00:10:19,640
that you could do this but I'm going to

291
00:10:19,640 --> 00:10:22,399
grab the selected pizza and that's going

292
00:10:22,399 --> 00:10:24,920
to be the returned result from calling

293
00:10:24,920 --> 00:10:29,079
menu doind doind is an array method menu

294
00:10:29,079 --> 00:10:31,160
is an array of course and find is a

295
00:10:31,160 --> 00:10:33,959
method on all arrays where you provide a

296
00:10:33,959 --> 00:10:36,880
callback function find will iterate over

297
00:10:36,880 --> 00:10:39,720
all of the items in your array in this

298
00:10:39,720 --> 00:10:41,959
case we'll call it a pizza object and

299
00:10:41,959 --> 00:10:44,000
from this callback function that I get

300
00:10:44,000 --> 00:10:46,519
to write if I return true at some point

301
00:10:46,519 --> 00:10:48,800
then find will return the object that it

302
00:10:48,800 --> 00:10:51,000
found and that's what I'm saving as

303
00:10:51,000 --> 00:10:52,959
selected pizza so in this case I'm

304
00:10:52,959 --> 00:10:55,920
looking for the pizza in my array with

305
00:10:55,920 --> 00:10:57,959
the pizza name that was passed in here

306
00:10:57,959 --> 00:11:00,639
so with pizza object I'll say if Pizza

307
00:11:00,639 --> 00:11:04,000
object. name is equal to Pizza name the

308
00:11:04,000 --> 00:11:06,000
parameter passed into this function then

309
00:11:06,000 --> 00:11:08,200
it will return true and I have correctly

310
00:11:08,200 --> 00:11:10,519
found my pizza okay then we'll go ahead

311
00:11:10,519 --> 00:11:12,880
and increment our cache and register so

312
00:11:12,880 --> 00:11:16,120
we'll say that plus equals the selected

313
00:11:16,120 --> 00:11:19,360
pizza. price okay and that does it for

314
00:11:19,360 --> 00:11:21,560
steps one and two then we're going to

315
00:11:21,560 --> 00:11:25,000
create a new order and this will be an

316
00:11:25,000 --> 00:11:27,680
object that has a pizza property that's

317
00:11:27,680 --> 00:11:30,120
going to be our selected Pizza object

318
00:11:30,120 --> 00:11:32,480
and a status which we will default to

319
00:11:32,480 --> 00:11:35,760
ordered then we will push into our order

320
00:11:35,760 --> 00:11:38,200
Q so we'll say order q. push our new

321
00:11:38,200 --> 00:11:42,120
order and return the uh let's new order

322
00:11:42,120 --> 00:11:44,120
here okay one more quick challenge and

323
00:11:44,120 --> 00:11:45,880
then I promise we're going to get to the

324
00:11:45,880 --> 00:11:48,279
point okay in this challenge we have one

325
00:11:48,279 --> 00:11:50,120
more utility function to write we'll

326
00:11:50,120 --> 00:11:52,079
call it complete order it's going to

327
00:11:52,079 --> 00:11:54,839
take an order ID which will be a string

328
00:11:54,839 --> 00:11:57,480
as a parameter it will look in our order

329
00:11:57,480 --> 00:12:00,519
Q array for the order with that ID and

330
00:12:00,519 --> 00:12:03,320
then simply Mark its status as completed

331
00:12:03,320 --> 00:12:05,160
instead of ordered and then for good

332
00:12:05,160 --> 00:12:06,600
measure just like we did with place

333
00:12:06,600 --> 00:12:09,040
order we'll return the found order from

334
00:12:09,040 --> 00:12:11,160
the order queue as a note you'll need to

335
00:12:11,160 --> 00:12:13,000
make sure that you're adding an ID to

336
00:12:13,000 --> 00:12:14,600
the orders whenever you create new

337
00:12:14,600 --> 00:12:16,839
orders right here we're not including

338
00:12:16,839 --> 00:12:18,959
IDs so that's an improvement or a

339
00:12:18,959 --> 00:12:20,560
modification that you'll have to also

340
00:12:20,560 --> 00:12:22,720
make to the place order function and

341
00:12:22,720 --> 00:12:24,519
since we're not using a real database

342
00:12:24,519 --> 00:12:25,959
here you'll just create a global

343
00:12:25,959 --> 00:12:28,360
variable called Next order ID that you

344
00:12:28,360 --> 00:12:30,920
can start at one let's say and increment

345
00:12:30,920 --> 00:12:33,000
every time a new order is placed all

346
00:12:33,000 --> 00:12:36,440
right pause now and work on this

347
00:12:40,199 --> 00:12:42,800
challenge right let's create a function

348
00:12:42,800 --> 00:12:45,480
called complete order this is going to

349
00:12:45,480 --> 00:12:48,120
take an order ID and then before we get

350
00:12:48,120 --> 00:12:50,440
too far down that rabbit hole we'll go

351
00:12:50,440 --> 00:12:52,440
ahead and create a new variable we'll

352
00:12:52,440 --> 00:12:55,560
call it next uh order ID and I'll set it

353
00:12:55,560 --> 00:12:58,000
equal to one to start here when I'm

354
00:12:58,000 --> 00:13:00,199
creating my new order I'll go ahead and

355
00:13:00,199 --> 00:13:02,720
add an ID property and I'm going to use

356
00:13:02,720 --> 00:13:05,000
this trick where I can say next order ID

357
00:13:05,000 --> 00:13:08,279
Plus+ this will return the original next

358
00:13:08,279 --> 00:13:10,519
order ID before it gets incremented

359
00:13:10,519 --> 00:13:12,199
that's the value that will be set to the

360
00:13:12,199 --> 00:13:14,240
ID here and then once it's done doing

361
00:13:14,240 --> 00:13:16,079
that it will increment it so that in the

362
00:13:16,079 --> 00:13:18,320
future when I do this again it will have

363
00:13:18,320 --> 00:13:20,320
already changed from 1 to two and it

364
00:13:20,320 --> 00:13:22,120
will then increment it from 2 to 3 for

365
00:13:22,120 --> 00:13:23,959
the next time that it gets used by the

366
00:13:23,959 --> 00:13:25,519
way for anybody that's shouting at your

367
00:13:25,519 --> 00:13:27,639
screen and was probably shouting at your

368
00:13:27,639 --> 00:13:29,360
screen when I was doing this line L of

369
00:13:29,360 --> 00:13:31,120
code as well I know that there's bugs in

370
00:13:31,120 --> 00:13:33,000
here we're going to talk more about that

371
00:13:33,000 --> 00:13:34,880
very soon so don't worry about me I know

372
00:13:34,880 --> 00:13:36,880
that there's problems to fix down in our

373
00:13:36,880 --> 00:13:38,760
complete order function we can do the

374
00:13:38,760 --> 00:13:40,839
find method that we used before so let's

375
00:13:40,839 --> 00:13:43,600
go ahead and say this is our order we're

376
00:13:43,600 --> 00:13:48,279
going to use order q. find we'll say for

377
00:13:48,279 --> 00:13:49,839
each order that we're looking at we're

378
00:13:49,839 --> 00:13:52,560
looking that the ID is equal to the

379
00:13:52,560 --> 00:13:54,560
order ID that was passed into this

380
00:13:54,560 --> 00:13:57,199
function we will then change the ORD

381
00:13:57,199 --> 00:14:01,199
status to completed and return the order

382
00:14:01,199 --> 00:14:02,720
now I do want you to use your

383
00:14:02,720 --> 00:14:04,759
imagination a little bit here of course

384
00:14:04,759 --> 00:14:06,199
we're talking about creating a

385
00:14:06,199 --> 00:14:08,560
console-based pizza restaurant which is

386
00:14:08,560 --> 00:14:10,600
of course delicious but also a bit

387
00:14:10,600 --> 00:14:12,680
contrived as it stands but imagine that

388
00:14:12,680 --> 00:14:14,720
you've spent the last 30 or 60 Minutes

389
00:14:14,720 --> 00:14:16,959
or maybe even a full day or two working

390
00:14:16,959 --> 00:14:18,600
on some new feature for the app that

391
00:14:18,600 --> 00:14:20,639
you're currently building and you now

392
00:14:20,639 --> 00:14:22,120
feel like you're ready to start testing

393
00:14:22,120 --> 00:14:24,560
things out so let's go ahead and let me

394
00:14:24,560 --> 00:14:27,240
clear up this challenge text and we'll

395
00:14:27,240 --> 00:14:28,800
just test a few things out we'll add a

396
00:14:28,800 --> 00:14:31,360
couple new pizzas and let's add one of

397
00:14:31,360 --> 00:14:33,160
my personal favorites this is going to

398
00:14:33,160 --> 00:14:36,399
be a chicken bacon ranch and we'll say

399
00:14:36,399 --> 00:14:40,120
that the cost is $112 we'll add another

400
00:14:40,120 --> 00:14:42,639
pizza and let's call it a maybe a

401
00:14:42,639 --> 00:14:45,279
barbecue chicken that'll also be 12 and

402
00:14:45,279 --> 00:14:47,279
then maybe let's add something a little

403
00:14:47,279 --> 00:14:49,800
spicy in here we'll call it a spicy

404
00:14:49,800 --> 00:14:53,320
sausage pizza and maybe this one's $11

405
00:14:53,320 --> 00:14:55,720
okay and then we will place an order and

406
00:14:55,720 --> 00:14:58,360
this will be for a chicken bacon ranch

407
00:14:58,360 --> 00:14:59,920
and we know I Hadad of time that our

408
00:14:59,920 --> 00:15:01,639
first order ID is going to be starting

409
00:15:01,639 --> 00:15:03,279
with a one so we'll go ahead and test

410
00:15:03,279 --> 00:15:06,320
our complete order and we'll test the

411
00:15:06,320 --> 00:15:09,360
order with the ID of one and then in

412
00:15:09,360 --> 00:15:11,360
true fashion let's go ahead and console

413
00:15:11,360 --> 00:15:12,920
log everything that we have so we'll

414
00:15:12,920 --> 00:15:15,519
console log our menu just to see if our

415
00:15:15,519 --> 00:15:17,680
add new pizza is working we'll console

416
00:15:17,680 --> 00:15:22,360
log our cache in the cach in

417
00:15:22,360 --> 00:15:26,440
register and let's check out our order Q

418
00:15:26,440 --> 00:15:27,800
all right now if you've actually been

419
00:15:27,800 --> 00:15:29,839
following along You' know that this code

420
00:15:29,839 --> 00:15:32,079
is pretty full of some minor bugs when

421
00:15:32,079 --> 00:15:34,199
you wrote the challenges you may or may

422
00:15:34,199 --> 00:15:36,560
not have introduced similar bugs but at

423
00:15:36,560 --> 00:15:38,519
a glance if you were to run through this

424
00:15:38,519 --> 00:15:40,639
program just reading through the code I

425
00:15:40,639 --> 00:15:42,040
don't think it's that much of a stretch

426
00:15:42,040 --> 00:15:43,839
to think well this looks pretty good

427
00:15:43,839 --> 00:15:45,319
yeah let's push this up to production

428
00:15:45,319 --> 00:15:46,880
we'll run a couple tests and see if it

429
00:15:46,880 --> 00:15:48,959
works and then push everything up if you

430
00:15:48,959 --> 00:15:50,360
took the chance to pause and run this

431
00:15:50,360 --> 00:15:52,120
code you'll know that we're going to be

432
00:15:52,120 --> 00:15:53,639
running into all kinds of little

433
00:15:53,639 --> 00:15:56,000
problems first of all we have this type

434
00:15:56,000 --> 00:15:58,120
error assignment to a constant variable

435
00:15:58,120 --> 00:15:59,680
well a type error this is actually

436
00:15:59,680 --> 00:16:01,360
something that would crash our program

437
00:16:01,360 --> 00:16:03,560
if somehow this made it past testing or

438
00:16:03,560 --> 00:16:05,120
didn't involve any kind of manual

439
00:16:05,120 --> 00:16:06,600
testing it would have gotten pushed to

440
00:16:06,600 --> 00:16:08,319
production and our app would have

441
00:16:08,319 --> 00:16:10,240
crashed there's also a bug in the way

442
00:16:10,240 --> 00:16:11,920
that I'm testing my complete order of

443
00:16:11,920 --> 00:16:14,279
course I used a string this is again a

444
00:16:14,279 --> 00:16:16,160
bit on the nose because we know that

445
00:16:16,160 --> 00:16:18,000
this should be a number but this would

446
00:16:18,000 --> 00:16:19,720
have probably crashed our program as

447
00:16:19,720 --> 00:16:21,440
well now before taking a bunch of time

448
00:16:21,440 --> 00:16:23,279
and fixing these errors this is the

449
00:16:23,279 --> 00:16:25,319
perfect opportunity for us to move this

450
00:16:25,319 --> 00:16:27,319
project over to typescript and first of

451
00:16:27,319 --> 00:16:29,279
all see what errors typescript script is

452
00:16:29,279 --> 00:16:31,160
able to pick up without us making any

453
00:16:31,160 --> 00:16:32,839
other changes to the code and then to

454
00:16:32,839 --> 00:16:34,759
dive deeper into typescript and see how

455
00:16:34,759 --> 00:16:36,880
we can augment our code so we can teach

456
00:16:36,880 --> 00:16:38,639
typescript how things are supposed to

457
00:16:38,639 --> 00:16:40,959
look so that it can catch other bugs

458
00:16:40,959 --> 00:16:43,360
that it otherwise wouldn't be able to so

459
00:16:43,360 --> 00:16:45,440
before this bug Laden code gives me any

460
00:16:45,440 --> 00:16:47,040
more anxiety let's move over to

461
00:16:47,040 --> 00:16:50,880
typescript and see how we can fix

462
00:16:52,839 --> 00:16:55,079
everything okay let's shift things over

463
00:16:55,079 --> 00:16:56,880
and start using typescript for this

464
00:16:56,880 --> 00:16:58,959
project and see what typescript is is

465
00:16:58,959 --> 00:17:01,079
going to be able to offer us immediately

466
00:17:01,079 --> 00:17:03,079
out of the box in scrimba the way

467
00:17:03,079 --> 00:17:05,119
typescript is running under the hood is

468
00:17:05,119 --> 00:17:06,480
a little bit different than if you were

469
00:17:06,480 --> 00:17:08,880
following Along on your local machine

470
00:17:08,880 --> 00:17:10,959
normally I would be able to just change

471
00:17:10,959 --> 00:17:13,400
my Javascript file to a TS file

472
00:17:13,400 --> 00:17:15,720
extension and set typescript up as a

473
00:17:15,720 --> 00:17:18,039
dependency of my app but with typescript

474
00:17:18,039 --> 00:17:19,760
running in the background on scrimba I

475
00:17:19,760 --> 00:17:21,280
need to make sure that I actually create

476
00:17:21,280 --> 00:17:23,079
a brand new file called

477
00:17:23,079 --> 00:17:25,240
index.ts we'll talk a little bit more

478
00:17:25,240 --> 00:17:26,919
about setting up typescript in a local

479
00:17:26,919 --> 00:17:28,919
environment so this isn't a big deal

480
00:17:28,919 --> 00:17:30,520
that we have to worry too much about now

481
00:17:30,520 --> 00:17:32,360
but another scrimba specific thing I

482
00:17:32,360 --> 00:17:34,919
need to change this tots and we'll go

483
00:17:34,919 --> 00:17:37,880
ahead and copy all of our code over from

484
00:17:37,880 --> 00:17:41,200
JS to TS and look at that we get a bunch

485
00:17:41,200 --> 00:17:43,360
of red squigglies of course JavaScript

486
00:17:43,360 --> 00:17:45,360
was perfectly happy to let us write the

487
00:17:45,360 --> 00:17:47,400
code that we had before but out of the

488
00:17:47,400 --> 00:17:50,000
box typescript is able to warn us ahead

489
00:17:50,000 --> 00:17:52,080
of time of any potential errors that we

490
00:17:52,080 --> 00:17:54,559
might have now I want to reiterate that

491
00:17:54,559 --> 00:17:56,440
throughout this course anytime you see

492
00:17:56,440 --> 00:17:58,039
these red squigglies I want you to

493
00:17:58,039 --> 00:17:59,760
actively move your Mouse hover over the

494
00:17:59,760 --> 00:18:01,880
word that has the red squiggly and see

495
00:18:01,880 --> 00:18:04,240
the intellisense popup that shows up I

496
00:18:04,240 --> 00:18:06,039
can see it on my end but it's not

497
00:18:06,039 --> 00:18:07,840
something that scrio records into the

498
00:18:07,840 --> 00:18:10,120
scrim so very often I'll be saying if

499
00:18:10,120 --> 00:18:12,240
you hover your mouse over this item and

500
00:18:12,240 --> 00:18:14,440
look at the popup I actually want you to

501
00:18:14,440 --> 00:18:16,400
do that in fact I want you to do that

502
00:18:16,400 --> 00:18:18,159
pause now start hovering over some of

503
00:18:18,159 --> 00:18:20,000
the red squiggly words that you see here

504
00:18:20,000 --> 00:18:21,760
see if there's any bugs that you can fix

505
00:18:21,760 --> 00:18:24,240
right off the

506
00:18:27,760 --> 00:18:30,080
bat well some of these are giving us

507
00:18:30,080 --> 00:18:32,080
errors about the variable implicitly

508
00:18:32,080 --> 00:18:34,039
having an any type that's something

509
00:18:34,039 --> 00:18:36,159
we're going to talk about in the future

510
00:18:36,159 --> 00:18:38,039
but if you came down here to cach and

511
00:18:38,039 --> 00:18:39,799
register you can see that it says you

512
00:18:39,799 --> 00:18:41,760
cannot assign to cach and register

513
00:18:41,760 --> 00:18:44,200
because it is a constant or a readon

514
00:18:44,200 --> 00:18:45,880
property and assuming at this point you

515
00:18:45,880 --> 00:18:47,760
know the difference between a const and

516
00:18:47,760 --> 00:18:50,000
a let that should be a pretty obvious

517
00:18:50,000 --> 00:18:52,600
fix maybe out of habit I initialized

518
00:18:52,600 --> 00:18:55,200
this as a const but I'm trying to assign

519
00:18:55,200 --> 00:18:57,240
a new value to it in the future and I

520
00:18:57,240 --> 00:18:59,360
can't do that with a const so let's go

521
00:18:59,360 --> 00:19:01,360
ahead and change this to a let and by

522
00:19:01,360 --> 00:19:02,880
making that very simple change

523
00:19:02,880 --> 00:19:04,480
typescript is now satisfied when it

524
00:19:04,480 --> 00:19:06,640
comes to this cach and register variable

525
00:19:06,640 --> 00:19:08,760
let's come here to next order ID and we

526
00:19:08,760 --> 00:19:10,559
have the exact same problem this needs

527
00:19:10,559 --> 00:19:13,559
to be a let instead of a const by doing

528
00:19:13,559 --> 00:19:15,520
that now typescript is satisfied about

529
00:19:15,520 --> 00:19:18,159
next order ID at first glance using

530
00:19:18,159 --> 00:19:20,280
typescript can be a bit intimidating

531
00:19:20,280 --> 00:19:21,919
because of all of these red squigglies

532
00:19:21,919 --> 00:19:23,880
that show up and because of the

533
00:19:23,880 --> 00:19:25,440
additional code that you will have to

534
00:19:25,440 --> 00:19:26,960
write to fix the errors that it's

535
00:19:26,960 --> 00:19:28,760
warning you about but I think a better

536
00:19:28,760 --> 00:19:30,679
better approach or a better lens to look

537
00:19:30,679 --> 00:19:32,480
at this through is that typescript is

538
00:19:32,480 --> 00:19:34,840
showing us the problems in our code

539
00:19:34,840 --> 00:19:37,000
nothing about using typescript here is

540
00:19:37,000 --> 00:19:39,320
introducing new bugs it's just showing

541
00:19:39,320 --> 00:19:41,679
me where the bugs already existed this

542
00:19:41,679 --> 00:19:44,080
means I can find them immediately as I'm

543
00:19:44,080 --> 00:19:45,960
typing my code instead of having to wait

544
00:19:45,960 --> 00:19:48,520
till it crashes for our users so over

545
00:19:48,520 --> 00:19:50,159
the next few scrims we're going to fix

546
00:19:50,159 --> 00:19:51,840
the bugs that are already here we'll be

547
00:19:51,840 --> 00:19:53,679
adding new features to our app and

548
00:19:53,679 --> 00:19:55,720
seeing where typescript is and isn't

549
00:19:55,720 --> 00:19:57,520
happy all while using that to drive

550
00:19:57,520 --> 00:20:00,640
forward our knowledge of typ

551
00:20:02,080 --> 00:20:04,400
script there's one more era in here that

552
00:20:04,400 --> 00:20:06,440
we're able to fix before we even start

553
00:20:06,440 --> 00:20:08,760
writing typescript specific code and

554
00:20:08,760 --> 00:20:11,080
that's here on line 18 go ahead and

555
00:20:11,080 --> 00:20:13,080
hover your mouse over selected pizza

556
00:20:13,080 --> 00:20:15,080
here and you'll see the popup says the

557
00:20:15,080 --> 00:20:18,000
object is possibly undefined this is a

558
00:20:18,000 --> 00:20:20,240
great example of a time where typescript

559
00:20:20,240 --> 00:20:22,520
is able to warn us ahead of time that we

560
00:20:22,520 --> 00:20:24,840
have a potential problem and this brings

561
00:20:24,840 --> 00:20:26,320
me to a point that I will likely

562
00:20:26,320 --> 00:20:28,120
reiterate in the future in this course

563
00:20:28,120 --> 00:20:29,640
and that's the difference between coding

564
00:20:29,640 --> 00:20:32,200
on the happy path and the sad path now

565
00:20:32,200 --> 00:20:34,039
the happy path is when we are writing

566
00:20:34,039 --> 00:20:35,600
our code and we just assume that

567
00:20:35,600 --> 00:20:36,919
everything is going to work out

568
00:20:36,919 --> 00:20:39,120
perfectly this does tend to be the code

569
00:20:39,120 --> 00:20:41,080
that people who are new to coding will

570
00:20:41,080 --> 00:20:43,080
write I would say mostly because they

571
00:20:43,080 --> 00:20:45,440
haven't been hurt in the past by code

572
00:20:45,440 --> 00:20:47,240
push to production that didn't account

573
00:20:47,240 --> 00:20:49,200
for the edge cases that can pop up when

574
00:20:49,200 --> 00:20:51,320
you run code in production and that's

575
00:20:51,320 --> 00:20:53,159
because this is the easiest code to

576
00:20:53,159 --> 00:20:54,919
write we have a task that we're trying

577
00:20:54,919 --> 00:20:57,200
to solve we write the code that solves

578
00:20:57,200 --> 00:20:59,159
that task and then the temp ation

579
00:20:59,159 --> 00:21:01,360
sometimes is just to move on however

580
00:21:01,360 --> 00:21:03,880
typescript forces us to take a step back

581
00:21:03,880 --> 00:21:06,200
and consider the sad path the sad path

582
00:21:06,200 --> 00:21:08,760
is when we account for or assume that

583
00:21:08,760 --> 00:21:11,360
problems may occur it forces us to think

584
00:21:11,360 --> 00:21:13,400
of those edge cases where problems can

585
00:21:13,400 --> 00:21:15,640
arise and address them in our code the

586
00:21:15,640 --> 00:21:17,360
first time before we have complaints

587
00:21:17,360 --> 00:21:19,400
from our users in the live production

588
00:21:19,400 --> 00:21:21,200
version of our code telling us that the

589
00:21:21,200 --> 00:21:23,279
code is crashing their browsers in a way

590
00:21:23,279 --> 00:21:24,960
you can think of this as being a more

591
00:21:24,960 --> 00:21:27,159
defensive way to write your code and

592
00:21:27,159 --> 00:21:29,440
truly it's not asy easy you really have

593
00:21:29,440 --> 00:21:31,159
to think about all of the edge cases

594
00:21:31,159 --> 00:21:33,279
that can occur when your code is running

595
00:21:33,279 --> 00:21:35,559
in a live environment and it can be

596
00:21:35,559 --> 00:21:37,840
difficult to imagine the sometimes weird

597
00:21:37,840 --> 00:21:39,960
ways that our users might use our code

598
00:21:39,960 --> 00:21:42,400
in unexpected ways now typescript is not

599
00:21:42,400 --> 00:21:43,919
perfect for this but it makes writing

600
00:21:43,919 --> 00:21:46,559
for the sad path significantly easier

601
00:21:46,559 --> 00:21:48,679
and a perfect example here is with

602
00:21:48,679 --> 00:21:50,520
selected Pizza when it tells us that

603
00:21:50,520 --> 00:21:52,919
this object is possibly undefined and

604
00:21:52,919 --> 00:21:54,600
I'm sure that you've run into the error

605
00:21:54,600 --> 00:21:56,760
that happens when you try to access a

606
00:21:56,760 --> 00:21:58,600
property of undefined you'll see

607
00:21:58,600 --> 00:22:00,679
something like cannot access property

608
00:22:00,679 --> 00:22:03,120
price of undefined what's happening and

609
00:22:03,120 --> 00:22:05,520
what typescript can foresee being a

610
00:22:05,520 --> 00:22:07,559
potential issue is that we're trying to

611
00:22:07,559 --> 00:22:10,480
find an item in our menu array based on

612
00:22:10,480 --> 00:22:12,679
the pizza name String and typescript can

613
00:22:12,679 --> 00:22:14,760
see that it's possible this may come

614
00:22:14,760 --> 00:22:16,559
back as undefined if we're searching for

615
00:22:16,559 --> 00:22:19,279
a pizza that maybe we misspell or is

616
00:22:19,279 --> 00:22:21,440
some nonsense Pizza that doesn't exist

617
00:22:21,440 --> 00:22:23,640
inside of our menu then selected Pizza

618
00:22:23,640 --> 00:22:25,440
is going to be undefined and typescript

619
00:22:25,440 --> 00:22:27,720
says that would crash your program to

620
00:22:27,720 --> 00:22:29,520
satisfy typescript script in this case

621
00:22:29,520 --> 00:22:31,640
we can code a bit more defensively and

622
00:22:31,640 --> 00:22:34,279
say if there is no selected pizza then

623
00:22:34,279 --> 00:22:36,760
first let's go ahead and run a console.

624
00:22:36,760 --> 00:22:39,120
error we'll maybe say something simple

625
00:22:39,120 --> 00:22:41,200
like the current Pizza name that you're

626
00:22:41,200 --> 00:22:44,080
trying to search for does not exist in

627
00:22:44,080 --> 00:22:46,880
the menu then to satisfy typescript we

628
00:22:46,880 --> 00:22:49,520
need to return from this function or

629
00:22:49,520 --> 00:22:51,480
alternatively we could throw an error

630
00:22:51,480 --> 00:22:53,120
but the point is we want to stop

631
00:22:53,120 --> 00:22:55,240
execution of this function and by adding

632
00:22:55,240 --> 00:22:57,960
this return in here now typescript knows

633
00:22:57,960 --> 00:22:59,679
that this L of code will never get

634
00:22:59,679 --> 00:23:02,279
reached if selected Pizza is some falsy

635
00:23:02,279 --> 00:23:04,840
value like undefined I guess I could be

636
00:23:04,840 --> 00:23:06,760
a little bit more specific and say

637
00:23:06,760 --> 00:23:08,919
something like if selected Pizza is

638
00:23:08,919 --> 00:23:11,440
equal to undefined notice that that also

639
00:23:11,440 --> 00:23:13,400
satisfies typescript in this case I'll

640
00:23:13,400 --> 00:23:15,559
go ahead and just leave it as a check

641
00:23:15,559 --> 00:23:17,919
for the falsy value okay now it does

642
00:23:17,919 --> 00:23:19,600
feel a bit ridiculous that we haven't

643
00:23:19,600 --> 00:23:21,840
actually run our code yet the reason is

644
00:23:21,840 --> 00:23:23,200
because I knew there was a bunch of

645
00:23:23,200 --> 00:23:24,559
errors in here that we had to start

646
00:23:24,559 --> 00:23:26,440
fixing but now it's time for us to

647
00:23:26,440 --> 00:23:28,520
finally run our code and we can see that

648
00:23:28,520 --> 00:23:30,320
we do get a type error that says cannot

649
00:23:30,320 --> 00:23:32,120
set properties of undefined I thought

650
00:23:32,120 --> 00:23:33,919
this is what we just fixed this one

651
00:23:33,919 --> 00:23:35,679
though is talking about setting the

652
00:23:35,679 --> 00:23:37,600
status property now where is that

653
00:23:37,600 --> 00:23:39,200
happening that is happening where we

654
00:23:39,200 --> 00:23:41,720
complete the order order. status now

655
00:23:41,720 --> 00:23:43,559
there's a few points to be made here

656
00:23:43,559 --> 00:23:45,279
first of all it might seems strange that

657
00:23:45,279 --> 00:23:47,559
typescript is not warning us that order

658
00:23:47,559 --> 00:23:49,960
is potentially undefined in the same way

659
00:23:49,960 --> 00:23:51,679
that it was warning us that with

660
00:23:51,679 --> 00:23:53,679
selected Pizza there actually is a

661
00:23:53,679 --> 00:23:55,240
reason for this we're going to address

662
00:23:55,240 --> 00:23:57,279
it a little bit later on but secondly

663
00:23:57,279 --> 00:23:59,159
and I'm sure this was dri a bunch of

664
00:23:59,159 --> 00:24:01,279
people crazy when I'm calling complete

665
00:24:01,279 --> 00:24:04,000
order I'm passing in a string ID instead

666
00:24:04,000 --> 00:24:06,240
of a number ID and typescript isn't

667
00:24:06,240 --> 00:24:08,279
warning me about this at this point in

668
00:24:08,279 --> 00:24:10,080
this particular program we've reached

669
00:24:10,080 --> 00:24:12,000
the limit where typescript is able to

670
00:24:12,000 --> 00:24:13,799
help us without us going out of our way

671
00:24:13,799 --> 00:24:16,039
to write typescript specific code it's

672
00:24:16,039 --> 00:24:17,799
really nice that we able to fix a couple

673
00:24:17,799 --> 00:24:19,919
bugs and we can see that there are

674
00:24:19,919 --> 00:24:22,400
potential other bugs simply by including

675
00:24:22,400 --> 00:24:24,960
typescript in our project and using a TS

676
00:24:24,960 --> 00:24:27,120
extension on our file instead but since

677
00:24:27,120 --> 00:24:28,640
we've reached that limit where typt SCP

678
00:24:28,640 --> 00:24:30,600
is no longer willing to help us without

679
00:24:30,600 --> 00:24:32,799
defining specific types in our program

680
00:24:32,799 --> 00:24:34,520
let's finally jump in and start learning

681
00:24:34,520 --> 00:24:36,640
some typescript specific code starting

682
00:24:36,640 --> 00:24:39,000
from the

683
00:24:40,200 --> 00:24:42,720
basics we're starting to see some of the

684
00:24:42,720 --> 00:24:45,200
benefits of using typescript but I think

685
00:24:45,200 --> 00:24:46,960
they will really start to sink in as

686
00:24:46,960 --> 00:24:49,080
we're building a real project in order

687
00:24:49,080 --> 00:24:50,960
for us to do that we have to learn some

688
00:24:50,960 --> 00:24:53,000
of the very basics of typescript and

689
00:24:53,000 --> 00:24:55,440
that is how to type a variable when I'm

690
00:24:55,440 --> 00:24:57,440
writing vanilla JavaScript I can say

691
00:24:57,440 --> 00:25:02,360
something like let my name equal Bob and

692
00:25:02,360 --> 00:25:04,320
because typescript is a superet of

693
00:25:04,320 --> 00:25:06,399
JavaScript any JavaScript code that we

694
00:25:06,399 --> 00:25:09,080
have will be legitimate typescript code

695
00:25:09,080 --> 00:25:11,080
now perhaps unconventionally I'm going

696
00:25:11,080 --> 00:25:13,200
to start this lesson by saying when you

697
00:25:13,200 --> 00:25:15,080
write a line of code like this

698
00:25:15,080 --> 00:25:17,559
typescript is very smart and it's able

699
00:25:17,559 --> 00:25:20,360
to infer what data type is being used

700
00:25:20,360 --> 00:25:22,559
for the variable that you just created

701
00:25:22,559 --> 00:25:24,440
so go ahead and hover your mouse over

702
00:25:24,440 --> 00:25:26,320
this variable my name let it sit there

703
00:25:26,320 --> 00:25:27,840
for just a second and you'll see a

704
00:25:27,840 --> 00:25:29,720
really small pop up that says Let My

705
00:25:29,720 --> 00:25:32,880
Name colon string here what typescript

706
00:25:32,880 --> 00:25:36,039
has done is it has inferred or derived

707
00:25:36,039 --> 00:25:38,799
what data type my name is supposed to be

708
00:25:38,799 --> 00:25:40,520
now while we are about to learn how we

709
00:25:40,520 --> 00:25:42,440
can manually provide different data

710
00:25:42,440 --> 00:25:44,559
types to our variables I do think it's

711
00:25:44,559 --> 00:25:46,440
important to note that the work that

712
00:25:46,440 --> 00:25:48,559
we're about to do is busy work it's not

713
00:25:48,559 --> 00:25:50,360
something that typescript requires you

714
00:25:50,360 --> 00:25:52,080
to do because it's able to figure out

715
00:25:52,080 --> 00:25:54,159
the data types simply by the data type

716
00:25:54,159 --> 00:25:56,080
that you assign to it to demonstrate

717
00:25:56,080 --> 00:25:59,279
that if I then try to say my name equals

718
00:25:59,279 --> 00:26:02,000
a number we get a red squiggly and if

719
00:26:02,000 --> 00:26:04,039
you hover your mouse over my name we'll

720
00:26:04,039 --> 00:26:06,600
see that it says the type of five is not

721
00:26:06,600 --> 00:26:08,760
assignable to the type of string in

722
00:26:08,760 --> 00:26:10,440
other words typescript is angry that

723
00:26:10,440 --> 00:26:13,559
we're trying to reassign a number value

724
00:26:13,559 --> 00:26:16,320
to a variable that was originally set to

725
00:26:16,320 --> 00:26:18,840
be a string as a side note sometimes

726
00:26:18,840 --> 00:26:21,000
people talk about javascript's Dynamic

727
00:26:21,000 --> 00:26:22,799
typing nature where in regular

728
00:26:22,799 --> 00:26:24,720
JavaScript this operation is not a

729
00:26:24,720 --> 00:26:26,440
problem at all they talk about it being

730
00:26:26,440 --> 00:26:29,159
a strength in the flexibility JavaScript

731
00:26:29,159 --> 00:26:31,039
but in practice in the real world off

732
00:26:31,039 --> 00:26:32,640
the top of my head I can't think of a

733
00:26:32,640 --> 00:26:34,640
reason why this would be a beneficial

734
00:26:34,640 --> 00:26:37,000
feature for us to be able to reassign a

735
00:26:37,000 --> 00:26:38,960
string value to something that's a

736
00:26:38,960 --> 00:26:40,760
completely different data type it's a

737
00:26:40,760 --> 00:26:42,679
code smell to me which means that if I

738
00:26:42,679 --> 00:26:44,279
see something like this or I'm

739
00:26:44,279 --> 00:26:46,159
attempting to do this in my code then

740
00:26:46,159 --> 00:26:48,000
I'm probably structuring my code in a

741
00:26:48,000 --> 00:26:50,440
bad way so typescript forces us to think

742
00:26:50,440 --> 00:26:52,600
of better ways to organize our code

743
00:26:52,600 --> 00:26:54,480
anyway let's get back to manual typing

744
00:26:54,480 --> 00:26:56,240
now although typescript has correctly

745
00:26:56,240 --> 00:26:57,880
derived that this is going to be a

746
00:26:57,880 --> 00:27:00,799
string type I can manually give a type

747
00:27:00,799 --> 00:27:03,159
by typing a colon immediately after my

748
00:27:03,159 --> 00:27:05,039
variable name and then typing out the

749
00:27:05,039 --> 00:27:07,200
lowercase version of what data type I

750
00:27:07,200 --> 00:27:09,039
want this to be so this might look a

751
00:27:09,039 --> 00:27:10,760
little strange this is one of those

752
00:27:10,760 --> 00:27:12,840
instances where the typescript syntax is

753
00:27:12,840 --> 00:27:14,760
different from JavaScript syntax this

754
00:27:14,760 --> 00:27:16,600
would not be correct syntax in vanilla

755
00:27:16,600 --> 00:27:18,080
JavaScript but it is something that

756
00:27:18,080 --> 00:27:19,760
you'll see all throughout typescript and

757
00:27:19,760 --> 00:27:21,640
you'll just get used to typing it now

758
00:27:21,640 --> 00:27:23,000
let's get our hands on the keyboard and

759
00:27:23,000 --> 00:27:26,159
do an admittedly really simple challenge

760
00:27:26,159 --> 00:27:28,159
we've already used the Primitive dat

761
00:27:28,159 --> 00:27:30,880
data type of string lowercase s string

762
00:27:30,880 --> 00:27:32,440
and in typescript the other two

763
00:27:32,440 --> 00:27:34,279
primitive data types that we'll use are

764
00:27:34,279 --> 00:27:36,840
number lowercase n and bullion with a

765
00:27:36,840 --> 00:27:39,120
lowercase b the reason I'm creating a

766
00:27:39,120 --> 00:27:40,600
distinction between the uppercase and

767
00:27:40,600 --> 00:27:42,760
lowercase is because in JavaScript there

768
00:27:42,760 --> 00:27:45,519
is an uppercase s string Constructor and

769
00:27:45,519 --> 00:27:48,080
uppercase n number Constructor and the

770
00:27:48,080 --> 00:27:49,720
same with Boolean but that's not what

771
00:27:49,720 --> 00:27:51,279
we're accessing when we're doing these

772
00:27:51,279 --> 00:27:53,640
types okay should be super easy pause

773
00:27:53,640 --> 00:27:55,000
now and work on the challenge of

774
00:27:55,000 --> 00:27:59,640
explicitly typing these variables below

775
00:28:03,080 --> 00:28:05,159
well if we hover over number of Wheels

776
00:28:05,159 --> 00:28:07,440
again we can see that typescript derived

777
00:28:07,440 --> 00:28:09,480
the data type of number I guess this

778
00:28:09,480 --> 00:28:11,640
could be an easy way to cheat into

779
00:28:11,640 --> 00:28:13,399
knowing exactly what to be there but

780
00:28:13,399 --> 00:28:14,960
this is so straightforward I'm not

781
00:28:14,960 --> 00:28:16,720
concerned about that we're going to add

782
00:28:16,720 --> 00:28:19,799
colon number and colon Boolean in order

783
00:28:19,799 --> 00:28:22,640
to explicitly type these variables okay

784
00:28:22,640 --> 00:28:24,159
there's a little bit more syntax that

785
00:28:24,159 --> 00:28:25,600
we're going to learn when it comes to

786
00:28:25,600 --> 00:28:27,679
manually providing some types so once

787
00:28:27,679 --> 00:28:28,919
you feel feel pretty good about what

788
00:28:28,919 --> 00:28:32,240
we've done here let's keep moving

789
00:28:33,399 --> 00:28:36,120
forward we'll be talking about typing

790
00:28:36,120 --> 00:28:38,240
inside of functions really soon but I

791
00:28:38,240 --> 00:28:39,679
thought it would be a good chance to

792
00:28:39,679 --> 00:28:41,320
apply what we've learned to our pizza

793
00:28:41,320 --> 00:28:43,240
restaurant app so your challenge is to

794
00:28:43,240 --> 00:28:45,080
teach typescript what data type should

795
00:28:45,080 --> 00:28:47,720
be used for the order ID parameter here

796
00:28:47,720 --> 00:28:50,000
in our complete order function then once

797
00:28:50,000 --> 00:28:51,679
you've added that keep a close eye on

798
00:28:51,679 --> 00:28:53,200
the rest of the program to see if

799
00:28:53,200 --> 00:28:55,600
typescript has any new warnings and if

800
00:28:55,600 --> 00:28:57,600
something pops up go ahead and fix that

801
00:28:57,600 --> 00:29:00,720
pause now and work on this

802
00:29:04,360 --> 00:29:06,559
challenge again this is a bit on the

803
00:29:06,559 --> 00:29:08,760
nose because we know that this is not

804
00:29:08,760 --> 00:29:10,799
supposed to be a string but let's just

805
00:29:10,799 --> 00:29:12,679
assume that we missed that little error

806
00:29:12,679 --> 00:29:14,559
and we'll say that this order ID is

807
00:29:14,559 --> 00:29:17,080
supposed to be of a number type and sure

808
00:29:17,080 --> 00:29:18,799
enough because we've gone out of our way

809
00:29:18,799 --> 00:29:20,799
to add just a few additional characters

810
00:29:20,799 --> 00:29:22,480
to our complete order function

811
00:29:22,480 --> 00:29:24,399
typescript now knows that we're using

812
00:29:24,399 --> 00:29:26,120
this function incorrectly we're passing

813
00:29:26,120 --> 00:29:28,120
in a string where it shouldn't be if you

814
00:29:28,120 --> 00:29:30,039
cover your mouse over the one it says

815
00:29:30,039 --> 00:29:32,799
that the argument of type string one is

816
00:29:32,799 --> 00:29:34,960
not assignable to a parameter of type

817
00:29:34,960 --> 00:29:37,399
number and great yes that should be a

818
00:29:37,399 --> 00:29:38,960
number let's go ahead and make that a

819
00:29:38,960 --> 00:29:41,519
number and let's hit save and look at

820
00:29:41,519 --> 00:29:43,880
that there are other potential issues in

821
00:29:43,880 --> 00:29:45,480
our program but because we're using

822
00:29:45,480 --> 00:29:47,440
typescript we are no longer crashing

823
00:29:47,440 --> 00:29:49,480
with type errors all right now at this

824
00:29:49,480 --> 00:29:51,480
point our app would benefit from us

825
00:29:51,480 --> 00:29:53,159
starting to write what's called custom

826
00:29:53,159 --> 00:29:54,720
types so that's what we'll start

827
00:29:54,720 --> 00:29:58,559
learning in the next lesson

828
00:30:00,159 --> 00:30:02,360
we've talked about a few primitive types

829
00:30:02,360 --> 00:30:04,200
like string number and Boolean but in

830
00:30:04,200 --> 00:30:06,360
typescript we also can create our own

831
00:30:06,360 --> 00:30:08,360
custom types at first this isn't going

832
00:30:08,360 --> 00:30:10,559
to seem super useful but just bear with

833
00:30:10,559 --> 00:30:13,320
me we can create new types by using the

834
00:30:13,320 --> 00:30:15,480
type keyword this is something that

835
00:30:15,480 --> 00:30:17,480
exists only in typescript and by

836
00:30:17,480 --> 00:30:19,320
convention the name that we give our

837
00:30:19,320 --> 00:30:21,320
type is going to start with a capital

838
00:30:21,320 --> 00:30:24,159
letter for example I could say type food

839
00:30:24,159 --> 00:30:27,159
is equal to string by doing this I now

840
00:30:27,159 --> 00:30:30,200
could use the capital F food as my way

841
00:30:30,200 --> 00:30:33,080
of providing a new type to this favorite

842
00:30:33,080 --> 00:30:34,799
food variable now doing this with

843
00:30:34,799 --> 00:30:36,679
primitive types like strings numbers and

844
00:30:36,679 --> 00:30:38,720
booleans won't make a whole lot of sense

845
00:30:38,720 --> 00:30:40,799
until we talk later down the road about

846
00:30:40,799 --> 00:30:43,000
something called unions or intersections

847
00:30:43,000 --> 00:30:44,799
but this can come in handy for creating

848
00:30:44,799 --> 00:30:47,320
custom types around objects let me show

849
00:30:47,320 --> 00:30:49,640
you what I mean I have this person

850
00:30:49,640 --> 00:30:51,840
object with three properties name age

851
00:30:51,840 --> 00:30:54,039
and is student a pretty common thing

852
00:30:54,039 --> 00:30:55,960
with objects is that you might have

853
00:30:55,960 --> 00:30:58,760
multiple of the same kind of object so

854
00:30:58,760 --> 00:31:01,039
let's say we have a person two which

855
00:31:01,039 --> 00:31:03,320
looks very similar we're going to have

856
00:31:03,320 --> 00:31:07,440
Jill age know 66 and we'll go ahead and

857
00:31:07,440 --> 00:31:11,200
say is student is false as it stands

858
00:31:11,200 --> 00:31:13,080
there's no problem with this code

859
00:31:13,080 --> 00:31:14,360
however you might have noticed that I

860
00:31:14,360 --> 00:31:16,639
used a lowercase in this is student

861
00:31:16,639 --> 00:31:19,080
property and an uppercase s in this one

862
00:31:19,080 --> 00:31:21,159
one of the benefits of using typescript

863
00:31:21,159 --> 00:31:23,519
is that it forces us to stay consistent

864
00:31:23,519 --> 00:31:25,720
and although this may not cause a bug

865
00:31:25,720 --> 00:31:27,440
the way it's written currently it seems

866
00:31:27,440 --> 00:31:29,880
pretty ripe for a bug down the road what

867
00:31:29,880 --> 00:31:32,960
we can do is create a custom type of an

868
00:31:32,960 --> 00:31:35,159
object that defines the shape of the

869
00:31:35,159 --> 00:31:37,000
object where we can give it exactly what

870
00:31:37,000 --> 00:31:39,000
the property names are I can create my

871
00:31:39,000 --> 00:31:41,240
custom type by using the type keyword

872
00:31:41,240 --> 00:31:43,760
I'll use capital P person as my type and

873
00:31:43,760 --> 00:31:46,279
I'll set it equal to an object and what

874
00:31:46,279 --> 00:31:48,639
I'm doing inside of this object type is

875
00:31:48,639 --> 00:31:50,679
telling it what properties it will have

876
00:31:50,679 --> 00:31:53,080
like name but then instead of providing

877
00:31:53,080 --> 00:31:55,399
a value I'm going to give it a type I

878
00:31:55,399 --> 00:31:58,120
want my name to be a string type one

879
00:31:58,120 --> 00:32:00,080
quick side note about custom object

880
00:32:00,080 --> 00:32:02,600
types in a regular JavaScript object

881
00:32:02,600 --> 00:32:04,360
it's syntactically correct to have a

882
00:32:04,360 --> 00:32:06,399
comma to separate each one of your

883
00:32:06,399 --> 00:32:08,120
property names however when you're

884
00:32:08,120 --> 00:32:10,360
creating an object type like this you

885
00:32:10,360 --> 00:32:13,000
can use commas you also can use

886
00:32:13,000 --> 00:32:15,240
semicolons you also can just leave them

887
00:32:15,240 --> 00:32:17,440
out so for me personally I'm probably

888
00:32:17,440 --> 00:32:19,360
going to just leave out anything at the

889
00:32:19,360 --> 00:32:21,399
end here but you can choose whatever you

890
00:32:21,399 --> 00:32:23,279
want and it's most important just to

891
00:32:23,279 --> 00:32:24,960
stay consistent within the project that

892
00:32:24,960 --> 00:32:26,720
you're working in okay just so we can

893
00:32:26,720 --> 00:32:28,480
avoid some passive list listening here

894
00:32:28,480 --> 00:32:30,279
I'm going to include a really simple

895
00:32:30,279 --> 00:32:32,360
challenge here I know it's a little bit

896
00:32:32,360 --> 00:32:34,000
of busy work but getting your hands on

897
00:32:34,000 --> 00:32:35,600
the keyboard is always a win when you're

898
00:32:35,600 --> 00:32:37,799
learning to code so your challenge is to

899
00:32:37,799 --> 00:32:39,679
finish the object type definition so

900
00:32:39,679 --> 00:32:41,360
let's say so that it looks like person

901
00:32:41,360 --> 00:32:42,519
and you know what let's call this person

902
00:32:42,519 --> 00:32:45,000
one so that this type is the same shape

903
00:32:45,000 --> 00:32:48,960
as person one pause now and work on the

904
00:32:49,159 --> 00:32:51,399
challenge okay well we're going to put

905
00:32:51,399 --> 00:32:55,200
age is a number and is student is a

906
00:32:55,200 --> 00:32:57,559
Boolean simple enough now let's take a

907
00:32:57,559 --> 00:32:59,720
step back obviously writing this out has

908
00:32:59,720 --> 00:33:01,799
cost us more work it's used up five more

909
00:33:01,799 --> 00:33:03,720
lines of code frankly it doesn't take

910
00:33:03,720 --> 00:33:05,360
very long but it can feel like it's

911
00:33:05,360 --> 00:33:07,519
breaking your flow however by doing this

912
00:33:07,519 --> 00:33:09,679
we've added an extra degree of type

913
00:33:09,679 --> 00:33:12,559
safety when I'm defining person one I

914
00:33:12,559 --> 00:33:15,000
can use my colon and set it equal to my

915
00:33:15,000 --> 00:33:17,519
custom type person and I can do the same

916
00:33:17,519 --> 00:33:19,880
thing for person 2 we'll say this is

917
00:33:19,880 --> 00:33:22,080
capital P person and check it out even

918
00:33:22,080 --> 00:33:23,919
though we had to go out of our way to

919
00:33:23,919 --> 00:33:26,600
define this custom object type by doing

920
00:33:26,600 --> 00:33:28,519
that little extra work we have already

921
00:33:28,519 --> 00:33:30,480
been able to identify a potential

922
00:33:30,480 --> 00:33:33,000
problem we know that these two objects

923
00:33:33,000 --> 00:33:34,799
should be the same but we might have

924
00:33:34,799 --> 00:33:36,440
just missed it because we're fallible

925
00:33:36,440 --> 00:33:39,000
humans let's put in a capital S and

926
00:33:39,000 --> 00:33:41,200
satisfy typescript spend some time

927
00:33:41,200 --> 00:33:42,639
playing with this code and when you're

928
00:33:42,639 --> 00:33:44,360
ready we'll move on and talk really

929
00:33:44,360 --> 00:33:47,799
briefly about nested object

930
00:33:48,600 --> 00:33:51,519
types let's set a standard in our pizza

931
00:33:51,519 --> 00:33:54,279
restaurant app as to the shape our pizza

932
00:33:54,279 --> 00:33:56,880
objects should have and I'll have you do

933
00:33:56,880 --> 00:33:59,559
that through a challenge your task is to

934
00:33:59,559 --> 00:34:01,559
create a pizza object type it should

935
00:34:01,559 --> 00:34:04,159
include a name and a price property and

936
00:34:04,159 --> 00:34:05,600
that'll be the extent of the challenge

937
00:34:05,600 --> 00:34:07,399
for now we'll apply that in just a

938
00:34:07,399 --> 00:34:11,200
minute so pause now and work on this

939
00:34:14,918 --> 00:34:17,000
challenge okay this should be pretty

940
00:34:17,000 --> 00:34:19,359
straightforward we'll say we have a new

941
00:34:19,359 --> 00:34:22,239
object type called pizza and it needs to

942
00:34:22,239 --> 00:34:25,960
have a string name and a price which is

943
00:34:25,960 --> 00:34:28,679
a number okay easy easy enough now what

944
00:34:28,679 --> 00:34:30,359
I want you to do is to pause look

945
00:34:30,359 --> 00:34:32,040
through our code and see if there's

946
00:34:32,040 --> 00:34:34,119
anything obvious that you can enhance

947
00:34:34,119 --> 00:34:36,000
with typescript by telling it that the

948
00:34:36,000 --> 00:34:38,399
type should be of this pizza object type

949
00:34:38,399 --> 00:34:40,040
so pause now peruse through the code

950
00:34:40,040 --> 00:34:42,040
experiment a little bit see what happens

951
00:34:42,040 --> 00:34:43,679
and then I'll have an official challenge

952
00:34:43,679 --> 00:34:45,879
for

953
00:34:48,480 --> 00:34:51,119
you well if you're anything like me you

954
00:34:51,119 --> 00:34:52,639
probably went through and started

955
00:34:52,639 --> 00:34:54,239
looking at the different red squigglies

956
00:34:54,239 --> 00:34:56,399
that we have and right here in our add

957
00:34:56,399 --> 00:34:58,440
new pizza we have this pizza object

958
00:34:58,440 --> 00:35:00,160
which if you hover over it typescript

959
00:35:00,160 --> 00:35:02,560
warns us that it implicitly has an any

960
00:35:02,560 --> 00:35:04,440
type that term any type isn't

961
00:35:04,440 --> 00:35:06,079
necessarily supposed to make any sense

962
00:35:06,079 --> 00:35:07,960
to you yet so don't worry about that we

963
00:35:07,960 --> 00:35:09,599
will be covering that soon but this

964
00:35:09,599 --> 00:35:12,160
brings us to the next challenge all

965
00:35:12,160 --> 00:35:13,440
right your challenge is to teach

966
00:35:13,440 --> 00:35:15,640
typescript that this pizza object in

967
00:35:15,640 --> 00:35:17,720
this add new pizza function is supposed

968
00:35:17,720 --> 00:35:20,599
to be of type pizza then like before

969
00:35:20,599 --> 00:35:22,160
once you've done that look through the

970
00:35:22,160 --> 00:35:23,960
code and see if there are any new

971
00:35:23,960 --> 00:35:25,880
warnings you need to deal with of course

972
00:35:25,880 --> 00:35:27,920
there are going to be and fix those

973
00:35:27,920 --> 00:35:31,640
issues pause now and work on this

974
00:35:35,200 --> 00:35:37,599
challenge all we have to do is put a

975
00:35:37,599 --> 00:35:40,560
colon and then a capital P Pizza after

976
00:35:40,560 --> 00:35:42,599
this typescript is no longer warning us

977
00:35:42,599 --> 00:35:44,880
that pizza object is implicitly in any

978
00:35:44,880 --> 00:35:46,800
type and in fact if you hover your mouse

979
00:35:46,800 --> 00:35:48,720
over Pizza object here it will

980
00:35:48,720 --> 00:35:50,560
specifically tell you it's a parameter

981
00:35:50,560 --> 00:35:52,800
and it's of type capital P Pizza all

982
00:35:52,800 --> 00:35:54,920
right let me clean up this text and

983
00:35:54,920 --> 00:35:57,000
we'll just go ahead and peruse down here

984
00:35:57,000 --> 00:35:58,160
in our code

985
00:35:58,160 --> 00:36:00,400
and check it out down here when we were

986
00:36:00,400 --> 00:36:02,359
adding a new pizza we have these three

987
00:36:02,359 --> 00:36:04,800
new errors over cost if you didn't have

988
00:36:04,800 --> 00:36:06,359
a chance to do this already have your

989
00:36:06,359 --> 00:36:08,280
mouse over cost and you'll see that it

990
00:36:08,280 --> 00:36:10,720
tells you that the argument of type Nam

991
00:36:10,720 --> 00:36:13,599
string cost number is not assignable to

992
00:36:13,599 --> 00:36:16,240
the parameter of type Pizza okay well

993
00:36:16,240 --> 00:36:17,640
that's interesting the next thing it

994
00:36:17,640 --> 00:36:19,760
says is that the object literal may only

995
00:36:19,760 --> 00:36:22,880
specify known properties and cost does

996
00:36:22,880 --> 00:36:25,599
not exist in type pizza and sure enough

997
00:36:25,599 --> 00:36:26,960
when we wrote this we might have

998
00:36:26,960 --> 00:36:29,040
forgotten that it actually is supposed

999
00:36:29,040 --> 00:36:31,480
to be price not cost typescript saving

1000
00:36:31,480 --> 00:36:33,640
us again you can go ahead and change

1001
00:36:33,640 --> 00:36:36,040
these to price instead of cost and hit

1002
00:36:36,040 --> 00:36:38,440
save and sure enough everything is

1003
00:36:38,440 --> 00:36:40,880
working as we'd expect now I assume a

1004
00:36:40,880 --> 00:36:42,560
number of you were probably screaming at

1005
00:36:42,560 --> 00:36:44,319
me this whole time when I first wrote

1006
00:36:44,319 --> 00:36:46,319
cost here in the beginning I promise it

1007
00:36:46,319 --> 00:36:48,079
was all planned out and staged but

1008
00:36:48,079 --> 00:36:50,079
notice that without writing our pizza

1009
00:36:50,079 --> 00:36:52,240
type and specifically telling add new

1010
00:36:52,240 --> 00:36:54,400
pizza is supposed to be taking a pizza

1011
00:36:54,400 --> 00:36:56,280
object that our program wasn't

1012
00:36:56,280 --> 00:36:58,560
necessarily crashing if you looked at

1013
00:36:58,560 --> 00:37:01,040
our menu before we had an array of the

1014
00:37:01,040 --> 00:37:03,079
items that we initialized in the

1015
00:37:03,079 --> 00:37:05,440
beginning but then we also had added

1016
00:37:05,440 --> 00:37:08,400
items with a name and a cost property

1017
00:37:08,400 --> 00:37:09,960
and I don't know about you but that

1018
00:37:09,960 --> 00:37:11,920
makes me feel gross to know that we have

1019
00:37:11,920 --> 00:37:14,240
these mixed types in our menu that's

1020
00:37:14,240 --> 00:37:16,079
just asking for crashing bugs down the

1021
00:37:16,079 --> 00:37:18,400
road by adding just a few lines of

1022
00:37:18,400 --> 00:37:20,440
really simple typescript we were able to

1023
00:37:20,440 --> 00:37:22,359
defend against that problem that not

1024
00:37:22,359 --> 00:37:23,920
only would never have shown up in

1025
00:37:23,920 --> 00:37:26,480
regular JavaScript but also wasn't even

1026
00:37:26,480 --> 00:37:28,640
showing up as issues here in typescript

1027
00:37:28,640 --> 00:37:30,560
until we went out of our way to create

1028
00:37:30,560 --> 00:37:32,599
this pizza type okay we're making good

1029
00:37:32,599 --> 00:37:34,560
progress on fixing up the bugs in this

1030
00:37:34,560 --> 00:37:36,359
app before we move forward there's one

1031
00:37:36,359 --> 00:37:38,359
really easy update that we can make and

1032
00:37:38,359 --> 00:37:40,200
it's so easy I'm not even going to make

1033
00:37:40,200 --> 00:37:42,520
it a challenge here in our place order

1034
00:37:42,520 --> 00:37:44,720
function if we hover over Pizza name

1035
00:37:44,720 --> 00:37:46,359
which typescript is warning us about it

1036
00:37:46,359 --> 00:37:48,640
says that it implicitly has an any type

1037
00:37:48,640 --> 00:37:51,040
let's go ahead and type that as a string

1038
00:37:51,040 --> 00:37:53,400
and get rid of that warning great well

1039
00:37:53,400 --> 00:37:55,480
it looks like the majority of the issues

1040
00:37:55,480 --> 00:37:57,040
actually all of the issues that we have

1041
00:37:57,040 --> 00:37:59,040
left have to do with this variable order

1042
00:37:59,040 --> 00:38:01,200
CU so let's go ahead and Tackle this

1043
00:38:01,200 --> 00:38:03,560
issue

1044
00:38:05,040 --> 00:38:07,680
next let's say we want to build out our

1045
00:38:07,680 --> 00:38:09,520
person object a little bit more and we

1046
00:38:09,520 --> 00:38:12,240
want to include an address property well

1047
00:38:12,240 --> 00:38:13,720
typically something like an address

1048
00:38:13,720 --> 00:38:15,920
wouldn't simply be represented by a

1049
00:38:15,920 --> 00:38:18,839
string but instead by a nested object

1050
00:38:18,839 --> 00:38:20,400
the most straightforward way to do this

1051
00:38:20,400 --> 00:38:22,240
is to Simply type it out as if I were

1052
00:38:22,240 --> 00:38:24,560
typing out a regular object I can put my

1053
00:38:24,560 --> 00:38:27,000
curly braces there and just like I did

1054
00:38:27,000 --> 00:38:29,319
with the rest of my type I can say maybe

1055
00:38:29,319 --> 00:38:31,640
there's a street portion of my address

1056
00:38:31,640 --> 00:38:33,599
and this is going to be a string we'll

1057
00:38:33,599 --> 00:38:36,319
just stick to Street city which is a

1058
00:38:36,319 --> 00:38:38,640
string and then we'll also say uh let's

1059
00:38:38,640 --> 00:38:41,200
do country and that'll also be a string

1060
00:38:41,200 --> 00:38:42,720
okay what do you notice about our code

1061
00:38:42,720 --> 00:38:45,440
now well our objects below are typed as

1062
00:38:45,440 --> 00:38:48,160
person objects or person types but we

1063
00:38:48,160 --> 00:38:50,000
just changed the definition for person

1064
00:38:50,000 --> 00:38:52,599
to say that it must include an address

1065
00:38:52,599 --> 00:38:54,680
if we hover over the red squiggly which

1066
00:38:54,680 --> 00:38:56,200
you should also do right now as you're

1067
00:38:56,200 --> 00:38:58,400
watching this it tells us that the type

1068
00:38:58,400 --> 00:39:01,000
of this person one with the object as it

1069
00:39:01,000 --> 00:39:03,359
currently stands is not assignable to

1070
00:39:03,359 --> 00:39:05,160
the type of person in other words

1071
00:39:05,160 --> 00:39:07,440
there's a mismatch between the derived

1072
00:39:07,440 --> 00:39:09,079
type of this variable that we've just

1073
00:39:09,079 --> 00:39:11,640
set which typescript can see is a name

1074
00:39:11,640 --> 00:39:13,319
with a string and age with the number

1075
00:39:13,319 --> 00:39:15,640
and a is student with a Boolean and it

1076
00:39:15,640 --> 00:39:17,880
sees that that doesn't accurately match

1077
00:39:17,880 --> 00:39:20,160
the person type that we just redefined

1078
00:39:20,160 --> 00:39:22,400
with the address property assuming we do

1079
00:39:22,400 --> 00:39:24,079
actually want every one of our objects

1080
00:39:24,079 --> 00:39:26,319
to have an address property we would

1081
00:39:26,319 --> 00:39:28,240
need to make sure that we update our

1082
00:39:28,240 --> 00:39:30,839
objects to include an address property

1083
00:39:30,839 --> 00:39:32,839
that includes all of the subproperties

1084
00:39:32,839 --> 00:39:34,800
of the person type definition under

1085
00:39:34,800 --> 00:39:36,960
address so that means I would have to

1086
00:39:36,960 --> 00:39:39,680
have a street let's just put something

1087
00:39:39,680 --> 00:39:42,640
generic in here a city we'll say this is

1088
00:39:42,640 --> 00:39:46,520
any town and the country we'll say is

1089
00:39:46,520 --> 00:39:49,040
USA I'm sure you noticed as soon as I

1090
00:39:49,040 --> 00:39:51,599
added country to my address it then

1091
00:39:51,599 --> 00:39:53,760
satisfied the definition for this person

1092
00:39:53,760 --> 00:39:56,280
type and typescript stopped complaining

1093
00:39:56,280 --> 00:39:58,240
removing any one of these properties is

1094
00:39:58,240 --> 00:39:59,960
going to make typescript complain

1095
00:39:59,960 --> 00:40:01,520
because it doesn't perfectly match the

1096
00:40:01,520 --> 00:40:03,560
type that was up there now I can guess

1097
00:40:03,560 --> 00:40:05,160
what some of you might be thinking at

1098
00:40:05,160 --> 00:40:07,240
this point because this is exactly what

1099
00:40:07,240 --> 00:40:09,000
I thought at this point in my learning

1100
00:40:09,000 --> 00:40:11,480
of typescript is that typescript feels

1101
00:40:11,480 --> 00:40:14,280
so extremely rigid we've become very

1102
00:40:14,280 --> 00:40:16,640
accustomed to writing JavaScript where

1103
00:40:16,640 --> 00:40:19,200
essentially anything goes and we fix the

1104
00:40:19,200 --> 00:40:20,800
bugs that we have while we're testing

1105
00:40:20,800 --> 00:40:22,680
out our app and we kind of hope that we

1106
00:40:22,680 --> 00:40:24,280
fix it all but at least we get some

1107
00:40:24,280 --> 00:40:26,319
freedom and flexibility I have two

1108
00:40:26,319 --> 00:40:28,079
things to say to that first of all we

1109
00:40:28,079 --> 00:40:29,839
are going to learn a way in which we can

1110
00:40:29,839 --> 00:40:32,560
make these properties optional so that

1111
00:40:32,560 --> 00:40:34,839
typescript won't scream at us if for

1112
00:40:34,839 --> 00:40:36,680
example we don't want person one to have

1113
00:40:36,680 --> 00:40:39,160
an address but secondly I would say that

1114
00:40:39,160 --> 00:40:40,720
you should work really hard to force

1115
00:40:40,720 --> 00:40:43,240
yourself to become comfortable with that

1116
00:40:43,240 --> 00:40:45,000
extra rigidity that's offered by

1117
00:40:45,000 --> 00:40:47,000
typescript at first you might think that

1118
00:40:47,000 --> 00:40:49,040
it's sort of stealing the fun of

1119
00:40:49,040 --> 00:40:51,079
slinging JavaScript code and building

1120
00:40:51,079 --> 00:40:53,319
projects on the Fly really quickly

1121
00:40:53,319 --> 00:40:55,160
however when you're working in a real

1122
00:40:55,160 --> 00:40:57,000
production environment at a company

1123
00:40:57,000 --> 00:40:58,880
you're going to find it less fun when

1124
00:40:58,880 --> 00:41:00,760
you have to fix bugs in production

1125
00:41:00,760 --> 00:41:02,839
because you didn't have the extra

1126
00:41:02,839 --> 00:41:04,880
rigidity and type safety that comes by

1127
00:41:04,880 --> 00:41:06,760
using typescript all right I'll get off

1128
00:41:06,760 --> 00:41:08,680
my high horse now one last thing before

1129
00:41:08,680 --> 00:41:10,440
we move on another common way that you

1130
00:41:10,440 --> 00:41:13,079
will see this nested object structured

1131
00:41:13,079 --> 00:41:15,880
is by not necessarily defining the types

1132
00:41:15,880 --> 00:41:17,760
right here in line with our person

1133
00:41:17,760 --> 00:41:20,000
object but instead simply creating a

1134
00:41:20,000 --> 00:41:22,599
separate type for the address alone and

1135
00:41:22,599 --> 00:41:24,599
so I'm going to turn this into a

1136
00:41:24,599 --> 00:41:26,760
challenge your challenge is to try and

1137
00:41:26,760 --> 00:41:28,640
figure out how to move the nested

1138
00:41:28,640 --> 00:41:31,200
address object that we have here into

1139
00:41:31,200 --> 00:41:33,640
its own type like we see here and once

1140
00:41:33,640 --> 00:41:34,880
you've done this correctly there should

1141
00:41:34,880 --> 00:41:37,520
be no red errors in the editor below I

1142
00:41:37,520 --> 00:41:39,040
do want to point out that I haven't

1143
00:41:39,040 --> 00:41:41,319
explicitly taught how to do this what

1144
00:41:41,319 --> 00:41:43,280
I'm trying to accomplish here is getting

1145
00:41:43,280 --> 00:41:44,960
your brain thinking get your hands on

1146
00:41:44,960 --> 00:41:46,839
the keyboard and see if you can put two

1147
00:41:46,839 --> 00:41:48,760
and two together to figure out exactly

1148
00:41:48,760 --> 00:41:50,240
what this would look like if you're

1149
00:41:50,240 --> 00:41:52,200
feeling stuck rather than just hitting

1150
00:41:52,200 --> 00:41:53,800
play and moving forward I would

1151
00:41:53,800 --> 00:41:56,160
recommend searching on Google or opening

1152
00:41:56,160 --> 00:41:58,520
chat GPT and formulating your question

1153
00:41:58,520 --> 00:42:00,520
specifically so that you can be engaging

1154
00:42:00,520 --> 00:42:02,200
your mind and really going out of your

1155
00:42:02,200 --> 00:42:04,160
way to try and learn these things when

1156
00:42:04,160 --> 00:42:06,280
you just push forward and watch me do it

1157
00:42:06,280 --> 00:42:08,319
it doesn't sink in quite the same way as

1158
00:42:08,319 --> 00:42:10,760
when you are more engaged okay getting

1159
00:42:10,760 --> 00:42:12,760
off my soap box now pause now and work

1160
00:42:12,760 --> 00:42:15,079
on this

1161
00:42:18,720 --> 00:42:21,160
challenge well I should be able to just

1162
00:42:21,160 --> 00:42:23,880
take the properties of my address here

1163
00:42:23,880 --> 00:42:25,960
I'll cut those out I'll put them into

1164
00:42:25,960 --> 00:42:28,839
their own address type up here and then

1165
00:42:28,839 --> 00:42:31,319
instead of doing an inline object here I

1166
00:42:31,319 --> 00:42:34,079
can simply refer to the capital A

1167
00:42:34,079 --> 00:42:36,720
address type that we defined above and

1168
00:42:36,720 --> 00:42:38,240
after I've done that you can see there

1169
00:42:38,240 --> 00:42:40,720
are no more errors in the editor either

1170
00:42:40,720 --> 00:42:42,480
of the two ways that we just saw it is

1171
00:42:42,480 --> 00:42:44,680
completely fine if you think that you

1172
00:42:44,680 --> 00:42:46,920
are going to be using this address type

1173
00:42:46,920 --> 00:42:49,440
elsewhere in your code as a standalone

1174
00:42:49,440 --> 00:42:51,880
type then it makes sense to separate it

1175
00:42:51,880 --> 00:42:53,920
into its own address type like we just

1176
00:42:53,920 --> 00:42:56,319
did or if you already know that address

1177
00:42:56,319 --> 00:42:59,200
is only ever going to exist as an object

1178
00:42:59,200 --> 00:43:01,760
in the context of a person object then

1179
00:43:01,760 --> 00:43:03,640
you can just leave it nested inside of

1180
00:43:03,640 --> 00:43:05,319
the person object and that will work

1181
00:43:05,319 --> 00:43:07,280
just fine as well once you've had enough

1182
00:43:07,280 --> 00:43:08,839
time to play around with this and feel

1183
00:43:08,839 --> 00:43:10,280
pretty comfortable with it then you'll

1184
00:43:10,280 --> 00:43:12,160
be ready to move on to the next Grim

1185
00:43:12,160 --> 00:43:13,800
where we will talk about how we can make

1186
00:43:13,800 --> 00:43:15,599
some of these properties optional if we

1187
00:43:15,599 --> 00:43:17,760
need

1188
00:43:19,480 --> 00:43:21,880
to something that might put your mind at

1189
00:43:21,880 --> 00:43:24,040
ease regarding typescript rigidity is

1190
00:43:24,040 --> 00:43:25,559
knowing that when you're creating object

1191
00:43:25,559 --> 00:43:27,480
types like we see here with person you

1192
00:43:27,480 --> 00:43:29,280
can Define some of these properties to

1193
00:43:29,280 --> 00:43:32,079
be optional now this comes with a caveat

1194
00:43:32,079 --> 00:43:33,480
when you're making decisions about

1195
00:43:33,480 --> 00:43:35,280
whether something should be optional

1196
00:43:35,280 --> 00:43:37,119
typescript comes with a number of ways

1197
00:43:37,119 --> 00:43:39,400
that you can relax that rigid nature but

1198
00:43:39,400 --> 00:43:41,599
you should learn to force yourself to

1199
00:43:41,599 --> 00:43:43,760
really ask the question do I really need

1200
00:43:43,760 --> 00:43:45,640
this to be flexible we're going to see

1201
00:43:45,640 --> 00:43:47,079
multiple different ways in which

1202
00:43:47,079 --> 00:43:49,240
typescript offers that flexibility

1203
00:43:49,240 --> 00:43:50,319
however they always come with the

1204
00:43:50,319 --> 00:43:52,839
trade-off of reduced type safety let's

1205
00:43:52,839 --> 00:43:54,520
get the syntax out of the way for doing

1206
00:43:54,520 --> 00:43:56,400
this because it's really simple for

1207
00:43:56,400 --> 00:43:58,920
example if don't necessarily want every

1208
00:43:58,920 --> 00:44:01,040
person to have an address you can see

1209
00:44:01,040 --> 00:44:02,520
removing address gives me some

1210
00:44:02,520 --> 00:44:04,640
typescript warnings when I'm defining my

1211
00:44:04,640 --> 00:44:06,760
type I can simply put a question mark

1212
00:44:06,760 --> 00:44:08,559
after the property name that's going to

1213
00:44:08,559 --> 00:44:10,480
be optional you can see as soon as I

1214
00:44:10,480 --> 00:44:12,240
typed that question mark the warning

1215
00:44:12,240 --> 00:44:14,359
under person one went away and that's

1216
00:44:14,359 --> 00:44:16,599
because now the address property is

1217
00:44:16,599 --> 00:44:18,640
optional this has offered me a bit of

1218
00:44:18,640 --> 00:44:20,839
flexibility however as I mentioned it

1219
00:44:20,839 --> 00:44:22,960
does reduce my type safety we'll be

1220
00:44:22,960 --> 00:44:25,160
talking more about adding type safety to

1221
00:44:25,160 --> 00:44:27,480
functions soon but let's say I have a

1222
00:44:27,480 --> 00:44:30,240
function that's called display info and

1223
00:44:30,240 --> 00:44:32,400
this function is going to take a person

1224
00:44:32,400 --> 00:44:34,800
as a parameter and in it it's going to

1225
00:44:34,800 --> 00:44:36,920
console log and let me use a template

1226
00:44:36,920 --> 00:44:39,839
string here we'll say person. name lives

1227
00:44:39,839 --> 00:44:43,359
at and then we'll stick in person.

1228
00:44:43,359 --> 00:44:46,880
address. Street okay so now later in my

1229
00:44:46,880 --> 00:44:49,599
code or maybe in another module I import

1230
00:44:49,599 --> 00:44:51,839
display info and I'm going to call

1231
00:44:51,839 --> 00:44:54,200
display info and pass person one to it

1232
00:44:54,200 --> 00:44:56,000
well this is a bit on the nose I'm sure

1233
00:44:56,000 --> 00:44:57,480
that you can see what this this problem

1234
00:44:57,480 --> 00:45:00,200
is going to be let's hit save check our

1235
00:45:00,200 --> 00:45:02,800
console and sure enough cannot read

1236
00:45:02,800 --> 00:45:04,720
properties of undefined that dreaded

1237
00:45:04,720 --> 00:45:06,440
error that we see notice that it says

1238
00:45:06,440 --> 00:45:08,280
it's a type error this is an error that

1239
00:45:08,280 --> 00:45:10,240
was introduced well really for two

1240
00:45:10,240 --> 00:45:12,319
reasons one because we chose to make

1241
00:45:12,319 --> 00:45:14,520
this an optional property but in truth

1242
00:45:14,520 --> 00:45:16,520
maybe more importantly because we didn't

1243
00:45:16,520 --> 00:45:18,520
add any type safety to our function I

1244
00:45:18,520 --> 00:45:20,319
can technically get rid of this error by

1245
00:45:20,319 --> 00:45:22,160
using optional chaining right here on

1246
00:45:22,160 --> 00:45:23,760
address one thing to note is that

1247
00:45:23,760 --> 00:45:25,520
currently scrimba doesn't understand

1248
00:45:25,520 --> 00:45:27,240
optional chaining but trust me this is

1249
00:45:27,240 --> 00:45:28,800
going to work just fine however this

1250
00:45:28,800 --> 00:45:31,000
solution isn't great because if I hit

1251
00:45:31,000 --> 00:45:33,760
save we see that we get Joe lives at

1252
00:45:33,760 --> 00:45:36,200
undefined not a program crashing type

1253
00:45:36,200 --> 00:45:38,680
error but still not a great experience

1254
00:45:38,680 --> 00:45:40,079
now don't let me get in your head too

1255
00:45:40,079 --> 00:45:41,880
much adding an optional property is a

1256
00:45:41,880 --> 00:45:43,839
completely legitimate and fairly common

1257
00:45:43,839 --> 00:45:45,599
thing to do in typescript I'm just

1258
00:45:45,599 --> 00:45:47,280
making sure I do my due diligence and

1259
00:45:47,280 --> 00:45:49,040
letting you know that every time you add

1260
00:45:49,040 --> 00:45:51,000
one of these sort of flexibility

1261
00:45:51,000 --> 00:45:52,960
enhancing features of typescript you are

1262
00:45:52,960 --> 00:45:54,680
going to reduce your type safety by a

1263
00:45:54,680 --> 00:45:57,480
little bit okay let's move on and apply

1264
00:45:57,480 --> 00:45:59,000
what we've learned to our pizza

1265
00:45:59,000 --> 00:46:01,520
restaurant

1266
00:46:03,480 --> 00:46:05,760
app okay let's Jump Right In with the

1267
00:46:05,760 --> 00:46:07,760
challenge your task is to create a new

1268
00:46:07,760 --> 00:46:09,960
order type in that type it should have

1269
00:46:09,960 --> 00:46:12,760
an ID pizza and Status properties I

1270
00:46:12,760 --> 00:46:14,520
won't to explicitly give you what data

1271
00:46:14,520 --> 00:46:16,240
type those should be but just look

1272
00:46:16,240 --> 00:46:17,880
through the code if you need some hints

1273
00:46:17,880 --> 00:46:19,640
as to what it will be pause now and work

1274
00:46:19,640 --> 00:46:21,880
on the

1275
00:46:25,520 --> 00:46:28,240
challenge okay let's let's create a new

1276
00:46:28,240 --> 00:46:31,680
type called order and this will be an

1277
00:46:31,680 --> 00:46:34,119
object it's going to have an ID which is

1278
00:46:34,119 --> 00:46:36,160
going to be a number remember down here

1279
00:46:36,160 --> 00:46:37,880
we have our order numbers that we're

1280
00:46:37,880 --> 00:46:39,760
keeping track of and so that will be a

1281
00:46:39,760 --> 00:46:42,520
number the pizza property is going to be

1282
00:46:42,520 --> 00:46:44,880
a pizza type which makes sense because

1283
00:46:44,880 --> 00:46:47,160
it's a nested object inside there and

1284
00:46:47,160 --> 00:46:49,240
the status property for now is just

1285
00:46:49,240 --> 00:46:51,200
going to be a string we're going to talk

1286
00:46:51,200 --> 00:46:52,880
about this a little bit later let's

1287
00:46:52,880 --> 00:46:54,960
clean up the challenge text and

1288
00:46:54,960 --> 00:46:56,040
hopefully that was pretty

1289
00:46:56,040 --> 00:46:57,720
straightforward now this wasn't

1290
00:46:57,720 --> 00:46:59,400
explicitly part of the challenge there's

1291
00:46:59,400 --> 00:47:01,040
a chance that you came to the order

1292
00:47:01,040 --> 00:47:03,280
queue and decided to try and make this

1293
00:47:03,280 --> 00:47:05,280
of type order and you'll notice that

1294
00:47:05,280 --> 00:47:06,920
that doesn't fix the warning that

1295
00:47:06,920 --> 00:47:08,440
typescript is giving us and that's

1296
00:47:08,440 --> 00:47:11,119
because the order Q is an array it's not

1297
00:47:11,119 --> 00:47:13,400
a single object so before we can fix

1298
00:47:13,400 --> 00:47:14,960
this we need to learn about typing

1299
00:47:14,960 --> 00:47:17,079
arrays it's fairly straightforward so

1300
00:47:17,079 --> 00:47:18,680
we'll do that in a quick scrim after

1301
00:47:18,680 --> 00:47:20,040
this and then we'll come back to our

1302
00:47:20,040 --> 00:47:23,599
pizza restaurant and fix these

1303
00:47:25,280 --> 00:47:27,480
issues we've learned about how to

1304
00:47:27,480 --> 00:47:29,480
manually type the Primitive types in

1305
00:47:29,480 --> 00:47:31,559
typescript for example if you have

1306
00:47:31,559 --> 00:47:35,240
something like let age equal 100 you can

1307
00:47:35,240 --> 00:47:37,400
manually tell typescript that age is

1308
00:47:37,400 --> 00:47:39,319
going to be a number like this and

1309
00:47:39,319 --> 00:47:41,319
there's a similar syntax when we are

1310
00:47:41,319 --> 00:47:44,800
typing arrays so if I have an array and

1311
00:47:44,800 --> 00:47:46,800
maybe we'll just call this ages so that

1312
00:47:46,800 --> 00:47:48,960
it makes a little more sense maybe 100

1313
00:47:48,960 --> 00:47:51,400
and 101 notice that typescript is

1314
00:47:51,400 --> 00:47:53,680
complaining about the type of Ages hover

1315
00:47:53,680 --> 00:47:55,440
your mouse over the variable ages here

1316
00:47:55,440 --> 00:47:56,839
and you'll see that it says the type

1317
00:47:56,839 --> 00:47:59,079
type number square brackets is not

1318
00:47:59,079 --> 00:48:01,359
assignable to type number well it kind

1319
00:48:01,359 --> 00:48:03,400
of gives away the Syntax for typing

1320
00:48:03,400 --> 00:48:05,960
arrays all we have to do is simply put a

1321
00:48:05,960 --> 00:48:08,400
set of square brackets as if this were

1322
00:48:08,400 --> 00:48:10,760
the array syntax with an empty array

1323
00:48:10,760 --> 00:48:12,559
right after the type and this is how we

1324
00:48:12,559 --> 00:48:15,160
teach typescript that ages should always

1325
00:48:15,160 --> 00:48:17,839
be an array that consists only of number

1326
00:48:17,839 --> 00:48:21,240
elements if we were to try and put

1327
00:48:21,240 --> 00:48:23,000
another thing in here maybe the string

1328
00:48:23,000 --> 00:48:25,319
one then we get an error again it tells

1329
00:48:25,319 --> 00:48:27,319
us that there's a problem with this last

1330
00:48:27,319 --> 00:48:29,160
element because it is not a number

1331
00:48:29,160 --> 00:48:30,960
inside of this array the same will

1332
00:48:30,960 --> 00:48:33,720
happen if I try to push something to the

1333
00:48:33,720 --> 00:48:35,599
array that isn't of the correct data

1334
00:48:35,599 --> 00:48:38,119
type like ages. push true red squiggly

1335
00:48:38,119 --> 00:48:39,880
shows up here under true and it says

1336
00:48:39,880 --> 00:48:41,280
that it's not assignable to the

1337
00:48:41,280 --> 00:48:43,200
parameter of type number this should all

1338
00:48:43,200 --> 00:48:44,760
be pretty straightforward for you at

1339
00:48:44,760 --> 00:48:46,240
this point I think it's important to

1340
00:48:46,240 --> 00:48:47,680
note that in the same way that

1341
00:48:47,680 --> 00:48:50,240
typescript is able to infer a regular

1342
00:48:50,240 --> 00:48:53,119
number typescript is also able to infer

1343
00:48:53,119 --> 00:48:55,920
the data type of an array of numbers so

1344
00:48:55,920 --> 00:48:57,720
when it's an array with some simple

1345
00:48:57,720 --> 00:48:59,440
primitive data types in there we don't

1346
00:48:59,440 --> 00:49:02,160
have to manually put colon number square

1347
00:49:02,160 --> 00:49:04,040
brackets or string square brackets or

1348
00:49:04,040 --> 00:49:05,559
anything like that we can just let

1349
00:49:05,559 --> 00:49:07,559
typescript do its job and we're going to

1350
00:49:07,559 --> 00:49:09,760
get the same benefits in the end however

1351
00:49:09,760 --> 00:49:12,440
when we have a custom data type like a

1352
00:49:12,440 --> 00:49:14,480
person data type that we've seen before

1353
00:49:14,480 --> 00:49:16,000
let me fill this out again we have a

1354
00:49:16,000 --> 00:49:19,000
name String we'll say an age is a number

1355
00:49:19,000 --> 00:49:22,480
and is student is a Boolean when we want

1356
00:49:22,480 --> 00:49:24,359
to create an array of these people

1357
00:49:24,359 --> 00:49:26,359
objects well actually I think you'll be

1358
00:49:26,359 --> 00:49:27,760
able to figure this one out let's make

1359
00:49:27,760 --> 00:49:29,319
it a

1360
00:49:29,319 --> 00:49:31,440
challenge okay I took away some of the

1361
00:49:31,440 --> 00:49:33,319
busy work here for you by creating a

1362
00:49:33,319 --> 00:49:35,319
couple of person objects I've already

1363
00:49:35,319 --> 00:49:37,799
typed them as a type person and your

1364
00:49:37,799 --> 00:49:39,640
challenge simply enough is to create an

1365
00:49:39,640 --> 00:49:41,599
array with person one and person two in

1366
00:49:41,599 --> 00:49:43,960
it and then to manually type this array

1367
00:49:43,960 --> 00:49:46,240
as an array of person types pause now

1368
00:49:46,240 --> 00:49:48,760
and work on the

1369
00:49:52,640 --> 00:49:55,079
challenge okay let's go ahead and set

1370
00:49:55,079 --> 00:49:56,839
this equal to an array we will will

1371
00:49:56,839 --> 00:49:59,119
stick person one and person two in there

1372
00:49:59,119 --> 00:50:01,160
and before I manually type this as an

1373
00:50:01,160 --> 00:50:02,960
array of person types I'm going to hover

1374
00:50:02,960 --> 00:50:05,160
over this variable people and you should

1375
00:50:05,160 --> 00:50:06,839
do this as well and you'll notice the

1376
00:50:06,839 --> 00:50:09,280
popup does correctly type this as a

1377
00:50:09,280 --> 00:50:12,240
person array because every item in this

1378
00:50:12,240 --> 00:50:15,079
array conforms to the person type it

1379
00:50:15,079 --> 00:50:17,200
knows that this people array should

1380
00:50:17,200 --> 00:50:20,160
continue to be an array of person type

1381
00:50:20,160 --> 00:50:21,760
but that's not what the challenge says

1382
00:50:21,760 --> 00:50:23,720
the challenge says to manually do it so

1383
00:50:23,720 --> 00:50:26,000
we'll put colon person and then the

1384
00:50:26,000 --> 00:50:28,640
array bracket syntax now normally as

1385
00:50:28,640 --> 00:50:31,040
I've said it's good to let typescript do

1386
00:50:31,040 --> 00:50:33,119
as much inference as it can especially

1387
00:50:33,119 --> 00:50:35,079
when it comes to primitive types like

1388
00:50:35,079 --> 00:50:37,240
numbers and booleans however I'm a

1389
00:50:37,240 --> 00:50:39,440
little bit more torn here yes typescript

1390
00:50:39,440 --> 00:50:41,960
is able to infer that people is an array

1391
00:50:41,960 --> 00:50:44,319
of person types however adding it here

1392
00:50:44,319 --> 00:50:46,079
explicitly does make it a little bit

1393
00:50:46,079 --> 00:50:48,520
easier for myself or other developers to

1394
00:50:48,520 --> 00:50:50,880
read in the future so in this case I'm

1395
00:50:50,880 --> 00:50:52,680
just going to leave this here we also

1396
00:50:52,680 --> 00:50:54,720
can note that if I don't manually type

1397
00:50:54,720 --> 00:50:57,520
it and then I remove the person type

1398
00:50:57,520 --> 00:51:00,559
declarations here and hover over let

1399
00:51:00,559 --> 00:51:02,240
people we can see that now it has

1400
00:51:02,240 --> 00:51:04,720
inferred the type to be an object

1401
00:51:04,720 --> 00:51:06,520
literal with all of the properties

1402
00:51:06,520 --> 00:51:08,720
instead of having the person type as an

1403
00:51:08,720 --> 00:51:11,079
array here but we're using typescript I

1404
00:51:11,079 --> 00:51:13,040
can't think of a good reason to not type

1405
00:51:13,040 --> 00:51:15,079
these as person objects so we'll just

1406
00:51:15,079 --> 00:51:16,640
leave it like that and maybe I'll go

1407
00:51:16,640 --> 00:51:18,559
ahead and put back my colon person array

1408
00:51:18,559 --> 00:51:20,720
as well really quickly there is another

1409
00:51:20,720 --> 00:51:23,079
syntax which you may see floating around

1410
00:51:23,079 --> 00:51:24,920
and we will talk a little bit more about

1411
00:51:24,920 --> 00:51:26,400
it later in this course when we talk

1412
00:51:26,400 --> 00:51:28,599
about about the concept of generics but

1413
00:51:28,599 --> 00:51:30,280
for now it's enough to know that there

1414
00:51:30,280 --> 00:51:32,559
is a syntax where you can use capital A

1415
00:51:32,559 --> 00:51:36,200
array a set of angle brackets and then

1416
00:51:36,200 --> 00:51:38,200
put your type inside of the angle

1417
00:51:38,200 --> 00:51:40,680
brackets and I could use this in place

1418
00:51:40,680 --> 00:51:42,920
of my person with square brackets just

1419
00:51:42,920 --> 00:51:44,960
like this this is going to do the exact

1420
00:51:44,960 --> 00:51:46,920
same thing you can hover over people and

1421
00:51:46,920 --> 00:51:48,680
see that it is correctly knowing that

1422
00:51:48,680 --> 00:51:50,880
it's an array of person types so I'm

1423
00:51:50,880 --> 00:51:52,760
just covering my bases here don't worry

1424
00:51:52,760 --> 00:51:54,119
too much about that we're going to stick

1425
00:51:54,119 --> 00:51:56,119
with this syntax for now and talk more

1426
00:51:56,119 --> 00:51:57,640
about that other syntax when we talk

1427
00:51:57,640 --> 00:51:59,720
about generics okay let's get back to

1428
00:51:59,720 --> 00:52:01,280
our pizza restaurant and apply what

1429
00:52:01,280 --> 00:52:04,720
we've learned to our code over

1430
00:52:05,559 --> 00:52:07,920
there here we are back in our pizza

1431
00:52:07,920 --> 00:52:09,680
restaurant and your challenge is to fix

1432
00:52:09,680 --> 00:52:11,119
the typescript warnings that we have

1433
00:52:11,119 --> 00:52:13,559
throughout our code about order Q pause

1434
00:52:13,559 --> 00:52:16,359
now and work on this

1435
00:52:19,960 --> 00:52:22,319
challenge okay well we already have our

1436
00:52:22,319 --> 00:52:24,839
order type that we wrote previously and

1437
00:52:24,839 --> 00:52:26,720
we know that the order CU should should

1438
00:52:26,720 --> 00:52:30,240
always be an array of order objects so

1439
00:52:30,240 --> 00:52:32,079
by doing that typescript is no longer

1440
00:52:32,079 --> 00:52:34,720
complaining about order q and if we come

1441
00:52:34,720 --> 00:52:36,680
down we only have one more typescript

1442
00:52:36,680 --> 00:52:38,680
warning here and this is awesome this is

1443
00:52:38,680 --> 00:52:40,680
actually a really helpful warning but

1444
00:52:40,680 --> 00:52:43,400
everything else has resolved itself now

1445
00:52:43,400 --> 00:52:45,319
that typescript knows that order Q

1446
00:52:45,319 --> 00:52:47,480
should be an array of orders it's able

1447
00:52:47,480 --> 00:52:49,440
to ensure that we won't have any type

1448
00:52:49,440 --> 00:52:51,359
errors in our program because we've

1449
00:52:51,359 --> 00:52:53,160
generally written everything okay now

1450
00:52:53,160 --> 00:52:55,520
there is this one new warning here under

1451
00:52:55,520 --> 00:52:58,559
order. status order says that it's an

1452
00:52:58,559 --> 00:53:01,160
object that is possibly undefined and

1453
00:53:01,160 --> 00:53:02,599
this should look familiar this is

1454
00:53:02,599 --> 00:53:04,200
exactly the warning we were getting

1455
00:53:04,200 --> 00:53:06,319
above when we were writing selected

1456
00:53:06,319 --> 00:53:08,599
pizza. price it was telling us that

1457
00:53:08,599 --> 00:53:11,480
selected Pizza is possibly undefined so

1458
00:53:11,480 --> 00:53:14,160
that brings us to the next challenge

1459
00:53:14,160 --> 00:53:15,920
okay now your challenge is to fix this

1460
00:53:15,920 --> 00:53:18,079
warning below by handling the sad path

1461
00:53:18,079 --> 00:53:19,960
scenario notice I'm being a little bit

1462
00:53:19,960 --> 00:53:21,960
vague here I do want this to be a chance

1463
00:53:21,960 --> 00:53:23,720
for you to engage your brain try to

1464
00:53:23,720 --> 00:53:25,799
remember what we've learned before look

1465
00:53:25,799 --> 00:53:27,240
through the rest of the code that should

1466
00:53:27,240 --> 00:53:29,079
help you out quite a bit pause now and

1467
00:53:29,079 --> 00:53:31,559
work on this

1468
00:53:35,359 --> 00:53:38,000
challenge when we're running order q.

1469
00:53:38,000 --> 00:53:40,640
find if we provide an order ID that does

1470
00:53:40,640 --> 00:53:43,799
not exist in the order Q then this order

1471
00:53:43,799 --> 00:53:46,160
is going to be an undefined value in

1472
00:53:46,160 --> 00:53:48,599
fact if you hover over order here you'll

1473
00:53:48,599 --> 00:53:51,000
see the intellisense popup it says const

1474
00:53:51,000 --> 00:53:54,520
order Colon capital O order and then a

1475
00:53:54,520 --> 00:53:56,760
pipe character or a line and and then

1476
00:53:56,760 --> 00:53:59,200
undefined similar to JavaScript with the

1477
00:53:59,200 --> 00:54:01,799
double pipe operator indicating an or

1478
00:54:01,799 --> 00:54:04,000
logical operator I like to read this

1479
00:54:04,000 --> 00:54:06,280
single pipe in typescript like the word

1480
00:54:06,280 --> 00:54:09,240
or as well in other words const order is

1481
00:54:09,240 --> 00:54:11,760
either going to be a capital O order

1482
00:54:11,760 --> 00:54:14,480
object or it will be undefined and

1483
00:54:14,480 --> 00:54:16,319
that's because typescript knows if it's

1484
00:54:16,319 --> 00:54:18,119
not able to find something with the

1485
00:54:18,119 --> 00:54:20,559
finded method it will return undefined

1486
00:54:20,559 --> 00:54:22,359
and in this case we're not handling that

1487
00:54:22,359 --> 00:54:25,400
in our code typescript saves us again so

1488
00:54:25,400 --> 00:54:28,280
if there is no order then maybe we'll

1489
00:54:28,280 --> 00:54:30,160
just do what we did above where we

1490
00:54:30,160 --> 00:54:34,480
console error let's say order

1491
00:54:34,480 --> 00:54:39,160
ID was not found in the order que and

1492
00:54:39,160 --> 00:54:41,160
then we'll go ahead and return although

1493
00:54:41,160 --> 00:54:42,880
as I mentioned before this could be an

1494
00:54:42,880 --> 00:54:45,520
opportunity for us to throw an error if

1495
00:54:45,520 --> 00:54:48,200
we were to throw a new error and then

1496
00:54:48,200 --> 00:54:50,040
maybe put this message in there that

1497
00:54:50,040 --> 00:54:52,119
would work just as well because it halts

1498
00:54:52,119 --> 00:54:54,000
the execution of this function and

1499
00:54:54,000 --> 00:54:56,160
therefore typescript is now satisfied

1500
00:54:56,160 --> 00:54:58,559
that order. status is never going to get

1501
00:54:58,559 --> 00:55:01,520
reached if order is non-existent but

1502
00:55:01,520 --> 00:55:03,079
just to stay consistent I'll go ahead

1503
00:55:03,079 --> 00:55:05,040
and keep my return here clean up the

1504
00:55:05,040 --> 00:55:07,359
challenge text and look at that all the

1505
00:55:07,359 --> 00:55:09,680
typescript warnings in our app are gone

1506
00:55:09,680 --> 00:55:11,480
now I do think it's important to note

1507
00:55:11,480 --> 00:55:13,559
that the lack of typescript warnings

1508
00:55:13,559 --> 00:55:15,319
doesn't automatically mean that our

1509
00:55:15,319 --> 00:55:17,079
program will function exactly as we

1510
00:55:17,079 --> 00:55:18,440
expect it doesn't mean that we've

1511
00:55:18,440 --> 00:55:20,640
handled every Edge case but it does mean

1512
00:55:20,640 --> 00:55:22,839
with relatively little amount of effort

1513
00:55:22,839 --> 00:55:24,359
we have a much greater degree of

1514
00:55:24,359 --> 00:55:26,119
confidence that our app is going to work

1515
00:55:26,119 --> 00:55:28,280
as as we would expect speaking of which

1516
00:55:28,280 --> 00:55:30,039
we haven't run this code in a while

1517
00:55:30,039 --> 00:55:32,200
let's run it and open our console and

1518
00:55:32,200 --> 00:55:34,079
Awesome everything looks the way that we

1519
00:55:34,079 --> 00:55:36,520
would expect in order for us to touch on

1520
00:55:36,520 --> 00:55:38,359
a few more topics in typescript we are

1521
00:55:38,359 --> 00:55:40,119
going to start building out new features

1522
00:55:40,119 --> 00:55:42,000
in our pizza restaurant app but before

1523
00:55:42,000 --> 00:55:43,720
we do that I do want to encourage you to

1524
00:55:43,720 --> 00:55:45,839
get your hands on this code play around

1525
00:55:45,839 --> 00:55:48,400
with this try adding some new functions

1526
00:55:48,400 --> 00:55:50,799
or making some kind of change it doesn't

1527
00:55:50,799 --> 00:55:52,880
even have to be significant for example

1528
00:55:52,880 --> 00:55:54,920
when I was first writing this I decided

1529
00:55:54,920 --> 00:55:57,000
I actually wanted to rename the to order

1530
00:55:57,000 --> 00:55:59,400
history and if I do that suddenly we get

1531
00:55:59,400 --> 00:56:01,520
some errors immediately showing up in

1532
00:56:01,520 --> 00:56:03,480
our typescript that are super helpful

1533
00:56:03,480 --> 00:56:05,119
they help us know exactly what needs to

1534
00:56:05,119 --> 00:56:07,119
change in fact I'm going to leave this

1535
00:56:07,119 --> 00:56:09,000
as order history so that I can bug some

1536
00:56:09,000 --> 00:56:10,760
of you into fixing this error and

1537
00:56:10,760 --> 00:56:12,440
getting your hands on the code once you

1538
00:56:12,440 --> 00:56:13,920
feel pretty comfortable with everything

1539
00:56:13,920 --> 00:56:15,520
that we've written so far let's keep

1540
00:56:15,520 --> 00:56:17,799
moving

1541
00:56:19,280 --> 00:56:21,599
forward hopefully you've had a chance to

1542
00:56:21,599 --> 00:56:23,720
play around with the intellisense popups

1543
00:56:23,720 --> 00:56:25,079
that happen when you hover over

1544
00:56:25,079 --> 00:56:26,680
different variables that you deare with

1545
00:56:26,680 --> 00:56:28,160
typescript and something you might have

1546
00:56:28,160 --> 00:56:30,079
noticed is the difference between how

1547
00:56:30,079 --> 00:56:32,480
typescript infers different types for

1548
00:56:32,480 --> 00:56:36,520
example if I were to say let my name

1549
00:56:36,520 --> 00:56:38,760
equal the string Bob go ahead and hover

1550
00:56:38,760 --> 00:56:41,319
your mouse over my name okay you'll see

1551
00:56:41,319 --> 00:56:44,440
that it says Let My Name colon string so

1552
00:56:44,440 --> 00:56:46,400
typescript has correctly inferred that

1553
00:56:46,400 --> 00:56:48,559
my name is of type string and it will

1554
00:56:48,559 --> 00:56:50,839
warn me if I were to ever try and change

1555
00:56:50,839 --> 00:56:52,799
it to a different data type you can see

1556
00:56:52,799 --> 00:56:54,839
here typescript is saying that you can't

1557
00:56:54,839 --> 00:56:57,079
assign the value true to a string type

1558
00:56:57,079 --> 00:56:59,640
variable okay let's see how that differs

1559
00:56:59,640 --> 00:57:02,240
however when we use const to declare our

1560
00:57:02,240 --> 00:57:04,559
variables so if I say const my name

1561
00:57:04,559 --> 00:57:06,760
equals Bob and I need a different

1562
00:57:06,760 --> 00:57:08,680
variable name let's say my name 2 cuz

1563
00:57:08,680 --> 00:57:10,599
I'm really original right now C your

1564
00:57:10,599 --> 00:57:13,240
mouse over my name 2 this time the popup

1565
00:57:13,240 --> 00:57:15,280
doesn't show the type as a string but

1566
00:57:15,280 --> 00:57:18,079
instead it shows the type as the string

1567
00:57:18,079 --> 00:57:20,480
Bob this is called a literal type and

1568
00:57:20,480 --> 00:57:22,240
it's when you tell typescript that the

1569
00:57:22,240 --> 00:57:25,000
type isn't a generic string which would

1570
00:57:25,000 --> 00:57:26,839
allow that variable to be become any

1571
00:57:26,839 --> 00:57:29,200
string but instead it's a literal type

1572
00:57:29,200 --> 00:57:32,280
an actual value type of the string Bob

1573
00:57:32,280 --> 00:57:34,480
with a capital B at the beginning if you

1574
00:57:34,480 --> 00:57:36,280
put a little bit of thought into it then

1575
00:57:36,280 --> 00:57:38,839
this will make sense because with let I

1576
00:57:38,839 --> 00:57:41,599
am allowed to change the value of this

1577
00:57:41,599 --> 00:57:43,599
variable and typescript logically

1578
00:57:43,599 --> 00:57:45,799
restricts the data type of the value I'm

1579
00:57:45,799 --> 00:57:47,839
allowed to change it to to a string and

1580
00:57:47,839 --> 00:57:50,520
with const I'm not allowed to reassign

1581
00:57:50,520 --> 00:57:52,680
this value and so it makes sense for

1582
00:57:52,680 --> 00:57:54,880
typescript to say this value has to be

1583
00:57:54,880 --> 00:57:57,559
the string Bob from here on out I can't

1584
00:57:57,559 --> 00:58:02,000
say my name to equals bill this not only

1585
00:58:02,000 --> 00:58:03,720
makes sense in typescript but also

1586
00:58:03,720 --> 00:58:05,359
JavaScript we would get warned in

1587
00:58:05,359 --> 00:58:06,960
regular JavaScript saying we can't

1588
00:58:06,960 --> 00:58:09,640
reassign a const and if you hover over

1589
00:58:09,640 --> 00:58:11,799
my name 2 here it says cannot assign my

1590
00:58:11,799 --> 00:58:13,880
name 2 because it is a constant or a

1591
00:58:13,880 --> 00:58:16,079
readon property just for the sake of

1592
00:58:16,079 --> 00:58:17,920
completeness I can manually type

1593
00:58:17,920 --> 00:58:20,160
something to be a literal type so I

1594
00:58:20,160 --> 00:58:23,039
could say const my name to colon the

1595
00:58:23,039 --> 00:58:25,880
string Bob equals the string Bob of

1596
00:58:25,880 --> 00:58:27,920
course typescript already inferred this

1597
00:58:27,920 --> 00:58:29,520
but this is what that syntax would look

1598
00:58:29,520 --> 00:58:31,359
like I could do the same thing with my

1599
00:58:31,359 --> 00:58:34,440
let I could say Let My Name colon the

1600
00:58:34,440 --> 00:58:37,359
string Bob equals Bob and if I were to

1601
00:58:37,359 --> 00:58:39,720
try and change this to anything else

1602
00:58:39,720 --> 00:58:41,839
like Bobby then I get a typescript

1603
00:58:41,839 --> 00:58:43,640
warning the same thing would happen down

1604
00:58:43,640 --> 00:58:45,520
here now there are times where you may

1605
00:58:45,520 --> 00:58:47,760
see this being useful in typescript but

1606
00:58:47,760 --> 00:58:49,760
more often than not the concept of using

1607
00:58:49,760 --> 00:58:51,920
literal types is much more commonly

1608
00:58:51,920 --> 00:58:53,839
found when you pair it with a concept

1609
00:58:53,839 --> 00:58:56,440
called unions so feel free to around

1610
00:58:56,440 --> 00:58:58,000
with this code and in the next Grim

1611
00:58:58,000 --> 00:59:01,680
we'll learn about what unions

1612
00:59:03,000 --> 00:59:05,400
are as I mentioned there certainly are

1613
00:59:05,400 --> 00:59:07,680
going to be times when a literal type by

1614
00:59:07,680 --> 00:59:10,200
itself can be useful however you will

1615
00:59:10,200 --> 00:59:12,319
often times see them being used combined

1616
00:59:12,319 --> 00:59:14,960
with a concept called unions let's start

1617
00:59:14,960 --> 00:59:17,079
with an example let's say we are working

1618
00:59:17,079 --> 00:59:19,359
on an application and we want to

1619
00:59:19,359 --> 00:59:22,280
maintain a different kind of user role

1620
00:59:22,280 --> 00:59:24,119
for the sake of our database and our

1621
00:59:24,119 --> 00:59:25,760
application we're going to be saving

1622
00:59:25,760 --> 00:59:29,720
that user role either as guest or member

1623
00:59:29,720 --> 00:59:32,480
or admin and in our app we don't want

1624
00:59:32,480 --> 00:59:35,119
someone to be some kind of user R like a

1625
00:59:35,119 --> 00:59:37,920
hacker or something completely gibberish

1626
00:59:37,920 --> 00:59:39,160
that doesn't make sense to our

1627
00:59:39,160 --> 00:59:41,240
application in this kind of scenario we

1628
00:59:41,240 --> 00:59:43,520
can use a combination of literal types

1629
00:59:43,520 --> 00:59:45,839
and this concept called unions to teach

1630
00:59:45,839 --> 00:59:48,480
typescript that this variable user role

1631
00:59:48,480 --> 00:59:50,760
should only be allowed to be one of a

1632
00:59:50,760 --> 00:59:52,480
certain number of strings if you're

1633
00:59:52,480 --> 00:59:54,720
familiar with the concept of enums in

1634
00:59:54,720 --> 00:59:57,000
other languages this is essentially the

1635
00:59:57,000 --> 00:59:59,039
same idea as an enum there's a little

1636
00:59:59,039 --> 01:00:00,599
bit more to be said about that because

1637
01:00:00,599 --> 01:00:02,319
typescript does have something called

1638
01:00:02,319 --> 01:00:04,359
enums but let's not get bogged down by

1639
01:00:04,359 --> 01:00:06,000
that topic for now if you're not

1640
01:00:06,000 --> 01:00:08,119
familiar with the concept of enums well

1641
01:00:08,119 --> 01:00:09,720
you already are familiar with the

1642
01:00:09,720 --> 01:00:11,559
concept of an enum because you know what

1643
01:00:11,559 --> 01:00:14,119
a Boolean is a Boolean can only either

1644
01:00:14,119 --> 01:00:17,119
be true or false it has to be one of

1645
01:00:17,119 --> 01:00:18,839
those two values and it can't be

1646
01:00:18,839 --> 01:00:21,880
something like yes or no at least not in

1647
01:00:21,880 --> 01:00:25,079
JavaScript so if we have our user role

1648
01:00:25,079 --> 01:00:27,839
and we want this to only ever be guest

1649
01:00:27,839 --> 01:00:30,760
member or admin we can use Union types

1650
01:00:30,760 --> 01:00:33,119
in order to accomplish this I'm going to

1651
01:00:33,119 --> 01:00:36,440
create a new type called user Ro and I'm

1652
01:00:36,440 --> 01:00:38,480
going to set it equal to the literal

1653
01:00:38,480 --> 01:00:41,400
value of guest and then I can make a

1654
01:00:41,400 --> 01:00:44,440
union by using the single pipe character

1655
01:00:44,440 --> 01:00:46,319
you can essentially read this just like

1656
01:00:46,319 --> 01:00:48,160
you would the double pipe character in

1657
01:00:48,160 --> 01:00:50,880
JavaScript as the English word or so I

1658
01:00:50,880 --> 01:00:53,319
can say that type user Ro is either

1659
01:00:53,319 --> 01:00:56,359
going to be the string literal guest or

1660
01:00:56,359 --> 01:00:59,760
the string literal member or the string

1661
01:00:59,760 --> 01:01:02,280
literal admin and now that I've defined

1662
01:01:02,280 --> 01:01:04,920
what a user roll type is allowed to be I

1663
01:01:04,920 --> 01:01:07,359
can tell my variable that it has to

1664
01:01:07,359 --> 01:01:09,680
conform to the user Ro type and from

1665
01:01:09,680 --> 01:01:11,680
then on if I were to ever change this to

1666
01:01:11,680 --> 01:01:13,440
some gibberish typescript would give me

1667
01:01:13,440 --> 01:01:15,920
a warning this literal Union type that

1668
01:01:15,920 --> 01:01:18,039
we have here doesn't just need to be its

1669
01:01:18,039 --> 01:01:20,480
own Standalone thing I might have it

1670
01:01:20,480 --> 01:01:22,680
nested inside of another type so I might

1671
01:01:22,680 --> 01:01:25,680
have a user type which has all of the

1672
01:01:25,680 --> 01:01:27,520
other properties that we might normally

1673
01:01:27,520 --> 01:01:29,720
see like a username of string blah blah

1674
01:01:29,720 --> 01:01:32,359
blah and then I might say user r or

1675
01:01:32,359 --> 01:01:34,520
let's just call it role and we can just

1676
01:01:34,520 --> 01:01:37,440
copy what we have here and say that the

1677
01:01:37,440 --> 01:01:40,160
user. roll property has to be one of

1678
01:01:40,160 --> 01:01:42,440
these three string literals I won't

1679
01:01:42,440 --> 01:01:44,359
necessarily go down and show an example

1680
01:01:44,359 --> 01:01:46,240
because I think you get the idea let's

1681
01:01:46,240 --> 01:01:48,119
go ahead and satisfy typescript by

1682
01:01:48,119 --> 01:01:50,680
making this one of the available options

1683
01:01:50,680 --> 01:01:52,839
inside of our user roll Union and

1684
01:01:52,839 --> 01:01:55,240
typescript is satisfied okay let's jump

1685
01:01:55,240 --> 01:01:57,000
back to our p a restaurant app there's a

1686
01:01:57,000 --> 01:01:58,440
really small update that we can make now

1687
01:01:58,440 --> 01:02:02,160
that we understand literal types and

1688
01:02:03,920 --> 01:02:06,680
unions we can add a little bit of extra

1689
01:02:06,680 --> 01:02:09,119
type safety to our orders by teaching

1690
01:02:09,119 --> 01:02:11,520
typescript that an order type is allowed

1691
01:02:11,520 --> 01:02:13,839
to not just be any string but it either

1692
01:02:13,839 --> 01:02:16,559
has to be the string ordered or the

1693
01:02:16,559 --> 01:02:18,920
string completed this should be pretty

1694
01:02:18,920 --> 01:02:20,799
straightforward will make this a quick

1695
01:02:20,799 --> 01:02:23,559
challenge go ahead and update our order

1696
01:02:23,559 --> 01:02:25,520
type so that the status property can

1697
01:02:25,520 --> 01:02:28,000
only ever be the string ordered or the

1698
01:02:28,000 --> 01:02:29,839
string completed then once you've done

1699
01:02:29,839 --> 01:02:31,960
that try to make a change in our code

1700
01:02:31,960 --> 01:02:34,160
maybe change this status to something

1701
01:02:34,160 --> 01:02:36,039
other than ordered or completed some

1702
01:02:36,039 --> 01:02:37,760
gibberish will do and make sure that

1703
01:02:37,760 --> 01:02:39,319
typescript is complaining about that

1704
01:02:39,319 --> 01:02:42,839
change pause now and work on this

1705
01:02:46,079 --> 01:02:48,599
challenge okay we'll just make this so

1706
01:02:48,599 --> 01:02:51,079
that it can't be any string but it only

1707
01:02:51,079 --> 01:02:55,160
can be the literal value ordered or the

1708
01:02:55,160 --> 01:02:57,559
literal value completed now that we've

1709
01:02:57,559 --> 01:02:59,319
made this change we can actually see

1710
01:02:59,319 --> 01:03:01,160
there's a new typescript warning and

1711
01:03:01,160 --> 01:03:03,359
that has to do with this line 35 where

1712
01:03:03,359 --> 01:03:05,480
we have new order this one can be a

1713
01:03:05,480 --> 01:03:07,440
little bit confusing to understand but

1714
01:03:07,440 --> 01:03:09,480
let's walk through it step by step here

1715
01:03:09,480 --> 01:03:11,720
we're creating a new order variable and

1716
01:03:11,720 --> 01:03:13,640
we're setting it equal to this object

1717
01:03:13,640 --> 01:03:16,279
literal when I hover over New Order we

1718
01:03:16,279 --> 01:03:18,640
can see from the intellisense popup that

1719
01:03:18,640 --> 01:03:20,880
it was able to infer essentially the

1720
01:03:20,880 --> 01:03:23,640
shape of the object as having an ID

1721
01:03:23,640 --> 01:03:25,960
that's a number a pizza which is a

1722
01:03:25,960 --> 01:03:27,960
object with a name that's a string and a

1723
01:03:27,960 --> 01:03:29,960
price that's a number and then a status

1724
01:03:29,960 --> 01:03:32,480
that's a string however now that we have

1725
01:03:32,480 --> 01:03:35,039
gotten more specific in what our order

1726
01:03:35,039 --> 01:03:37,039
should look like up here where it has to

1727
01:03:37,039 --> 01:03:39,279
be the string ordered or completed not

1728
01:03:39,279 --> 01:03:41,520
just any kind of string the object that

1729
01:03:41,520 --> 01:03:43,880
we're trying to push into our order

1730
01:03:43,880 --> 01:03:46,480
queue which if you remember we specified

1731
01:03:46,480 --> 01:03:49,319
needs to be an array of orders the data

1732
01:03:49,319 --> 01:03:51,359
type that typescript inferred for our

1733
01:03:51,359 --> 01:03:53,640
status right here is just a generic

1734
01:03:53,640 --> 01:03:55,799
string I know this can be a little bit

1735
01:03:55,799 --> 01:03:58,119
confusing don't fret too much if none of

1736
01:03:58,119 --> 01:04:00,000
that is making any sense but the way

1737
01:04:00,000 --> 01:04:02,200
that we can fix this error is by saying

1738
01:04:02,200 --> 01:04:04,680
when we are instantiating a new order we

1739
01:04:04,680 --> 01:04:06,920
can tell typescript specifically this is

1740
01:04:06,920 --> 01:04:09,599
going to be of an order type by manually

1741
01:04:09,599 --> 01:04:12,839
typing this as a type of order it now

1742
01:04:12,839 --> 01:04:15,480
knows that the status of ordered here is

1743
01:04:15,480 --> 01:04:18,240
not just any old string it is conforming

1744
01:04:18,240 --> 01:04:21,039
to the status literal Union type that we

1745
01:04:21,039 --> 01:04:22,880
defined up here and because of that

1746
01:04:22,880 --> 01:04:25,319
order Q which needs to be an array of

1747
01:04:25,319 --> 01:04:28,880
orders is okay with us pushing in a new

1748
01:04:28,880 --> 01:04:31,279
order and if I were to try and change

1749
01:04:31,279 --> 01:04:33,960
this to something like blah blah blah

1750
01:04:33,960 --> 01:04:35,720
now typescript is complaining again

1751
01:04:35,720 --> 01:04:37,880
because it knows that that's not okay it

1752
01:04:37,880 --> 01:04:39,680
can't just be any string it has to be

1753
01:04:39,680 --> 01:04:43,039
one of either ordered or completed so

1754
01:04:43,039 --> 01:04:45,799
let's go ahead and change this back the

1755
01:04:45,799 --> 01:04:47,480
same thing would happen if I come down

1756
01:04:47,480 --> 01:04:49,880
here and I change this to blah blah now

1757
01:04:49,880 --> 01:04:51,720
typescript is not going to be happy with

1758
01:04:51,720 --> 01:04:54,119
me updating order. status because it

1759
01:04:54,119 --> 01:04:56,200
knows that blah blah is not one of the

1760
01:04:56,200 --> 01:04:59,760
legitimate statuses for our order object

1761
01:04:59,760 --> 01:05:01,279
as always play around with this code and

1762
01:05:01,279 --> 01:05:04,359
once you're ready we'll keep moving

1763
01:05:05,880 --> 01:05:08,359
forward as we've talked about typescript

1764
01:05:08,359 --> 01:05:10,760
is great at inferring primitive types

1765
01:05:10,760 --> 01:05:12,920
and other more complex types that don't

1766
01:05:12,920 --> 01:05:15,119
necessarily hold a lot of weight in the

1767
01:05:15,119 --> 01:05:16,880
functionality of our app however there

1768
01:05:16,880 --> 01:05:18,520
are certain times when we would really

1769
01:05:18,520 --> 01:05:21,039
want to make sure we manually include

1770
01:05:21,039 --> 01:05:23,119
the type of something for example here

1771
01:05:23,119 --> 01:05:25,720
in our menu we're defining the menu as

1772
01:05:25,720 --> 01:05:28,319
an array of these objects and these

1773
01:05:28,319 --> 01:05:31,079
objects just so happen to conform to our

1774
01:05:31,079 --> 01:05:33,079
type of pizza but we haven't actually

1775
01:05:33,079 --> 01:05:35,480
told typescript that our menu should be

1776
01:05:35,480 --> 01:05:38,000
an array of pizza items this becomes a

1777
01:05:38,000 --> 01:05:39,880
lot more apparent when we try to make a

1778
01:05:39,880 --> 01:05:42,440
definition change to our type of pizza

1779
01:05:42,440 --> 01:05:44,520
Let's see we were tasked with creating a

1780
01:05:44,520 --> 01:05:46,599
new helper function called get pizza

1781
01:05:46,599 --> 01:05:49,039
detail which allows us to find one of

1782
01:05:49,039 --> 01:05:52,359
the pizzas in the menu either by its ID

1783
01:05:52,359 --> 01:05:55,000
or by its name well currently we don't

1784
01:05:55,000 --> 01:05:57,279
have IDs in our pizzas and so we might

1785
01:05:57,279 --> 01:05:59,440
think to come up to pizza and say this

1786
01:05:59,440 --> 01:06:01,720
should also have an ID that's a number

1787
01:06:01,720 --> 01:06:03,680
and doing this because it's typescript

1788
01:06:03,680 --> 01:06:05,599
really helps us out further down the

1789
01:06:05,599 --> 01:06:07,960
road when we find out some of our code

1790
01:06:07,960 --> 01:06:09,960
is not going to work the way we think

1791
01:06:09,960 --> 01:06:11,599
because they don't have IDs when we're

1792
01:06:11,599 --> 01:06:13,760
trying to add new pizza and so forth but

1793
01:06:13,760 --> 01:06:15,480
I'm not concerned about this quite yet

1794
01:06:15,480 --> 01:06:17,279
we'll get to that later but notice that

1795
01:06:17,279 --> 01:06:19,039
our menu does not have a problem with

1796
01:06:19,039 --> 01:06:20,960
the change that we made to our pizza

1797
01:06:20,960 --> 01:06:23,400
type definition because it doesn't know

1798
01:06:23,400 --> 01:06:26,000
that it's an array of pizzas so let's go

1799
01:06:26,000 --> 01:06:28,359
ahead and type it as an array of pizzas

1800
01:06:28,359 --> 01:06:30,319
okay now typescript is warning us hover

1801
01:06:30,319 --> 01:06:32,119
your mouse over menu and you'll see that

1802
01:06:32,119 --> 01:06:34,039
it's complaining about how there's an ID

1803
01:06:34,039 --> 01:06:36,160
property missing in these objects here

1804
01:06:36,160 --> 01:06:37,960
great that's a good warning that just

1805
01:06:37,960 --> 01:06:40,000
saved us some trouble so I'm going to go

1806
01:06:40,000 --> 01:06:44,000
ahead and add a manual ID property here

1807
01:06:44,000 --> 01:06:45,559
and we'll just kind of make them

1808
01:06:45,559 --> 01:06:47,400
increment

1809
01:06:47,400 --> 01:06:50,039
manually notice if we scroll down we

1810
01:06:50,039 --> 01:06:52,119
used to have an error I think it was

1811
01:06:52,119 --> 01:06:54,200
here on New Order because the pizza we

1812
01:06:54,200 --> 01:06:56,720
were adding did not have an ID and

1813
01:06:56,720 --> 01:06:59,720
pizzas now need IDs but we are correctly

1814
01:06:59,720 --> 01:07:01,799
getting errors down here with add new

1815
01:07:01,799 --> 01:07:03,839
pizza because these ones don't include

1816
01:07:03,839 --> 01:07:06,480
IDs for now I'm just going to manually

1817
01:07:06,480 --> 01:07:08,799
add IDs here as well this is just a

1818
01:07:08,799 --> 01:07:10,839
temporary fix until we figure something

1819
01:07:10,839 --> 01:07:13,839
else out what we just saw is a perfect

1820
01:07:13,839 --> 01:07:15,960
example of how typescript doesn't make

1821
01:07:15,960 --> 01:07:18,039
your job harder as a developer it

1822
01:07:18,039 --> 01:07:19,920
actually significantly improves your

1823
01:07:19,920 --> 01:07:22,440
ability to add new features and to debug

1824
01:07:22,440 --> 01:07:25,039
your code in the process all I had to do

1825
01:07:25,039 --> 01:07:26,960
was make an an update to my pizza type

1826
01:07:26,960 --> 01:07:28,599
and typescript immediately showed me

1827
01:07:28,599 --> 01:07:30,079
where all of the problems with that

1828
01:07:30,079 --> 01:07:32,559
change would happen and I was able to

1829
01:07:32,559 --> 01:07:34,000
pretty quickly go in and fix them

1830
01:07:34,000 --> 01:07:35,880
granted the fix will not always be quite

1831
01:07:35,880 --> 01:07:37,520
this easy but hopefully you're seeing

1832
01:07:37,520 --> 01:07:39,760
the benefits nonetheless next we'll move

1833
01:07:39,760 --> 01:07:41,920
on to a concept called type narrowing

1834
01:07:41,920 --> 01:07:45,599
and we'll do that through a series of

1835
01:07:47,119 --> 01:07:49,680
challenges to start us off on a lesson

1836
01:07:49,680 --> 01:07:51,440
about type narrowing I'm going to give

1837
01:07:51,440 --> 01:07:53,599
you a challenge I want you to create a

1838
01:07:53,599 --> 01:07:55,960
new utility function called get Pizza

1839
01:07:55,960 --> 01:07:58,119
detail it's going to take a single

1840
01:07:58,119 --> 01:08:00,319
parameter called identifier but there's

1841
01:08:00,319 --> 01:08:02,400
a little twist to this we want to allow

1842
01:08:02,400 --> 01:08:04,720
this identifier either to be the string

1843
01:08:04,720 --> 01:08:06,880
name of the pizza like the string

1844
01:08:06,880 --> 01:08:09,839
pepperoni or it could be the ID number

1845
01:08:09,839 --> 01:08:12,559
of the pizza for example the pizza with

1846
01:08:12,559 --> 01:08:14,520
the ID of the number two you don't have

1847
01:08:14,520 --> 01:08:16,600
to worry about the code inside of the

1848
01:08:16,600 --> 01:08:18,319
function just yet I just want you to

1849
01:08:18,319 --> 01:08:20,080
create the function signature and just

1850
01:08:20,080 --> 01:08:22,120
make sure that you type the identifier

1851
01:08:22,120 --> 01:08:24,319
parameter correctly so that typescript

1852
01:08:24,319 --> 01:08:26,439
is okay with it either being a string or

1853
01:08:26,439 --> 01:08:28,600
a number type I haven't taught how to

1854
01:08:28,600 --> 01:08:30,600
very specifically do this one thing but

1855
01:08:30,600 --> 01:08:32,399
assuming you've been following along and

1856
01:08:32,399 --> 01:08:33,960
doing the challenges I think you'll be

1857
01:08:33,960 --> 01:08:36,120
able to put this one together pause now

1858
01:08:36,120 --> 01:08:38,719
and work on this

1859
01:08:42,238 --> 01:08:44,960
challenge okay let's create a function

1860
01:08:44,960 --> 01:08:48,359
called get pizza detail it's going to

1861
01:08:48,359 --> 01:08:52,000
take identifier as a parameter and we're

1862
01:08:52,000 --> 01:08:54,679
going to type this identifier as either

1863
01:08:54,679 --> 01:08:56,040
a string

1864
01:08:56,040 --> 01:08:58,920
or a number and this is what I meant by

1865
01:08:58,920 --> 01:09:00,880
saying we haven't specifically taught

1866
01:09:00,880 --> 01:09:02,759
this thing we talked about doing it with

1867
01:09:02,759 --> 01:09:04,880
string literals if we wanted it to

1868
01:09:04,880 --> 01:09:07,439
literally be one value or another value

1869
01:09:07,439 --> 01:09:09,679
but we can also use unions with more

1870
01:09:09,679 --> 01:09:12,198
generic types like you see here okay

1871
01:09:12,198 --> 01:09:14,158
let's start working on the internals of

1872
01:09:14,158 --> 01:09:16,319
this function and really what I mean is

1873
01:09:16,319 --> 01:09:17,960
I want you to do this I'll make this

1874
01:09:17,960 --> 01:09:20,238
into a challenge I'm getting a little

1875
01:09:20,238 --> 01:09:22,120
bit more vague with the details of how

1876
01:09:22,120 --> 01:09:24,238
to accomplish this challenge but that's

1877
01:09:24,238 --> 01:09:26,319
okay cuz I know you're to the task I

1878
01:09:26,319 --> 01:09:28,600
want you to write the code for our get

1879
01:09:28,600 --> 01:09:30,839
pizza detail function so that it's able

1880
01:09:30,839 --> 01:09:33,040
to use the identifier whether it's a

1881
01:09:33,040 --> 01:09:35,799
string or a number and use the menu.

1882
01:09:35,799 --> 01:09:38,080
find method accordingly once one of the

1883
01:09:38,080 --> 01:09:40,000
pizzas from the menu has been found it

1884
01:09:40,000 --> 01:09:42,158
should return that pizza for now you can

1885
01:09:42,158 --> 01:09:44,279
just assume that it will find something

1886
01:09:44,279 --> 01:09:46,158
in menu. find you don't have to handle

1887
01:09:46,158 --> 01:09:47,799
the instance where it might not find

1888
01:09:47,799 --> 01:09:49,520
something pause now and work on this

1889
01:09:49,520 --> 01:09:52,520
challenge

1890
01:09:56,120 --> 01:09:58,520
okay let's get started on this in

1891
01:09:58,520 --> 01:10:01,239
JavaScript we can determine what kind of

1892
01:10:01,239 --> 01:10:03,960
data type identifier has by using the

1893
01:10:03,960 --> 01:10:06,560
type of keyword and so I'll use an if

1894
01:10:06,560 --> 01:10:08,719
statement that says if the type of

1895
01:10:08,719 --> 01:10:12,400
identifier is a string then I can assume

1896
01:10:12,400 --> 01:10:13,920
that it's going to be the name of the

1897
01:10:13,920 --> 01:10:16,679
pizza and so I will return whatever

1898
01:10:16,679 --> 01:10:20,520
comes back from menu. find and we'll say

1899
01:10:20,520 --> 01:10:22,280
for every Pizza that we're looking

1900
01:10:22,280 --> 01:10:26,040
through if pizza. name is equal to to

1901
01:10:26,040 --> 01:10:28,480
the identifier then it will find the

1902
01:10:28,480 --> 01:10:30,760
correct pizza and return it one little

1903
01:10:30,760 --> 01:10:32,440
feature I think I'm going to add is I'm

1904
01:10:32,440 --> 01:10:35,159
going to lower case both of these just

1905
01:10:35,159 --> 01:10:38,400
so that if they put in the wrong

1906
01:10:38,400 --> 01:10:40,440
capitalization for the pizza name or

1907
01:10:40,440 --> 01:10:42,000
something like that then it will still

1908
01:10:42,000 --> 01:10:43,760
be able to find the correct pizza now

1909
01:10:43,760 --> 01:10:45,719
for the next part I'm going to just use

1910
01:10:45,719 --> 01:10:48,360
an else instead of an else if checking

1911
01:10:48,360 --> 01:10:50,320
the type of the identifier to be a

1912
01:10:50,320 --> 01:10:52,159
number but I'm doing this specifically

1913
01:10:52,159 --> 01:10:54,480
so that I can show a limitation of being

1914
01:10:54,480 --> 01:10:56,920
less specific for now we'll essentially

1915
01:10:56,920 --> 01:10:59,679
return this exact same line except

1916
01:10:59,679 --> 01:11:02,560
instead of name we're going to check the

1917
01:11:02,560 --> 01:11:05,360
ID and uh we don't need a to lowercase

1918
01:11:05,360 --> 01:11:07,280
because that's going to be a number and

1919
01:11:07,280 --> 01:11:09,520
actually check this out if we hover over

1920
01:11:09,520 --> 01:11:11,800
to lowercase typescript is able to tell

1921
01:11:11,800 --> 01:11:14,280
us that do to lowercase does not exist

1922
01:11:14,280 --> 01:11:16,760
on type number this is super interesting

1923
01:11:16,760 --> 01:11:18,280
because it highlights the fact that

1924
01:11:18,280 --> 01:11:20,800
typescript is able to parse and

1925
01:11:20,800 --> 01:11:22,920
understand our code and it knows that we

1926
01:11:22,920 --> 01:11:24,800
have already handled the instance where

1927
01:11:24,800 --> 01:11:27,120
the ident ifier might be a string and

1928
01:11:27,120 --> 01:11:28,880
because we've told typescript that the

1929
01:11:28,880 --> 01:11:31,120
identifier is either a string or a

1930
01:11:31,120 --> 01:11:33,880
number it knows that in this case

1931
01:11:33,880 --> 01:11:35,679
according to what we have told

1932
01:11:35,679 --> 01:11:37,679
typescript the type of the identifier

1933
01:11:37,679 --> 01:11:39,719
will be in this else statement it has

1934
01:11:39,719 --> 01:11:42,199
been able to narrow the type down to be

1935
01:11:42,199 --> 01:11:45,280
a number also if we were to have copied

1936
01:11:45,280 --> 01:11:47,360
this line of code down and simply

1937
01:11:47,360 --> 01:11:49,880
removed the dot to lowercase but forgot

1938
01:11:49,880 --> 01:11:52,760
to change this from name to ID

1939
01:11:52,760 --> 01:11:54,800
typescript warns us that we can't use

1940
01:11:54,800 --> 01:11:57,040
the trip equals to compare a string

1941
01:11:57,040 --> 01:11:59,520
which it knows pizza. name is and a

1942
01:11:59,520 --> 01:12:01,600
number which now that we have narrowed

1943
01:12:01,600 --> 01:12:03,480
the type down we know that it is no

1944
01:12:03,480 --> 01:12:05,440
longer going to be a string if it's

1945
01:12:05,440 --> 01:12:07,639
reaching this code and so it's able to

1946
01:12:07,639 --> 01:12:09,199
warn us that these things aren't going

1947
01:12:09,199 --> 01:12:11,400
to equate correctly so just another

1948
01:12:11,400 --> 01:12:13,760
instance of typescript helping us out so

1949
01:12:13,760 --> 01:12:15,760
this is just one example of this concept

1950
01:12:15,760 --> 01:12:17,719
called type narrowing where when we're

1951
01:12:17,719 --> 01:12:19,360
writing a function and we don't

1952
01:12:19,360 --> 01:12:21,560
necessarily know what the data type of

1953
01:12:21,560 --> 01:12:23,920
that function is typescript will expect

1954
01:12:23,920 --> 01:12:26,440
us to narrow down the type and handle

1955
01:12:26,440 --> 01:12:29,000
each use case or potentially provide a

1956
01:12:29,000 --> 01:12:31,360
default for all other use cases if it

1957
01:12:31,360 --> 01:12:33,800
isn't in the if or else if statements

1958
01:12:33,800 --> 01:12:36,000
soon we're going to see another example

1959
01:12:36,000 --> 01:12:37,920
of where type narrowing is really

1960
01:12:37,920 --> 01:12:40,159
important but first I want to address

1961
01:12:40,159 --> 01:12:41,679
this lse statement that we have as I

1962
01:12:41,679 --> 01:12:43,159
mentioned I would we'll do that in the

1963
01:12:43,159 --> 01:12:45,360
next

1964
01:12:46,520 --> 01:12:49,320
scrim although this isn't a specific

1965
01:12:49,320 --> 01:12:52,280
benefit created by using typescript one

1966
01:12:52,280 --> 01:12:53,679
thing that writing your projects in

1967
01:12:53,679 --> 01:12:55,639
typescript will help you do is remember

1968
01:12:55,639 --> 01:12:58,440
to be as explicit as you can when you're

1969
01:12:58,440 --> 01:13:00,480
writing your code for example I have

1970
01:13:00,480 --> 01:13:02,920
told typescript that my identifier is

1971
01:13:02,920 --> 01:13:05,239
either going to be a string or a number

1972
01:13:05,239 --> 01:13:07,320
and I've handled the case where the type

1973
01:13:07,320 --> 01:13:09,040
is going to be a string and therefore

1974
01:13:09,040 --> 01:13:11,280
typescript can assume that inside of my

1975
01:13:11,280 --> 01:13:13,480
else Clause here the type will be a

1976
01:13:13,480 --> 01:13:15,920
number however in some instances you may

1977
01:13:15,920 --> 01:13:17,880
be working in a project where the code

1978
01:13:17,880 --> 01:13:19,920
you're writing will end up being used in

1979
01:13:19,920 --> 01:13:22,239
a plain Javascript file and the

1980
01:13:22,239 --> 01:13:23,880
protection that other file would

1981
01:13:23,880 --> 01:13:25,280
normally get if it were used using

1982
01:13:25,280 --> 01:13:27,960
typescript won't exist so I've added

1983
01:13:27,960 --> 01:13:30,280
this export in front of our function and

1984
01:13:30,280 --> 01:13:33,280
I'm going to use this index.js file to

1985
01:13:33,280 --> 01:13:37,880
import our get pizza detail function

1986
01:13:37,880 --> 01:13:41,840
from our index.ts file and I can show

1987
01:13:41,840 --> 01:13:43,480
that this is working so I can say get

1988
01:13:43,480 --> 01:13:46,280
pizza detail with the ID of one and

1989
01:13:46,280 --> 01:13:48,600
we'll console log the result and sure

1990
01:13:48,600 --> 01:13:50,199
enough we get our margarita pizza with

1991
01:13:50,199 --> 01:13:51,880
the idea of one however Nothing is

1992
01:13:51,880 --> 01:13:54,280
Stopping this Javascript file from doing

1993
01:13:54,280 --> 01:13:56,679
something weird like saying get pizza

1994
01:13:56,679 --> 01:13:59,400
detail false because it's JavaScript

1995
01:13:59,400 --> 01:14:01,440
we're not going to get any compile time

1996
01:14:01,440 --> 01:14:03,639
warnings here and so I can run the code

1997
01:14:03,639 --> 01:14:06,080
and get the value of undefined which in

1998
01:14:06,080 --> 01:14:08,639
all honesty our function is pretty okay

1999
01:14:08,639 --> 01:14:10,880
with returning anyway but we could get a

2000
01:14:10,880 --> 01:14:13,679
little bit better of a user or I guess

2001
01:14:13,679 --> 01:14:15,440
not a user but another developer's

2002
01:14:15,440 --> 01:14:17,520
experience can be improved if we're just

2003
01:14:17,520 --> 01:14:19,400
a little bit more explicit here and we

2004
01:14:19,400 --> 01:14:23,480
say something like if the type of

2005
01:14:23,480 --> 01:14:26,560
identifier is equal to a number then we

2006
01:14:26,560 --> 01:14:28,000
can run this code and then we could

2007
01:14:28,000 --> 01:14:30,560
include another else that maybe throws a

2008
01:14:30,560 --> 01:14:34,320
new type error that says the

2009
01:14:34,320 --> 01:14:38,440
parameter identifier must be either a

2010
01:14:38,440 --> 01:14:41,960
string or a number okay so let's hit

2011
01:14:41,960 --> 01:14:44,880
save and now by trying to use false in

2012
01:14:44,880 --> 01:14:47,040
get pizza detail we get our type error

2013
01:14:47,040 --> 01:14:49,280
thrown so that the developer using a

2014
01:14:49,280 --> 01:14:50,880
Javascript file can get a little bit

2015
01:14:50,880 --> 01:14:53,280
more of an intentional feedback loop so

2016
01:14:53,280 --> 01:14:54,800
long story short when you're writing

2017
01:14:54,800 --> 01:14:56,639
your typescript code try to be as

2018
01:14:56,639 --> 01:15:00,199
explicit as you can within

2019
01:15:01,320 --> 01:15:03,840
reason staying on the theme of being

2020
01:15:03,840 --> 01:15:05,520
explicit with your typescript code

2021
01:15:05,520 --> 01:15:07,400
whenever you can I want to talk about

2022
01:15:07,400 --> 01:15:10,120
function return types before we jump

2023
01:15:10,120 --> 01:15:11,880
into that though I did want to note that

2024
01:15:11,880 --> 01:15:13,960
we previously talked about composing

2025
01:15:13,960 --> 01:15:16,040
together different object types but here

2026
01:15:16,040 --> 01:15:18,360
we can see we have this type user and

2027
01:15:18,360 --> 01:15:21,719
for the RO property of that user object

2028
01:15:21,719 --> 01:15:24,239
we're using the user R type that we

2029
01:15:24,239 --> 01:15:26,920
created up above so we can compose types

2030
01:15:26,920 --> 01:15:29,040
together however we want it doesn't just

2031
01:15:29,040 --> 01:15:30,400
have to be when we're talking about

2032
01:15:30,400 --> 01:15:32,199
nested objects like we saw at the

2033
01:15:32,199 --> 01:15:34,600
beginning of the course okay so here we

2034
01:15:34,600 --> 01:15:37,120
have a users array and we have a

2035
01:15:37,120 --> 01:15:39,920
function called Fetch user details which

2036
01:15:39,920 --> 01:15:42,520
takes a parameter of username and sends

2037
01:15:42,520 --> 01:15:45,040
back the user in its return value go

2038
01:15:45,040 --> 01:15:47,000
ahead and hover your mouse over the name

2039
01:15:47,000 --> 01:15:49,320
of this function fetch user details and

2040
01:15:49,320 --> 01:15:51,719
you'll see that in the popup it says

2041
01:15:51,719 --> 01:15:54,480
function fetch user details parentheses

2042
01:15:54,480 --> 01:15:56,880
username colon string exactly what we

2043
01:15:56,880 --> 01:15:58,760
have in the beginning of our function

2044
01:15:58,760 --> 01:16:01,800
here in our code but then it says colon

2045
01:16:01,800 --> 01:16:04,600
capital u user the colon that we put

2046
01:16:04,600 --> 01:16:06,800
after the arguments of our function

2047
01:16:06,800 --> 01:16:09,480
gives us a chance to specify what type

2048
01:16:09,480 --> 01:16:11,840
of data should be returned from our

2049
01:16:11,840 --> 01:16:14,199
function now typescript was able to

2050
01:16:14,199 --> 01:16:17,280
infer that as we see it put a colon user

2051
01:16:17,280 --> 01:16:19,400
there but in a lot of instances it can

2052
01:16:19,400 --> 01:16:21,960
be really helpful to explicitly type

2053
01:16:21,960 --> 01:16:23,400
what should be returned from your

2054
01:16:23,400 --> 01:16:26,159
function so I would put a colon and this

2055
01:16:26,159 --> 01:16:28,520
is between the arguments of my function

2056
01:16:28,520 --> 01:16:30,520
and the opening curly brace and then I

2057
01:16:30,520 --> 01:16:33,120
would just put capital u user here to

2058
01:16:33,120 --> 01:16:34,880
teach typescript that this function

2059
01:16:34,880 --> 01:16:37,960
should always return a user object so if

2060
01:16:37,960 --> 01:16:40,239
it was able to infer that it's returning

2061
01:16:40,239 --> 01:16:42,800
a user why is it helpful to explicitly

2062
01:16:42,800 --> 01:16:45,080
put a capital u user here well one of

2063
01:16:45,080 --> 01:16:47,280
the major reasons I think for doing this

2064
01:16:47,280 --> 01:16:48,880
is that it helps whenever we're

2065
01:16:48,880 --> 01:16:51,600
refactoring our code if myself or some

2066
01:16:51,600 --> 01:16:53,480
other developer were to find this

2067
01:16:53,480 --> 01:16:55,320
function and say I don't know why it's

2068
01:16:55,320 --> 01:16:57,320
returning a user it should be returning

2069
01:16:57,320 --> 01:16:59,960
the user. username instead well if they

2070
01:16:59,960 --> 01:17:01,639
try to do that then they will get a

2071
01:17:01,639 --> 01:17:03,440
warning from typescript saying that it's

2072
01:17:03,440 --> 01:17:06,120
trying to return a string instead of

2073
01:17:06,120 --> 01:17:08,800
explicitly a user object if I don't

2074
01:17:08,800 --> 01:17:11,320
include this explicit typee declaration

2075
01:17:11,320 --> 01:17:13,199
then typescript has no problem with me

2076
01:17:13,199 --> 01:17:15,400
completely changing the return value of

2077
01:17:15,400 --> 01:17:17,120
this function which assuming this

2078
01:17:17,120 --> 01:17:19,199
function is used throughout my codebase

2079
01:17:19,199 --> 01:17:21,199
would likely cause some other problems

2080
01:17:21,199 --> 01:17:23,440
so this is an opportunity for us to be a

2081
01:17:23,440 --> 01:17:26,159
little bit more explicit and to specify

2082
01:17:26,159 --> 01:17:28,239
that we want this to be a user object

2083
01:17:28,239 --> 01:17:30,320
that gets returned and if someone is

2084
01:17:30,320 --> 01:17:32,400
going to change the return value of this

2085
01:17:32,400 --> 01:17:34,280
function they would have to come up and

2086
01:17:34,280 --> 01:17:36,199
explicitly change this to something like

2087
01:17:36,199 --> 01:17:38,480
string and this would be the dot

2088
01:17:38,480 --> 01:17:40,760
username which theoretically would be a

2089
01:17:40,760 --> 01:17:43,120
prompt to that other developer or myself

2090
01:17:43,120 --> 01:17:44,920
in the future to then go throughout my

2091
01:17:44,920 --> 01:17:47,000
codebase and make changes every time

2092
01:17:47,000 --> 01:17:48,679
we're calling this fetch user details

2093
01:17:48,679 --> 01:17:50,639
function let's keep this returning a

2094
01:17:50,639 --> 01:17:52,800
user for now okay it's been a minute

2095
01:17:52,800 --> 01:17:54,360
since we've had a challenge so let's go

2096
01:17:54,360 --> 01:17:55,920
back to the the pizza restaurant app and

2097
01:17:55,920 --> 01:17:59,199
try your hand at a quick

2098
01:18:00,840 --> 01:18:03,040
challenge we just talked about the

2099
01:18:03,040 --> 01:18:05,960
typescript specific type called void and

2100
01:18:05,960 --> 01:18:07,880
there are actually a few other

2101
01:18:07,880 --> 01:18:10,040
typescript specific types that I think

2102
01:18:10,040 --> 01:18:12,040
would be worth taking a little tangent

2103
01:18:12,040 --> 01:18:14,320
to talk about at this time we'll start

2104
01:18:14,320 --> 01:18:16,280
with a rather notorious type in

2105
01:18:16,280 --> 01:18:19,040
typescript called any the easiest way to

2106
01:18:19,040 --> 01:18:21,360
think about any is to know that if you

2107
01:18:21,360 --> 01:18:23,000
type something with any you're

2108
01:18:23,000 --> 01:18:24,880
essentially turning off typescript

2109
01:18:24,880 --> 01:18:28,040
checking for that value so if I have a

2110
01:18:28,040 --> 01:18:30,679
value and let's set it equal to one

2111
01:18:30,679 --> 01:18:32,800
typescript is able to infer that this

2112
01:18:32,800 --> 01:18:34,840
should be of type number you can hover

2113
01:18:34,840 --> 01:18:37,239
your mouse over value to see that and it

2114
01:18:37,239 --> 01:18:39,360
gives me warnings if I ever try to do

2115
01:18:39,360 --> 01:18:41,920
something like reassign it to a string

2116
01:18:41,920 --> 01:18:44,199
it tells me that you can't do that or if

2117
01:18:44,199 --> 01:18:47,800
I try to run an operation on it like to

2118
01:18:47,800 --> 01:18:50,040
uppercase which only works for Strings

2119
01:18:50,040 --> 01:18:51,760
it tells me that you can't run this

2120
01:18:51,760 --> 01:18:53,719
method on a number These Warnings of

2121
01:18:53,719 --> 01:18:55,719
course as we've seen up until now are

2122
01:18:55,719 --> 01:18:57,400
very useful to us but let's see what

2123
01:18:57,400 --> 01:18:59,560
happens if I manually type this as an

2124
01:18:59,560 --> 01:19:02,639
any type suddenly the warnings go away

2125
01:19:02,639 --> 01:19:04,159
as I mentioned we've turned off

2126
01:19:04,159 --> 01:19:06,840
typescript checking so I can tell value

2127
01:19:06,840 --> 01:19:09,080
that it's going to be a string now I can

2128
01:19:09,080 --> 01:19:12,120
try to call say an array method on it

2129
01:19:12,120 --> 01:19:14,080
and typescript isn't going to warn me at

2130
01:19:14,080 --> 01:19:15,920
all essentially it's a way to say in

2131
01:19:15,920 --> 01:19:18,120
your code I know better than typescript

2132
01:19:18,120 --> 01:19:20,080
how this thing should be typed and I

2133
01:19:20,080 --> 01:19:22,239
don't want typescript to help me at all

2134
01:19:22,239 --> 01:19:24,320
I think you can probably see maybe from

2135
01:19:24,320 --> 01:19:26,199
my tone or just from the lack of

2136
01:19:26,199 --> 01:19:28,199
warnings here that this is not a good

2137
01:19:28,199 --> 01:19:31,040
idea so when really should you use any

2138
01:19:31,040 --> 01:19:32,960
well in short you shouldn't it can be

2139
01:19:32,960 --> 01:19:34,360
tempting when you're looking at your

2140
01:19:34,360 --> 01:19:36,120
code that has a bunch of typescript

2141
01:19:36,120 --> 01:19:37,840
Errors to just throw your hands in the

2142
01:19:37,840 --> 01:19:40,199
air type things manually as any so that

2143
01:19:40,199 --> 01:19:42,440
the warnings go away and then continue

2144
01:19:42,440 --> 01:19:44,679
on with your code but in that case why

2145
01:19:44,679 --> 01:19:46,199
did you choose typescript in the first

2146
01:19:46,199 --> 01:19:48,239
place now that's not entirely fair I

2147
01:19:48,239 --> 01:19:50,080
think there is at least one legitimate

2148
01:19:50,080 --> 01:19:51,800
use case and I think that would be if

2149
01:19:51,800 --> 01:19:53,600
you're in the process of transitioning

2150
01:19:53,600 --> 01:19:55,520
your code base from JavaScript to

2151
01:19:55,520 --> 01:19:57,960
typescript and you don't have the time

2152
01:19:57,960 --> 01:20:00,400
right now to write all of the complex

2153
01:20:00,400 --> 01:20:02,679
types and update all of your code to

2154
01:20:02,679 --> 01:20:04,880
satisfy the typescript warnings and you

2155
01:20:04,880 --> 01:20:06,719
just need a temporary that's the

2156
01:20:06,719 --> 01:20:09,360
important part here temporary way to get

2157
01:20:09,360 --> 01:20:11,880
around typescripts just for now but be

2158
01:20:11,880 --> 01:20:14,000
warned as soon as you start adding any

2159
01:20:14,000 --> 01:20:16,199
to your code base and the warnings go

2160
01:20:16,199 --> 01:20:18,320
away it might be a bit difficult to go

2161
01:20:18,320 --> 01:20:20,320
back and force yourself to bring those

2162
01:20:20,320 --> 01:20:22,880
warnings back by removing the any types

2163
01:20:22,880 --> 01:20:24,239
in fact it might be better if you just

2164
01:20:24,239 --> 01:20:26,760
left the warnings there and turned off

2165
01:20:26,760 --> 01:20:28,760
the configuration in typescript that

2166
01:20:28,760 --> 01:20:31,080
forces you to satisfy the typescript

2167
01:20:31,080 --> 01:20:33,000
warnings before your code will compile

2168
01:20:33,000 --> 01:20:34,960
we're venturing into territory outside

2169
01:20:34,960 --> 01:20:37,199
the scope of this course so if there's

2170
01:20:37,199 --> 01:20:38,719
just one thing I want you to take away

2171
01:20:38,719 --> 01:20:41,199
from this lesson just don't use any if

2172
01:20:41,199 --> 01:20:42,880
you do have a scenario where there's a

2173
01:20:42,880 --> 01:20:44,600
value where you legitimately don't know

2174
01:20:44,600 --> 01:20:46,040
the type of it there's another

2175
01:20:46,040 --> 01:20:48,000
typescript specific type that is much

2176
01:20:48,000 --> 01:20:49,880
better suited for that scenario and it's

2177
01:20:49,880 --> 01:20:51,639
called unknown that's what we're going

2178
01:20:51,639 --> 01:20:55,360
to be looking at next

2179
01:20:57,040 --> 01:20:58,760
okay we're going to do this in a couple

2180
01:20:58,760 --> 01:21:00,520
parts the first part of your challenge

2181
01:21:00,520 --> 01:21:03,000
is to add a return type to the get pizza

2182
01:21:03,000 --> 01:21:05,239
detail function this should take you all

2183
01:21:05,239 --> 01:21:07,679
of about 2 seconds to do but once you do

2184
01:21:07,679 --> 01:21:09,719
it as it says in the note you are very

2185
01:21:09,719 --> 01:21:11,719
likely going to get a giant typescript

2186
01:21:11,719 --> 01:21:13,440
warning but don't worry about that we're

2187
01:21:13,440 --> 01:21:15,159
going to address that in part two of The

2188
01:21:15,159 --> 01:21:17,360
Challenge pause now and add a return

2189
01:21:17,360 --> 01:21:21,880
type to our get pizza detail function

2190
01:21:25,600 --> 01:21:28,120
simply enough we can come between where

2191
01:21:28,120 --> 01:21:30,480
the closing parenthese is in our

2192
01:21:30,480 --> 01:21:32,600
parameters and the opening curly brace

2193
01:21:32,600 --> 01:21:34,679
we can just put a colon and say that

2194
01:21:34,679 --> 01:21:37,239
this is supposed to return a pizza and

2195
01:21:37,239 --> 01:21:38,639
look at that we get those giant

2196
01:21:38,639 --> 01:21:40,400
typescript warnings and if we hover over

2197
01:21:40,400 --> 01:21:43,199
it it tells us that type pizza or

2198
01:21:43,199 --> 01:21:45,480
undefined is not assignable to type

2199
01:21:45,480 --> 01:21:47,880
pizza now before I explain exactly

2200
01:21:47,880 --> 01:21:49,440
what's going on here I want you to think

2201
01:21:49,440 --> 01:21:51,280
about it try and figure out why is it

2202
01:21:51,280 --> 01:21:54,239
saying that the type pizza or undefined

2203
01:21:54,239 --> 01:21:56,560
is not assignable to type Pizza in fact

2204
01:21:56,560 --> 01:21:58,280
if you want to pause to spend a little

2205
01:21:58,280 --> 01:21:59,800
bit of time playing with the code or

2206
01:21:59,800 --> 01:22:03,239
thinking about that go ahead and do so

2207
01:22:04,639 --> 01:22:07,120
now we talked about this briefly when we

2208
01:22:07,120 --> 01:22:09,120
first wrote this code but remember that

2209
01:22:09,120 --> 01:22:11,880
menu. find potentially returns an

2210
01:22:11,880 --> 01:22:14,400
undefined value if it's not able to find

2211
01:22:14,400 --> 01:22:16,560
the pizza that you specified let me get

2212
01:22:16,560 --> 01:22:19,280
rid of my explicit declaration here and

2213
01:22:19,280 --> 01:22:21,719
for a kind of unrelated reason I need to

2214
01:22:21,719 --> 01:22:23,880
get rid of my challenge text and now

2215
01:22:23,880 --> 01:22:25,600
hover your mouth Mouse over get pizza

2216
01:22:25,600 --> 01:22:27,960
detail and you'll see that it did infer

2217
01:22:27,960 --> 01:22:30,000
what data type would get returned from

2218
01:22:30,000 --> 01:22:31,880
this function it's either going to be

2219
01:22:31,880 --> 01:22:34,520
pizza or undefined typescript was smart

2220
01:22:34,520 --> 01:22:36,159
enough to read through the code and know

2221
01:22:36,159 --> 01:22:38,320
that we are returning potentially an

2222
01:22:38,320 --> 01:22:40,679
undefined value or rather a value of

2223
01:22:40,679 --> 01:22:43,280
undefined inside of our code here and so

2224
01:22:43,280 --> 01:22:45,760
it inferred the return value as either

2225
01:22:45,760 --> 01:22:48,040
pizza or undefined this is where things

2226
01:22:48,040 --> 01:22:49,960
can get a little bit hazy you may want

2227
01:22:49,960 --> 01:22:51,639
to rewrite your code a little bit

2228
01:22:51,639 --> 01:22:54,040
differently to either throw an error if

2229
01:22:54,040 --> 01:22:56,520
it was able to find the pizza or you can

2230
01:22:56,520 --> 01:22:58,440
just expect that whatever code is

2231
01:22:58,440 --> 01:23:00,880
calling get pizza detail will handle the

2232
01:23:00,880 --> 01:23:02,800
instance where it gets an undefined

2233
01:23:02,800 --> 01:23:04,679
value returned but since this course

2234
01:23:04,679 --> 01:23:06,760
isn't about how to architect this

2235
01:23:06,760 --> 01:23:08,400
particular function we'll go ahead and

2236
01:23:08,400 --> 01:23:11,639
do another really simple challenge okay

2237
01:23:11,639 --> 01:23:13,800
again really easy but I want you to

2238
01:23:13,800 --> 01:23:15,800
explicitly type the return value of this

2239
01:23:15,800 --> 01:23:17,560
function so that typescript knows it

2240
01:23:17,560 --> 01:23:19,800
could either be a pizza object or the

2241
01:23:19,800 --> 01:23:22,159
value of undefined pause now and work on

2242
01:23:22,159 --> 01:23:25,320
this challenge

2243
01:23:28,840 --> 01:23:31,040
again simply enough we can just put a

2244
01:23:31,040 --> 01:23:33,199
colon right here and say it's either

2245
01:23:33,199 --> 01:23:35,840
going to be pizza or we will include the

2246
01:23:35,840 --> 01:23:38,880
union of undefined like we saw before

2247
01:23:38,880 --> 01:23:41,159
this doesn't necessarily change the way

2248
01:23:41,159 --> 01:23:42,920
that the function works or the way that

2249
01:23:42,920 --> 01:23:45,159
typescript sees the function but it does

2250
01:23:45,159 --> 01:23:47,000
help us or other developers in the

2251
01:23:47,000 --> 01:23:49,440
future know that when we're messing with

2252
01:23:49,440 --> 01:23:51,000
this code and doing some kind of

2253
01:23:51,000 --> 01:23:53,199
refactor we need to either make sure

2254
01:23:53,199 --> 01:23:56,000
that we continue to return a pizza or a

2255
01:23:56,000 --> 01:23:58,040
value of undefined or we need to

2256
01:23:58,040 --> 01:24:00,159
explicitly change this value and then

2257
01:24:00,159 --> 01:24:02,040
change our code everywhere else that's

2258
01:24:02,040 --> 01:24:04,360
depending on get pizza detail either

2259
01:24:04,360 --> 01:24:06,440
returning a pizza or undefined let's

2260
01:24:06,440 --> 01:24:08,719
clean up the challenge text all right

2261
01:24:08,719 --> 01:24:10,520
well we're not quite done talking about

2262
01:24:10,520 --> 01:24:12,639
return types with functions so feel free

2263
01:24:12,639 --> 01:24:14,600
to play with the code as always and when

2264
01:24:14,600 --> 01:24:17,719
you're ready we'll keep moving

2265
01:24:19,159 --> 01:24:21,520
forward there's another return type that

2266
01:24:21,520 --> 01:24:24,040
isn't quite as obvious as something like

2267
01:24:24,040 --> 01:24:26,440
pizza or undefined was down here and

2268
01:24:26,440 --> 01:24:28,320
that is when you have a function that

2269
01:24:28,320 --> 01:24:30,400
doesn't return anything look through the

2270
01:24:30,400 --> 01:24:32,040
code on your screen here see if you can

2271
01:24:32,040 --> 01:24:33,840
find a function that doesn't currently

2272
01:24:33,840 --> 01:24:36,120
return

2273
01:24:37,679 --> 01:24:39,960
anything hopefully you found this add

2274
01:24:39,960 --> 01:24:42,239
new pizza function in fact if you hover

2275
01:24:42,239 --> 01:24:44,159
your mouse over it you'll see that the

2276
01:24:44,159 --> 01:24:47,280
inferred return type is called void this

2277
01:24:47,280 --> 01:24:49,320
function modifies the menu by pushing

2278
01:24:49,320 --> 01:24:51,360
new objects to it but then there's no

2279
01:24:51,360 --> 01:24:53,119
return from it there's not going to be a

2280
01:24:53,119 --> 01:24:55,280
value that we can get from it so one way

2281
01:24:55,280 --> 01:24:57,679
we can be a bit more explicit almost

2282
01:24:57,679 --> 01:25:00,239
like documenting our code in line is by

2283
01:25:00,239 --> 01:25:02,960
explicitly typing this as returning void

2284
01:25:02,960 --> 01:25:04,280
it doesn't change the way that the

2285
01:25:04,280 --> 01:25:07,480
function operates if you try to save the

2286
01:25:07,480 --> 01:25:09,679
return value from calling add new pizza

2287
01:25:09,679 --> 01:25:11,840
you would get the value of undefined but

2288
01:25:11,840 --> 01:25:13,719
it helps us or other developers in the

2289
01:25:13,719 --> 01:25:15,480
future reviewing through this code to

2290
01:25:15,480 --> 01:25:17,360
know that we knew this wouldn't return

2291
01:25:17,360 --> 01:25:18,920
anything it's just performing an

2292
01:25:18,920 --> 01:25:21,280
operation outside of itself and then not

2293
01:25:21,280 --> 01:25:23,320
returning anything that's about all

2294
01:25:23,320 --> 01:25:25,360
there is for me to say about void it's

2295
01:25:25,360 --> 01:25:26,960
pretty straightforward but since that

2296
01:25:26,960 --> 01:25:28,880
was pretty quick I want to give you a

2297
01:25:28,880 --> 01:25:31,000
relatively unrelated

2298
01:25:31,000 --> 01:25:33,639
challenge okay your challenge is to add

2299
01:25:33,639 --> 01:25:35,719
explicit return types to the rest of our

2300
01:25:35,719 --> 01:25:38,000
functions so really just the place order

2301
01:25:38,000 --> 01:25:39,960
function and the complete order function

2302
01:25:39,960 --> 01:25:43,040
pause now and work on this

2303
01:25:46,440 --> 01:25:49,119
challenge a really easy way to do this

2304
01:25:49,119 --> 01:25:51,679
is for us to hover our Mouse over the

2305
01:25:51,679 --> 01:25:53,679
name of the function and see what

2306
01:25:53,679 --> 01:25:55,520
typescript has already inferred is going

2307
01:25:55,520 --> 01:25:57,400
to be the return type here we can see

2308
01:25:57,400 --> 01:25:59,600
that it's either going to be an order

2309
01:25:59,600 --> 01:26:02,800
type or undefined and if we go to

2310
01:26:02,800 --> 01:26:04,520
complete order it's actually going to be

2311
01:26:04,520 --> 01:26:07,639
the exact same thing order or undefined

2312
01:26:07,639 --> 01:26:09,520
so really just getting our repetitions

2313
01:26:09,520 --> 01:26:11,320
in with the muscle memory in typing

2314
01:26:11,320 --> 01:26:13,560
these functions out okay nice work let's

2315
01:26:13,560 --> 01:26:15,760
move

2316
01:26:17,199 --> 01:26:19,840
on let's take some time to do a really

2317
01:26:19,840 --> 01:26:22,280
simple refactor to our code and see how

2318
01:26:22,280 --> 01:26:24,360
typescript helps us do that currently

2319
01:26:24,360 --> 01:26:25,960
when we're creating the menu we are

2320
01:26:25,960 --> 01:26:29,040
manually adding our IDs here with 1 2 3

2321
01:26:29,040 --> 01:26:31,560
4 and I brought the calls that we had

2322
01:26:31,560 --> 01:26:33,760
down at the bottom up a little bit to

2323
01:26:33,760 --> 01:26:36,119
add new pizza and we were manually doing

2324
01:26:36,119 --> 01:26:38,480
IDs of 5 six and 7even let's go ahead

2325
01:26:38,480 --> 01:26:40,440
and use the same trick that we're using

2326
01:26:40,440 --> 01:26:43,199
with next order ID right here where when

2327
01:26:43,199 --> 01:26:45,600
we are creating an order we are creating

2328
01:26:45,600 --> 01:26:47,239
an object right here where we're using

2329
01:26:47,239 --> 01:26:50,440
next order ID ++ if you run into any

2330
01:26:50,440 --> 01:26:52,199
typescript errors make sure to hover

2331
01:26:52,199 --> 01:26:54,520
your mouse over them and see if you can

2332
01:26:54,520 --> 01:26:56,520
figure out how to fix them as a little

2333
01:26:56,520 --> 01:26:58,440
peek into the future for now we will

2334
01:26:58,440 --> 01:27:01,159
still keep the IDS here inside of our

2335
01:27:01,159 --> 01:27:03,320
add new pizza call but my goal is to get

2336
01:27:03,320 --> 01:27:05,520
us to a point where we can submit a

2337
01:27:05,520 --> 01:27:07,920
partial Pizza object without the ID and

2338
01:27:07,920 --> 01:27:10,159
have the function handle adding the ID

2339
01:27:10,159 --> 01:27:12,440
for us but for now we'll skip that part

2340
01:27:12,440 --> 01:27:15,440
pause now and work on the

2341
01:27:18,760 --> 01:27:21,800
challenge so I might want to come here

2342
01:27:21,800 --> 01:27:26,080
and say let's call it next Pizza ID and

2343
01:27:26,080 --> 01:27:28,639
we'll start it off at 1 and then up here

2344
01:27:28,639 --> 01:27:31,960
instead of one I can say next Pizza ID

2345
01:27:31,960 --> 01:27:33,719
plus plus and check it out we're getting

2346
01:27:33,719 --> 01:27:36,280
an error from typescript you probably

2347
01:27:36,280 --> 01:27:37,880
already know what this is but if we

2348
01:27:37,880 --> 01:27:40,239
hover over this it says the block scoped

2349
01:27:40,239 --> 01:27:43,159
variable next Pizza ID is used before

2350
01:27:43,159 --> 01:27:45,520
its declaration variable next Pizza ID

2351
01:27:45,520 --> 01:27:47,639
is used before being assigned and yes it

2352
01:27:47,639 --> 01:27:50,600
is down here on line 22 we are defining

2353
01:27:50,600 --> 01:27:53,159
that and because of the way hoisting and

2354
01:27:53,159 --> 01:27:55,159
everything happens in JavaScript this

2355
01:27:55,159 --> 01:27:57,760
would actually need to be above where

2356
01:27:57,760 --> 01:28:00,040
we're using it so let's just move all of

2357
01:28:00,040 --> 01:28:02,119
these Global variable declarations up

2358
01:28:02,119 --> 01:28:03,880
here to the top and then we should be

2359
01:28:03,880 --> 01:28:05,880
fine typescript is already helping us

2360
01:28:05,880 --> 01:28:08,239
out okay we'll do the same thing here

2361
01:28:08,239 --> 01:28:10,440
and there and down here when we're

2362
01:28:10,440 --> 01:28:12,960
adding new pizzas we will go ahead and

2363
01:28:12,960 --> 01:28:15,159
do the same thing down here at the

2364
01:28:15,159 --> 01:28:17,159
bottom I am still console logging the

2365
01:28:17,159 --> 01:28:19,159
menu and then a couple other things that

2366
01:28:19,159 --> 01:28:20,719
we actually don't care too much about

2367
01:28:20,719 --> 01:28:23,000
right now okay so I'm adding three new

2368
01:28:23,000 --> 01:28:25,719
pizzas down below I am still console

2369
01:28:25,719 --> 01:28:27,480
logging the menu we'll comment these

2370
01:28:27,480 --> 01:28:29,520
other ones out for now and let's open

2371
01:28:29,520 --> 01:28:32,239
our console and hit save and perfect we

2372
01:28:32,239 --> 01:28:34,840
have our menu with all seven items in it

2373
01:28:34,840 --> 01:28:36,800
now let's address this issue where it

2374
01:28:36,800 --> 01:28:38,639
seems a little strange that we are

2375
01:28:38,639 --> 01:28:41,159
providing a pizza object but we are in

2376
01:28:41,159 --> 01:28:44,080
charge of ensuring that the ID is being

2377
01:28:44,080 --> 01:28:46,199
handled correctly it seems like the add

2378
01:28:46,199 --> 01:28:48,000
new pizza function should be able to

2379
01:28:48,000 --> 01:28:50,719
handle that for us so I want you to test

2380
01:28:50,719 --> 01:28:53,040
that out I'm going to write this in as a

2381
01:28:53,040 --> 01:28:54,920
challenge okay I'm calling this

2382
01:28:54,920 --> 01:28:57,639
challenge part 1.5 because there's a

2383
01:28:57,639 --> 01:28:59,199
topic in typescript we still have to

2384
01:28:59,199 --> 01:29:01,040
learn in order to do this without

2385
01:29:01,040 --> 01:29:03,080
typescript complaining at us so as

2386
01:29:03,080 --> 01:29:04,400
you'll see in the note you're still

2387
01:29:04,400 --> 01:29:06,679
going to run into typescript warnings

2388
01:29:06,679 --> 01:29:08,360
that we are going to address soon but

2389
01:29:08,360 --> 01:29:10,119
the code should still run if you do it

2390
01:29:10,119 --> 01:29:12,000
correctly the goal is to make it so that

2391
01:29:12,000 --> 01:29:14,119
we don't have to provide this ID

2392
01:29:14,119 --> 01:29:15,760
property when we're adding a new pizza

2393
01:29:15,760 --> 01:29:17,560
we just have to provide the information

2394
01:29:17,560 --> 01:29:19,440
that's specific to the pizza and we can

2395
01:29:19,440 --> 01:29:22,400
move the assigning of the next Pizza ID

2396
01:29:22,400 --> 01:29:24,480
inside of the add new pizza function as

2397
01:29:24,480 --> 01:29:26,239
an implementation detail of this

2398
01:29:26,239 --> 01:29:28,239
function it's not really something that

2399
01:29:28,239 --> 01:29:29,719
we should have to think about when we're

2400
01:29:29,719 --> 01:29:31,600
adding a new pizza to our menu we really

2401
01:29:31,600 --> 01:29:33,639
only want to provide the details that

2402
01:29:33,639 --> 01:29:35,840
are specific to the pizza okay I think

2403
01:29:35,840 --> 01:29:37,280
you should be ready pause now and work

2404
01:29:37,280 --> 01:29:39,600
on this

2405
01:29:43,159 --> 01:29:45,560
challenge okay well the pizza object

2406
01:29:45,560 --> 01:29:48,280
that we are about to receive will be

2407
01:29:48,280 --> 01:29:50,239
essentially the same as before but

2408
01:29:50,239 --> 01:29:53,520
without an ID and so I'm going to before

2409
01:29:53,520 --> 01:29:56,040
I push it to the menu we're going to say

2410
01:29:56,040 --> 01:30:00,119
pizza object. ID is equal to next Pizza

2411
01:30:00,119 --> 01:30:02,239
ID and then we'll use the plus plus

2412
01:30:02,239 --> 01:30:04,440
trick to increment it to the next number

2413
01:30:04,440 --> 01:30:06,119
so that the next time it runs it's

2414
01:30:06,119 --> 01:30:08,280
already changed and then this is where

2415
01:30:08,280 --> 01:30:10,159
typescript is going to yell at me I'm

2416
01:30:10,159 --> 01:30:12,760
going to get rid of these ID properties

2417
01:30:12,760 --> 01:30:14,920
in the objects that I'm passing and sure

2418
01:30:14,920 --> 01:30:16,520
enough typescript is screaming at me

2419
01:30:16,520 --> 01:30:18,400
here it says that I'm missing a property

2420
01:30:18,400 --> 01:30:20,560
in the pizza object and I'm typing this

2421
01:30:20,560 --> 01:30:22,760
as a pizza object but let's go ahead and

2422
01:30:22,760 --> 01:30:25,320
hit save and we open up our console and

2423
01:30:25,320 --> 01:30:26,880
sure enough we get the same results that

2424
01:30:26,880 --> 01:30:28,600
we had before we have the seven pizzas

2425
01:30:28,600 --> 01:30:30,119
in our menu and they have an

2426
01:30:30,119 --> 01:30:32,560
incrementing ID just as we would expect

2427
01:30:32,560 --> 01:30:34,440
okay next let's address why typescript

2428
01:30:34,440 --> 01:30:38,159
is screaming at us and how we can fix

2429
01:30:39,600 --> 01:30:42,080
it in this lesson we're going to talk

2430
01:30:42,080 --> 01:30:44,400
about something called utility types but

2431
01:30:44,400 --> 01:30:46,119
in order to set this up I'm going to

2432
01:30:46,119 --> 01:30:47,679
have just a really quick challenge for

2433
01:30:47,679 --> 01:30:50,320
you you can see here we have a user type

2434
01:30:50,320 --> 01:30:52,000
this is something we've seen before we

2435
01:30:52,000 --> 01:30:54,960
have an array of users that are typed as

2436
01:30:54,960 --> 01:30:57,320
an array of users and your task is to

2437
01:30:57,320 --> 01:30:59,480
create this update user function and

2438
01:30:59,480 --> 01:31:02,199
what it should do is take a number ID as

2439
01:31:02,199 --> 01:31:03,840
its first parameter and the second

2440
01:31:03,840 --> 01:31:05,880
parameter is an object that we're

2441
01:31:05,880 --> 01:31:08,679
calling updates and this object will not

2442
01:31:08,679 --> 01:31:11,440
be a full user object it's going to only

2443
01:31:11,440 --> 01:31:13,280
contain the properties that you want to

2444
01:31:13,280 --> 01:31:16,080
change I've explicitly typed these as

2445
01:31:16,080 --> 01:31:18,800
any just so that for now we can turn off

2446
01:31:18,800 --> 01:31:20,239
typescript then we're going to learn

2447
01:31:20,239 --> 01:31:22,280
about utility types so that we can type

2448
01:31:22,280 --> 01:31:24,040
these the correct way and actually you

2449
01:31:24,040 --> 01:31:26,159
know what just to follow my own advice

2450
01:31:26,159 --> 01:31:28,000
this should be typed as a number because

2451
01:31:28,000 --> 01:31:29,480
that's not really what we're going to be

2452
01:31:29,480 --> 01:31:31,560
talking about in utility types now I've

2453
01:31:31,560 --> 01:31:33,480
given you the instructions on how to do

2454
01:31:33,480 --> 01:31:36,040
this this is intended less to be about

2455
01:31:36,040 --> 01:31:38,440
doing algorithmic thinking and more to

2456
01:31:38,440 --> 01:31:39,679
just get your hands on the keyboard and

2457
01:31:39,679 --> 01:31:41,000
make sure that you're staying active in

2458
01:31:41,000 --> 01:31:43,239
this course so you'll simply use the

2459
01:31:43,239 --> 01:31:45,600
array. find method to get the correct

2460
01:31:45,600 --> 01:31:47,719
one based on its ID then you'll use

2461
01:31:47,719 --> 01:31:49,760
object. assign so that you can update

2462
01:31:49,760 --> 01:31:52,040
the found user just right there in place

2463
01:31:52,040 --> 01:31:54,199
if you aren't familiar with object. sign

2464
01:31:54,199 --> 01:31:55,840
or you're a little bit resy on it you

2465
01:31:55,840 --> 01:31:58,199
can do a quick Google search to find how

2466
01:31:58,199 --> 01:31:59,960
to use it okay pause now and work on

2467
01:31:59,960 --> 01:32:02,119
this

2468
01:32:06,040 --> 01:32:09,520
challenge okay let's go to we'll say

2469
01:32:09,520 --> 01:32:12,639
users. find and this is going to return

2470
01:32:12,639 --> 01:32:15,239
a user we'll call it found user and this

2471
01:32:15,239 --> 01:32:17,679
will take a function a callback function

2472
01:32:17,679 --> 01:32:19,920
will say for every user that we're

2473
01:32:19,920 --> 01:32:22,480
looking through we want to find the one

2474
01:32:22,480 --> 01:32:25,600
that has the user ID that's equal to the

2475
01:32:25,600 --> 01:32:27,880
ID that's passed in here in the update

2476
01:32:27,880 --> 01:32:30,119
user function okay we can move this

2477
01:32:30,119 --> 01:32:32,040
comment up there let's go ahead and

2478
01:32:32,040 --> 01:32:34,639
handle the scenario if there is no user

2479
01:32:34,639 --> 01:32:37,159
so if there's not a user and this should

2480
01:32:37,159 --> 01:32:40,239
be a found user let's just put something

2481
01:32:40,239 --> 01:32:43,560
in the console we'll say user not found

2482
01:32:43,560 --> 01:32:45,280
and then we'll make sure to return so

2483
01:32:45,280 --> 01:32:47,280
the rest of the code can't run okay and

2484
01:32:47,280 --> 01:32:49,400
then we'll use object. assign this will

2485
01:32:49,400 --> 01:32:52,480
just change the object directly in place

2486
01:32:52,480 --> 01:32:54,280
this may or may not be the best way to

2487
01:32:54,280 --> 01:32:55,639
handle it but it's the most

2488
01:32:55,639 --> 01:32:57,480
straightforward way so we'll set the

2489
01:32:57,480 --> 01:32:59,719
found user as the starting object and

2490
01:32:59,719 --> 01:33:02,000
then we'll replace any of the properties

2491
01:33:02,000 --> 01:33:04,440
that are found in this updates object we

2492
01:33:04,440 --> 01:33:07,080
can get rid of this comment and yeah

2493
01:33:07,080 --> 01:33:08,719
we're console logging users down here

2494
01:33:08,719 --> 01:33:10,760
let's run this code and let's see we're

2495
01:33:10,760 --> 01:33:12,920
specifically looking for the user with

2496
01:33:12,920 --> 01:33:14,280
the ID of one and sure enough the

2497
01:33:14,280 --> 01:33:16,760
username is now new John do and the last

2498
01:33:16,760 --> 01:33:18,520
one with the username of Charlie Brown

2499
01:33:18,520 --> 01:33:20,360
does have the role of contributor

2500
01:33:20,360 --> 01:33:22,800
instead of member perfect okay why are

2501
01:33:22,800 --> 01:33:25,119
we talking about this well obviously as

2502
01:33:25,119 --> 01:33:26,760
I've mentioned we shouldn't be using the

2503
01:33:26,760 --> 01:33:29,040
any type here however we're not able to

2504
01:33:29,040 --> 01:33:32,199
use user as our type here because we're

2505
01:33:32,199 --> 01:33:34,880
not providing a full user object it's

2506
01:33:34,880 --> 01:33:36,280
also important to know that because we

2507
01:33:36,280 --> 01:33:38,280
don't know which property is going to be

2508
01:33:38,280 --> 01:33:40,880
passed to this function or potentially

2509
01:33:40,880 --> 01:33:42,760
multiple properties we can't come up and

2510
01:33:42,760 --> 01:33:45,600
just create a new type like an updated

2511
01:33:45,600 --> 01:33:48,080
user because what exactly are we going

2512
01:33:48,080 --> 01:33:50,040
to put here we could say that it's going

2513
01:33:50,040 --> 01:33:52,080
to be a username that's a string but

2514
01:33:52,080 --> 01:33:53,800
then what are we going to do if it's a

2515
01:33:53,800 --> 01:33:55,440
Ro change instead well you might be

2516
01:33:55,440 --> 01:33:57,280
thinking well what if we just take every

2517
01:33:57,280 --> 01:33:59,360
property from user and we make it

2518
01:33:59,360 --> 01:34:01,520
optional so we say I don't know maybe

2519
01:34:01,520 --> 01:34:03,159
there's a way that we'd ever want to

2520
01:34:03,159 --> 01:34:05,239
update an ID we'll say well the ID could

2521
01:34:05,239 --> 01:34:06,920
be a number and we'll put the question

2522
01:34:06,920 --> 01:34:08,800
mark here to say that that's an optional

2523
01:34:08,800 --> 01:34:11,440
update and we might have a username so

2524
01:34:11,440 --> 01:34:13,280
we'll set that as optional and we'll say

2525
01:34:13,280 --> 01:34:15,239
that's going to also be a string and you

2526
01:34:15,239 --> 01:34:16,760
know what this is pretty much a lot of

2527
01:34:16,760 --> 01:34:18,800
duplicated stuff so I'll just go ahead

2528
01:34:18,800 --> 01:34:20,639
copy this one down put a question mark

2529
01:34:20,639 --> 01:34:22,600
there okay great well we've done quite a

2530
01:34:22,600 --> 01:34:24,679
bit of extra work here we would then be

2531
01:34:24,679 --> 01:34:26,480
able to say this isn't going to be a

2532
01:34:26,480 --> 01:34:28,880
user it's going to be an updated user

2533
01:34:28,880 --> 01:34:30,360
now we come down and we can see that

2534
01:34:30,360 --> 01:34:32,280
typescript is no longer complaining not

2535
01:34:32,280 --> 01:34:34,199
only that but we run our code and things

2536
01:34:34,199 --> 01:34:36,159
are working like they were before well

2537
01:34:36,159 --> 01:34:38,440
this was a lot of busy work imagine if

2538
01:34:38,440 --> 01:34:41,040
we had a type that had 15 properties on

2539
01:34:41,040 --> 01:34:43,199
it that'll be a bit annoying to have to

2540
01:34:43,199 --> 01:34:45,080
copy those over and just make everything

2541
01:34:45,080 --> 01:34:47,119
optional and at least as far as this

2542
01:34:47,119 --> 01:34:49,040
code is concerned we're only using this

2543
01:34:49,040 --> 01:34:51,040
type in one place right here for our

2544
01:34:51,040 --> 01:34:53,280
update user function so this is where

2545
01:34:53,280 --> 01:34:55,800
the ccept of built-in utility types

2546
01:34:55,800 --> 01:34:58,119
comes from in typescript there are a

2547
01:34:58,119 --> 01:35:00,360
number of types that like a function

2548
01:35:00,360 --> 01:35:02,159
they can take other types in as a

2549
01:35:02,159 --> 01:35:04,280
parameter and they will return a new

2550
01:35:04,280 --> 01:35:06,440
type that you can use with a few changes

2551
01:35:06,440 --> 01:35:08,199
made to it and these are things that are

2552
01:35:08,199 --> 01:35:10,639
built directly into typescript their

2553
01:35:10,639 --> 01:35:12,800
whole goal is to perform some commonly

2554
01:35:12,800 --> 01:35:15,239
needed modifications to existing types

2555
01:35:15,239 --> 01:35:16,840
so that you can continue to work within

2556
01:35:16,840 --> 01:35:18,840
the typescript system kind of like we

2557
01:35:18,840 --> 01:35:20,840
did here instead of creating updated

2558
01:35:20,840 --> 01:35:22,840
user manually by copying all of the

2559
01:35:22,840 --> 01:35:25,040
properties and then making them optional

2560
01:35:25,040 --> 01:35:27,239
we can use a utility type to accomplish

2561
01:35:27,239 --> 01:35:28,719
this we're going to talk about that in

2562
01:35:28,719 --> 01:35:30,520
just a second the other thing to know

2563
01:35:30,520 --> 01:35:32,280
about utility types is that they use

2564
01:35:32,280 --> 01:35:34,119
something called generic syntax which

2565
01:35:34,119 --> 01:35:36,040
uses angle brackets now this is just

2566
01:35:36,040 --> 01:35:37,560
touching the surface of that we are

2567
01:35:37,560 --> 01:35:39,360
going to talk about generics very soon

2568
01:35:39,360 --> 01:35:41,440
in our case here with the update user

2569
01:35:41,440 --> 01:35:43,920
function we can use a built-in utility

2570
01:35:43,920 --> 01:35:46,199
type called partial and what the partial

2571
01:35:46,199 --> 01:35:48,239
type does is it takes in the type that

2572
01:35:48,239 --> 01:35:50,400
you pass to it in our case we want to

2573
01:35:50,400 --> 01:35:52,400
make a modification to our user type

2574
01:35:52,400 --> 01:35:54,280
that we built and it returns turns a new

2575
01:35:54,280 --> 01:35:56,199
type that has all of the properties set

2576
01:35:56,199 --> 01:35:58,040
as optional that should sound familiar

2577
01:35:58,040 --> 01:35:59,400
cuz that's exactly what we just did

2578
01:35:59,400 --> 01:36:01,119
manually if you want to learn more about

2579
01:36:01,119 --> 01:36:02,800
the partial type click on the screenshot

2580
01:36:02,800 --> 01:36:04,040
here this will take you to the

2581
01:36:04,040 --> 01:36:06,400
typescript documentation specifically on

2582
01:36:06,400 --> 01:36:08,520
the partial type okay what does that

2583
01:36:08,520 --> 01:36:10,600
look like well instead of manually

2584
01:36:10,600 --> 01:36:13,119
typing this out I'm going to use the

2585
01:36:13,119 --> 01:36:15,520
built-in type called partial it's got a

2586
01:36:15,520 --> 01:36:18,080
capital P and I use that angle bracket

2587
01:36:18,080 --> 01:36:20,400
syntax that we saw right here because

2588
01:36:20,400 --> 01:36:22,080
this partial uses something called

2589
01:36:22,080 --> 01:36:24,239
generics again we're going to talk about

2590
01:36:24,239 --> 01:36:26,159
that in the future but you can kind of

2591
01:36:26,159 --> 01:36:28,080
think of it like if partial were a

2592
01:36:28,080 --> 01:36:29,440
function you would normally put

2593
01:36:29,440 --> 01:36:31,679
parentheses but because it's a utility

2594
01:36:31,679 --> 01:36:33,440
type and not a function we use angle

2595
01:36:33,440 --> 01:36:36,080
brackets instead and we pass our user

2596
01:36:36,080 --> 01:36:38,520
type in as a you could call it a

2597
01:36:38,520 --> 01:36:40,679
parameter or in this case it's really a

2598
01:36:40,679 --> 01:36:43,480
generic type to this partial and as we

2599
01:36:43,480 --> 01:36:45,520
saw what it does is it takes this user

2600
01:36:45,520 --> 01:36:47,719
in and it returns a new type which we're

2601
01:36:47,719 --> 01:36:49,880
calling updated user and if you go ahead

2602
01:36:49,880 --> 01:36:51,760
and hover your mouse here over updated

2603
01:36:51,760 --> 01:36:54,040
user you will see that it has a type

2604
01:36:54,040 --> 01:36:56,199
already defined for us where all of the

2605
01:36:56,199 --> 01:36:59,000
properties ID username and role are set

2606
01:36:59,000 --> 01:37:01,199
as optional this way when our update

2607
01:37:01,199 --> 01:37:03,719
user function takes an updates object

2608
01:37:03,719 --> 01:37:05,679
and its type is updated user we can

2609
01:37:05,679 --> 01:37:07,560
provide an object that is missing some

2610
01:37:07,560 --> 01:37:09,679
of the properties from a user object

2611
01:37:09,679 --> 01:37:12,000
we've used this partial utility type to

2612
01:37:12,000 --> 01:37:13,880
minimize some of the boilerplate code

2613
01:37:13,880 --> 01:37:15,520
that we would have had to write manually

2614
01:37:15,520 --> 01:37:17,760
ourselves if you take the time to go

2615
01:37:17,760 --> 01:37:19,679
over to the documentation by clicking

2616
01:37:19,679 --> 01:37:21,239
the screenshot you will see that there

2617
01:37:21,239 --> 01:37:23,800
are a ton of built-in utility types tyes

2618
01:37:23,800 --> 01:37:25,760
in typescript and so this might be a

2619
01:37:25,760 --> 01:37:27,520
good time to click this if you didn't

2620
01:37:27,520 --> 01:37:29,679
already just peruse those play around

2621
01:37:29,679 --> 01:37:31,119
with the code that you see here feel

2622
01:37:31,119 --> 01:37:33,040
free to come up with different examples

2623
01:37:33,040 --> 01:37:34,719
we are going to talk about one other

2624
01:37:34,719 --> 01:37:36,600
utility type because it's going to

2625
01:37:36,600 --> 01:37:38,719
directly relate to what we're working on

2626
01:37:38,719 --> 01:37:40,560
with the pizza restaurant app but there

2627
01:37:40,560 --> 01:37:42,119
is a small caveat that we'll need to

2628
01:37:42,119 --> 01:37:43,800
work around we'll talk about that in the

2629
01:37:43,800 --> 01:37:46,040
next

2630
01:37:47,679 --> 01:37:50,599
lesson this lesson's going to be nearly

2631
01:37:50,599 --> 01:37:52,599
identical to the one we had before but

2632
01:37:52,599 --> 01:37:54,320
as another way to to drive forward the

2633
01:37:54,320 --> 01:37:56,520
curriculum in learning a new utility

2634
01:37:56,520 --> 01:37:58,599
type to start off to make sure your

2635
01:37:58,599 --> 01:37:59,800
hands are on the keyboard and that

2636
01:37:59,800 --> 01:38:01,159
you're awake as you're going through

2637
01:38:01,159 --> 01:38:03,080
this course I'm going to have you create

2638
01:38:03,080 --> 01:38:05,440
the logic for a new add new user

2639
01:38:05,440 --> 01:38:07,760
function it's going to take a new user

2640
01:38:07,760 --> 01:38:10,239
object and in this case the new user

2641
01:38:10,239 --> 01:38:12,560
object will not have an ID provided to

2642
01:38:12,560 --> 01:38:14,599
it as you can see in the example usage

2643
01:38:14,599 --> 01:38:16,119
down here it will have all of the

2644
01:38:16,119 --> 01:38:19,119
properties except for ID so for now I've

2645
01:38:19,119 --> 01:38:21,239
typed this as any and the return for

2646
01:38:21,239 --> 01:38:23,040
this function needs to return an actual

2647
01:38:23,040 --> 01:38:25,280
user object that does have an ID read

2648
01:38:25,280 --> 01:38:26,920
through the comments here to see the

2649
01:38:26,920 --> 01:38:28,599
specifics on how to create that it

2650
01:38:28,599 --> 01:38:30,520
basically tells you exactly what to do

2651
01:38:30,520 --> 01:38:32,040
and when you're done the typescript

2652
01:38:32,040 --> 01:38:33,599
errors should go away but then we'll

2653
01:38:33,599 --> 01:38:35,400
address this issue with having an any

2654
01:38:35,400 --> 01:38:37,800
type here also for Simplicity I've added

2655
01:38:37,800 --> 01:38:40,440
this next user ID variable and added it

2656
01:38:40,440 --> 01:38:42,639
to our users array just so that you can

2657
01:38:42,639 --> 01:38:45,119
continue to use next user ID Plus+ like

2658
01:38:45,119 --> 01:38:47,320
we were doing in the Pizza app and I've

2659
01:38:47,320 --> 01:38:49,440
also shortened this users array just so

2660
01:38:49,440 --> 01:38:51,000
that there's not quite as much clutter

2661
01:38:51,000 --> 01:38:52,560
when we're console logging the array of

2662
01:38:52,560 --> 01:38:54,880
users okay you should be set up pause

2663
01:38:54,880 --> 01:38:57,639
now and work on this

2664
01:39:01,119 --> 01:39:03,679
challenge we can pretty much just follow

2665
01:39:03,679 --> 01:39:06,040
these steps exactly as they're said so

2666
01:39:06,040 --> 01:39:08,960
we'll call a new variable user and I'm

2667
01:39:08,960 --> 01:39:11,159
actually going to type this as a capital

2668
01:39:11,159 --> 01:39:13,440
u user the goal is to make sure that it

2669
01:39:13,440 --> 01:39:16,000
conforms to the user object type okay

2670
01:39:16,000 --> 01:39:18,280
this is going to be an object and the

2671
01:39:18,280 --> 01:39:19,800
first thing I'll do is add an ID

2672
01:39:19,800 --> 01:39:22,199
property to it we'll use the next user

2673
01:39:22,199 --> 01:39:25,040
ID Plus+ to get that in there and then

2674
01:39:25,040 --> 01:39:26,679
I'm just going to spread all of the

2675
01:39:26,679 --> 01:39:30,000
properties of new user into this object

2676
01:39:30,000 --> 01:39:32,639
now that I have a new user object or a

2677
01:39:32,639 --> 01:39:34,880
user object that is new let's go ahead

2678
01:39:34,880 --> 01:39:37,840
and push it to the array of users we'll

2679
01:39:37,840 --> 01:39:41,000
say this is users. push user and return

2680
01:39:41,000 --> 01:39:43,679
the user objects okay now the typescript

2681
01:39:43,679 --> 01:39:45,639
warning under user is gone because now

2682
01:39:45,639 --> 01:39:47,679
this function is returning a user as the

2683
01:39:47,679 --> 01:39:49,480
type would indicate it's supposed to

2684
01:39:49,480 --> 01:39:52,000
let's clear out the comments here and do

2685
01:39:52,000 --> 01:39:53,760
just a quick test we're pushing Joe

2686
01:39:53,760 --> 01:39:56,760
Schmo who is a role of member and sure

2687
01:39:56,760 --> 01:39:58,239
enough there he is at the end of our

2688
01:39:58,239 --> 01:40:01,000
users array with I might add the ID of

2689
01:40:01,000 --> 01:40:02,880
three which is what we wanted this might

2690
01:40:02,880 --> 01:40:04,480
be a good time to remind everybody

2691
01:40:04,480 --> 01:40:06,960
watching this that this whole next user

2692
01:40:06,960 --> 01:40:08,760
ID thing that we're doing it's really

2693
01:40:08,760 --> 01:40:10,679
just to drive our curriculum forward

2694
01:40:10,679 --> 01:40:12,679
you're very likely to have your database

2695
01:40:12,679 --> 01:40:15,400
handling the whole ID assigning thing

2696
01:40:15,400 --> 01:40:17,719
okay now let's address this any type

2697
01:40:17,719 --> 01:40:19,679
here we don't really want this to be in

2698
01:40:19,679 --> 01:40:21,920
any type because as it currently stands

2699
01:40:21,920 --> 01:40:23,840
we've disabled typescript checking for

2700
01:40:23,840 --> 01:40:26,440
this and I could just add a blah blah

2701
01:40:26,440 --> 01:40:28,639
category or property to this object and

2702
01:40:28,639 --> 01:40:30,440
typescripts not going to warn us that

2703
01:40:30,440 --> 01:40:32,239
this isn't going to work or rather that

2704
01:40:32,239 --> 01:40:34,400
it could really screw up our code so

2705
01:40:34,400 --> 01:40:36,199
what exactly can we do well we just

2706
01:40:36,199 --> 01:40:37,880
learned about the partial type and it

2707
01:40:37,880 --> 01:40:39,560
might seem at first glance that we could

2708
01:40:39,560 --> 01:40:42,400
make this into a partial of user however

2709
01:40:42,400 --> 01:40:44,080
the problem with the logic here is we

2710
01:40:44,080 --> 01:40:45,920
want to make sure that all of the

2711
01:40:45,920 --> 01:40:48,239
properties exist and with partial it

2712
01:40:48,239 --> 01:40:50,800
turns everything into an optional

2713
01:40:50,800 --> 01:40:52,639
property let me get rid of this blob

2714
01:40:52,639 --> 01:40:54,920
property here if I submit this as a

2715
01:40:54,920 --> 01:40:58,320
partial like this of user and then for

2716
01:40:58,320 --> 01:41:00,239
some reason I don't Supply one of the

2717
01:41:00,239 --> 01:41:02,360
properties here I have a problem I've

2718
01:41:02,360 --> 01:41:03,920
taught this function that it's going to

2719
01:41:03,920 --> 01:41:06,320
return a full user and as you saw even

2720
01:41:06,320 --> 01:41:08,719
before I deleted the RO property here we

2721
01:41:08,719 --> 01:41:10,719
have a warning and it essentially tells

2722
01:41:10,719 --> 01:41:12,239
us that these are not going to be

2723
01:41:12,239 --> 01:41:14,320
compatible that's because we need to

2724
01:41:14,320 --> 01:41:16,880
return a user and our user property

2725
01:41:16,880 --> 01:41:19,719
needs to have up here it's not optional

2726
01:41:19,719 --> 01:41:22,520
to have an ID a username and a role but

2727
01:41:22,520 --> 01:41:24,960
our partial user type here it is

2728
01:41:24,960 --> 01:41:26,679
possible to not have one of those things

2729
01:41:26,679 --> 01:41:28,119
because all of the properties are

2730
01:41:28,119 --> 01:41:30,360
optional okay so partial is not really

2731
01:41:30,360 --> 01:41:32,360
going to work for us there is a way

2732
01:41:32,360 --> 01:41:34,440
clearly that we could make partial work

2733
01:41:34,440 --> 01:41:36,560
but we would have to do a bunch of extra

2734
01:41:36,560 --> 01:41:38,239
checking inside of the body of our

2735
01:41:38,239 --> 01:41:40,360
function and that's not really the road

2736
01:41:40,360 --> 01:41:42,679
that I want to go down enter the omit

2737
01:41:42,679 --> 01:41:45,400
type what does the omit type do well it

2738
01:41:45,400 --> 01:41:47,599
takes in a type just like partial but it

2739
01:41:47,599 --> 01:41:49,639
also takes you could call it a second

2740
01:41:49,639 --> 01:41:51,840
parameter to that utility type which

2741
01:41:51,840 --> 01:41:54,320
will be a string or potentially a union

2742
01:41:54,320 --> 01:41:55,719
of strings we'll see what I'm talking

2743
01:41:55,719 --> 01:41:57,560
about in just a second and those strings

2744
01:41:57,560 --> 01:41:59,639
are the property names that we want to

2745
01:41:59,639 --> 01:42:02,280
Omit from this type it's going to return

2746
01:42:02,280 --> 01:42:04,400
a brand new type with the properties

2747
01:42:04,400 --> 01:42:06,639
that we specified removed it would

2748
01:42:06,639 --> 01:42:08,760
probably be a great idea to go to the

2749
01:42:08,760 --> 01:42:10,719
documentation on the typescript docs you

2750
01:42:10,719 --> 01:42:12,239
can click the screenshot that you see

2751
01:42:12,239 --> 01:42:13,960
here which should take you directly to

2752
01:42:13,960 --> 01:42:16,360
the omit type docs so what does this

2753
01:42:16,360 --> 01:42:18,520
look like for us well often times

2754
01:42:18,520 --> 01:42:20,040
especially if you're only going to be

2755
01:42:20,040 --> 01:42:22,000
using this utility type once in your

2756
01:42:22,000 --> 01:42:24,440
code you can just do it right in line so

2757
01:42:24,440 --> 01:42:27,239
I can use capital O omit a set of angle

2758
01:42:27,239 --> 01:42:29,679
brackets and I first need to provide as

2759
01:42:29,679 --> 01:42:31,800
the first parameter you could say the

2760
01:42:31,800 --> 01:42:33,560
user type or the type that I'm trying to

2761
01:42:33,560 --> 01:42:35,599
modify and then just like in function

2762
01:42:35,599 --> 01:42:37,560
parameters I'm going to add a second

2763
01:42:37,560 --> 01:42:39,560
parameter here and that is going to be a

2764
01:42:39,560 --> 01:42:41,719
string of the properties that I want to

2765
01:42:41,719 --> 01:42:44,679
Omit from the user type so that the type

2766
01:42:44,679 --> 01:42:47,719
that omit returns will not have the ID

2767
01:42:47,719 --> 01:42:49,960
property in it okay why is typescript

2768
01:42:49,960 --> 01:42:52,480
warning us about capital O omit well we

2769
01:42:52,480 --> 01:42:54,840
come to another point of some irony the

2770
01:42:54,840 --> 01:42:57,239
omit utility type is currently omitted

2771
01:42:57,239 --> 01:42:59,440
by scrimba well more specifically in

2772
01:42:59,440 --> 01:43:01,000
reality it's just that omit was

2773
01:43:01,000 --> 01:43:03,280
introduced in typescript version 3.5

2774
01:43:03,280 --> 01:43:05,280
scrimba is currently running on an older

2775
01:43:05,280 --> 01:43:07,360
version that doesn't yet know what omit

2776
01:43:07,360 --> 01:43:09,400
is in the future I'm going to be able to

2777
01:43:09,400 --> 01:43:11,639
remove this whole caveat but for now I'm

2778
01:43:11,639 --> 01:43:13,400
just going to show you a screenshot of

2779
01:43:13,400 --> 01:43:15,400
what it should look like so we have our

2780
01:43:15,400 --> 01:43:17,760
code exactly like we see here and notice

2781
01:43:17,760 --> 01:43:19,599
that typescript is not warning us about

2782
01:43:19,599 --> 01:43:21,239
anything I guess as a reminder

2783
01:43:21,239 --> 01:43:23,080
typescript doesn't stop us from running

2784
01:43:23,080 --> 01:43:24,639
running our code there are ways to set

2785
01:43:24,639 --> 01:43:26,920
it up to do so but I can hit save I can

2786
01:43:26,920 --> 01:43:29,599
open my console we can see that our joeo

2787
01:43:29,599 --> 01:43:31,880
user has been successfully added to our

2788
01:43:31,880 --> 01:43:33,840
array but let's look at what it's

2789
01:43:33,840 --> 01:43:35,679
supposed to look like if I were to for

2790
01:43:35,679 --> 01:43:37,880
example comment out the ID property we

2791
01:43:37,880 --> 01:43:39,639
can see that we have an error on the

2792
01:43:39,639 --> 01:43:41,960
user object if we hover our Mouse over

2793
01:43:41,960 --> 01:43:44,199
it we can see that the property ID is

2794
01:43:44,199 --> 01:43:46,159
missing that's exactly what we would

2795
01:43:46,159 --> 01:43:48,119
expect now I don't have a screenshot of

2796
01:43:48,119 --> 01:43:50,080
this but if we were to take away one of

2797
01:43:50,080 --> 01:43:51,840
the properties when we're calling add

2798
01:43:51,840 --> 01:43:53,880
new user we would also get a typescript

2799
01:43:53,880 --> 01:43:55,480
warning that tells us that we're not

2800
01:43:55,480 --> 01:43:57,440
providing the correct type to our add

2801
01:43:57,440 --> 01:43:59,560
new user function it's going to have all

2802
01:43:59,560 --> 01:44:02,239
of the properties of user just minus the

2803
01:44:02,239 --> 01:44:04,520
ID property that way our function can be

2804
01:44:04,520 --> 01:44:06,800
in charge of creating the ID for our

2805
01:44:06,800 --> 01:44:09,199
user object really quick I did mention

2806
01:44:09,199 --> 01:44:11,119
that you can provide either a single

2807
01:44:11,119 --> 01:44:13,880
string or a union of strings if for some

2808
01:44:13,880 --> 01:44:16,960
reason I wanted to Omit both the ID and

2809
01:44:16,960 --> 01:44:19,199
the username I would use a union

2810
01:44:19,199 --> 01:44:21,159
character which is the single pipe and I

2811
01:44:21,159 --> 01:44:23,520
would do another string literal of user

2812
01:44:23,520 --> 01:44:25,719
which tells it that I don't want this

2813
01:44:25,719 --> 01:44:27,800
new type that omit is creating to

2814
01:44:27,800 --> 01:44:30,880
contain either the ID or the user in our

2815
01:44:30,880 --> 01:44:32,719
case that means it would just be an

2816
01:44:32,719 --> 01:44:35,480
object with a ro property again

2817
01:44:35,480 --> 01:44:37,440
typescript would be warning us here but

2818
01:44:37,440 --> 01:44:39,000
because it's not currently recognized by

2819
01:44:39,000 --> 01:44:40,560
scrimba it's not giving me any other

2820
01:44:40,560 --> 01:44:42,360
warnings okay it's time for us to get

2821
01:44:42,360 --> 01:44:44,040
back to our Pizza app and apply what

2822
01:44:44,040 --> 01:44:47,080
we've learned specifically about omit so

2823
01:44:47,080 --> 01:44:49,679
that's what we'll do

2824
01:44:51,199 --> 01:44:53,679
next let's apply what we just learned

2825
01:44:53,679 --> 01:44:56,239
about omit to our pizza restaurant app

2826
01:44:56,239 --> 01:44:58,480
specifically the add new pizza function

2827
01:44:58,480 --> 01:45:00,480
your task is to fix it so that we use

2828
01:45:00,480 --> 01:45:02,800
the omit utility type just like we did

2829
01:45:02,800 --> 01:45:04,760
in the previous lesson we want the user

2830
01:45:04,760 --> 01:45:06,920
of this function to provide a pizza

2831
01:45:06,920 --> 01:45:09,199
object that does have a name and a price

2832
01:45:09,199 --> 01:45:10,719
we don't want those to be optional

2833
01:45:10,719 --> 01:45:12,320
because we need that information in our

2834
01:45:12,320 --> 01:45:14,480
menu but the add new pizza function will

2835
01:45:14,480 --> 01:45:17,080
be in charge of adding the ID to it

2836
01:45:17,080 --> 01:45:18,520
while we're at it let's go ahead and

2837
01:45:18,520 --> 01:45:20,760
change this function so that it Returns

2838
01:45:20,760 --> 01:45:23,080
the new pizza object instead of void I'm

2839
01:45:23,080 --> 01:45:25,400
just going to add that here to the

2840
01:45:25,400 --> 01:45:27,599
requirements okay so make sure that you

2841
01:45:27,599 --> 01:45:29,560
return the new pizza object with the ID

2842
01:45:29,560 --> 01:45:31,159
added from the function which means

2843
01:45:31,159 --> 01:45:32,599
you'll have to change the types here as

2844
01:45:32,599 --> 01:45:34,400
well as a quick reminder at the time of

2845
01:45:34,400 --> 01:45:36,360
recording this the scribit environment

2846
01:45:36,360 --> 01:45:38,760
doesn't understand the omit utility type

2847
01:45:38,760 --> 01:45:40,599
so you will get a little red squiggly

2848
01:45:40,599 --> 01:45:42,840
under the word omit but you can safely

2849
01:45:42,840 --> 01:45:44,840
ignore that and essentially any other

2850
01:45:44,840 --> 01:45:46,599
typescript warnings you see here in the

2851
01:45:46,599 --> 01:45:48,719
very near future scribo will know about

2852
01:45:48,719 --> 01:45:50,880
omit so I'll be able to just remove this

2853
01:45:50,880 --> 01:45:53,119
caveat the time is yours pause now and

2854
01:45:53,119 --> 01:45:55,360
on this

2855
01:45:58,840 --> 01:46:01,080
challenge again the reason we want to

2856
01:46:01,080 --> 01:46:03,840
use omit and not partial is because we

2857
01:46:03,840 --> 01:46:06,480
want to require that the person submit a

2858
01:46:06,480 --> 01:46:08,400
pizza object with all of the other

2859
01:46:08,400 --> 01:46:11,159
information except for this one property

2860
01:46:11,159 --> 01:46:13,239
of course with omit you can omit more

2861
01:46:13,239 --> 01:46:15,239
than one property but in our case we

2862
01:46:15,239 --> 01:46:18,639
just want to Omit from the pizza type we

2863
01:46:18,639 --> 01:46:21,440
want to omit the ID property like that

2864
01:46:21,440 --> 01:46:23,400
and while we're up on this line we

2865
01:46:23,400 --> 01:46:25,440
decided we're going to return a full

2866
01:46:25,440 --> 01:46:27,440
Pizza object from this function

2867
01:46:27,440 --> 01:46:28,760
currently we're not doing that so

2868
01:46:28,760 --> 01:46:31,119
typescript is warning us now we have an

2869
01:46:31,119 --> 01:46:32,599
issue with the way that our code

2870
01:46:32,599 --> 01:46:34,719
currently is set up because we just told

2871
01:46:34,719 --> 01:46:37,080
typescript that this pizza object will

2872
01:46:37,080 --> 01:46:39,280
have all of the properties of pizza but

2873
01:46:39,280 --> 01:46:41,760
not the ID property in other words it's

2874
01:46:41,760 --> 01:46:44,159
going to have a name and a price and

2875
01:46:44,159 --> 01:46:46,280
then we're trying to add an ID property

2876
01:46:46,280 --> 01:46:48,360
on top of it well we can't do that so

2877
01:46:48,360 --> 01:46:50,400
let's go ahead and create a new pizza

2878
01:46:50,400 --> 01:46:52,560
object we'll call this new pizza we're

2879
01:46:52,560 --> 01:46:54,679
going to to type it as a full Pizza

2880
01:46:54,679 --> 01:46:57,080
object and we'll set it equal to an

2881
01:46:57,080 --> 01:46:59,320
object we'll give it an ID property

2882
01:46:59,320 --> 01:47:02,199
we'll use the next Pizza ID and then add

2883
01:47:02,199 --> 01:47:04,239
the Plus+ for the next time around and

2884
01:47:04,239 --> 01:47:06,119
then we'll spread in all of the

2885
01:47:06,119 --> 01:47:08,800
properties of pizza object we'll get rid

2886
01:47:08,800 --> 01:47:11,360
of this line of code and instead of

2887
01:47:11,360 --> 01:47:13,800
pushing Pizza object we will push new

2888
01:47:13,800 --> 01:47:16,080
pizza I can hardly believe how many

2889
01:47:16,080 --> 01:47:18,000
times I've said the word pizza and then

2890
01:47:18,000 --> 01:47:20,000
as we described up above we need to make

2891
01:47:20,000 --> 01:47:23,040
sure we return the new pizza object

2892
01:47:23,040 --> 01:47:25,560
let's hit save and we are adding a few

2893
01:47:25,560 --> 01:47:27,760
new pizzas up here we're console logging

2894
01:47:27,760 --> 01:47:29,960
the menu and sure enough we have the

2895
01:47:29,960 --> 01:47:31,679
chicken bacon ranch the barbecue chicken

2896
01:47:31,679 --> 01:47:33,920
and the spicy sausage pizzas added for

2897
01:47:33,920 --> 01:47:35,800
the time being while scrimba doesn't

2898
01:47:35,800 --> 01:47:38,119
understand the omit utility type I have

2899
01:47:38,119 --> 01:47:39,960
a couple screenshots here so this is

2900
01:47:39,960 --> 01:47:42,320
from VSS code we can see when we add the

2901
01:47:42,320 --> 01:47:44,800
omit Pizza type up above typescript is

2902
01:47:44,800 --> 01:47:46,560
happy with everything the exact way that

2903
01:47:46,560 --> 01:47:49,080
it is if we comment out ID then

2904
01:47:49,080 --> 01:47:51,040
typescript isn't happy if you hover over

2905
01:47:51,040 --> 01:47:52,880
new pizza it tells you that you're not

2906
01:47:52,880 --> 01:47:55,159
allowed to push this object to the menu

2907
01:47:55,159 --> 01:47:57,639
because menu requires Pizza objects and

2908
01:47:57,639 --> 01:47:59,159
this object that you're trying to push

2909
01:47:59,159 --> 01:48:01,440
does not have an ID so let's go ahead

2910
01:48:01,440 --> 01:48:03,080
and put that back in similarly if we

2911
01:48:03,080 --> 01:48:05,239
were to come down and say remove the

2912
01:48:05,239 --> 01:48:07,080
price from this first pizza that we're

2913
01:48:07,080 --> 01:48:09,320
adding we get a typescript warning that

2914
01:48:09,320 --> 01:48:11,080
is a little bit cluttered here but

2915
01:48:11,080 --> 01:48:13,000
essentially tells you that the property

2916
01:48:13,000 --> 01:48:15,159
price is missing now for the sake of

2917
01:48:15,159 --> 01:48:17,119
this course I've decided that it isn't

2918
01:48:17,119 --> 01:48:19,280
my objective to teach every single

2919
01:48:19,280 --> 01:48:21,440
utility type that exists because the

2920
01:48:21,440 --> 01:48:23,800
documentation is very straightforward if

2921
01:48:23,800 --> 01:48:25,880
you want to peruse and see the different

2922
01:48:25,880 --> 01:48:27,800
types that there are again you can click

2923
01:48:27,800 --> 01:48:29,520
this link this will specifically take

2924
01:48:29,520 --> 01:48:31,440
you to the omit type but it's all one

2925
01:48:31,440 --> 01:48:33,400
long page in the typescript docks so you

2926
01:48:33,400 --> 01:48:34,960
can scroll around and see all of the

2927
01:48:34,960 --> 01:48:36,679
different types there but hopefully the

2928
01:48:36,679 --> 01:48:38,440
idea is starting to be clear these

2929
01:48:38,440 --> 01:48:40,520
utility types perform really common

2930
01:48:40,520 --> 01:48:42,920
operations on your existing types so

2931
01:48:42,920 --> 01:48:44,560
that you don't have to do this work by

2932
01:48:44,560 --> 01:48:46,400
yourself and introduce a bunch of

2933
01:48:46,400 --> 01:48:48,440
repetitive code now I did promise

2934
01:48:48,440 --> 01:48:50,480
earlier that we would address this issue

2935
01:48:50,480 --> 01:48:52,480
here where we have these angle brackets

2936
01:48:52,480 --> 01:48:54,159
and I think this would be as good a time

2937
01:48:54,159 --> 01:48:56,000
as any to jump into that which is a

2938
01:48:56,000 --> 01:48:57,840
topic called generics so that's what

2939
01:48:57,840 --> 01:49:00,679
we'll be learning about

2940
01:49:02,199 --> 01:49:05,080
next I've mentioned this term generics a

2941
01:49:05,080 --> 01:49:06,880
couple times throughout this course and

2942
01:49:06,880 --> 01:49:08,639
so it's finally time for us to learn

2943
01:49:08,639 --> 01:49:10,520
what generics are generics and

2944
01:49:10,520 --> 01:49:12,639
typescript are a really powerful tool

2945
01:49:12,639 --> 01:49:15,360
that allow us to add some flexibility to

2946
01:49:15,360 --> 01:49:18,400
the types of our existing functions are

2947
01:49:18,400 --> 01:49:20,639
already existing types and other aspects

2948
01:49:20,639 --> 01:49:23,000
of typescript code you can kind of think

2949
01:49:23,000 --> 01:49:24,840
of it like a function parameter a

2950
01:49:24,840 --> 01:49:26,960
function parameter is a placeholder for

2951
01:49:26,960 --> 01:49:28,960
a real value that you use throughout

2952
01:49:28,960 --> 01:49:31,520
your function and a generic is a

2953
01:49:31,520 --> 01:49:33,880
placeholder for a type that you can use

2954
01:49:33,880 --> 01:49:35,760
throughout your function or whatever

2955
01:49:35,760 --> 01:49:37,159
aspect of typescript you're using your

2956
01:49:37,159 --> 01:49:39,119
genericon this will make a lot more

2957
01:49:39,119 --> 01:49:40,719
sense when we see an example and

2958
01:49:40,719 --> 01:49:42,800
generics use this bracket syntax with

2959
01:49:42,800 --> 01:49:44,560
the angle brackets that we've seen a few

2960
01:49:44,560 --> 01:49:46,719
times already in our code let's see a

2961
01:49:46,719 --> 01:49:48,800
bit of a contrived example here and then

2962
01:49:48,800 --> 01:49:50,639
we'll apply what we've learned to our

2963
01:49:50,639 --> 01:49:52,360
pizza restaurant app let's say we have a

2964
01:49:52,360 --> 01:49:54,239
few different arrays like we have on

2965
01:49:54,239 --> 01:49:56,480
lines 1 2 and 3 and we want to create a

2966
01:49:56,480 --> 01:49:58,239
really simple utility function that's

2967
01:49:58,239 --> 01:50:00,679
called get last item it takes an array

2968
01:50:00,679 --> 01:50:02,800
as a parameter and since this isn't

2969
01:50:02,800 --> 01:50:04,480
really part of this challenge I'm just

2970
01:50:04,480 --> 01:50:06,599
going to say in order to access the last

2971
01:50:06,599 --> 01:50:08,520
item of an array in JavaScript we can

2972
01:50:08,520 --> 01:50:11,480
just return the array at the index of

2973
01:50:11,480 --> 01:50:13,520
array. length

2974
01:50:13,520 --> 01:50:15,560
minus1 Okay we can see there's a red

2975
01:50:15,560 --> 01:50:17,800
squiggly here for array hover your mouse

2976
01:50:17,800 --> 01:50:19,679
over the word array and you'll see that

2977
01:50:19,679 --> 01:50:22,280
it says the parameter array implicitly

2978
01:50:22,280 --> 01:50:24,639
has an any type typescript doesn't like

2979
01:50:24,639 --> 01:50:26,760
when we have implicit any types and so

2980
01:50:26,760 --> 01:50:28,639
one cheater solution could be to

2981
01:50:28,639 --> 01:50:30,960
explicitly type this as an any type and

2982
01:50:30,960 --> 01:50:32,440
of course that makes the typescript

2983
01:50:32,440 --> 01:50:34,400
warning go away but again that's because

2984
01:50:34,400 --> 01:50:36,440
the any type basically turns off

2985
01:50:36,440 --> 01:50:38,400
typescript this isn't exactly what we

2986
01:50:38,400 --> 01:50:40,679
want the problem is we can't say that

2987
01:50:40,679 --> 01:50:43,880
this is an array of strings or an array

2988
01:50:43,880 --> 01:50:46,719
of numbers because we don't know that it

2989
01:50:46,719 --> 01:50:49,639
could be an array of any item okay well

2990
01:50:49,639 --> 01:50:51,800
what are we to do then this is where

2991
01:50:51,800 --> 01:50:53,599
generics come in into play as I

2992
01:50:53,599 --> 01:50:55,639
mentioned just like a function has

2993
01:50:55,639 --> 01:50:57,400
parameters that are placeholders for

2994
01:50:57,400 --> 01:51:00,119
values generics are a way for us to have

2995
01:51:00,119 --> 01:51:02,239
placeholders for whatever a type is

2996
01:51:02,239 --> 01:51:04,159
going to be okay let's check out the

2997
01:51:04,159 --> 01:51:06,199
Syntax for generics when we're using it

2998
01:51:06,199 --> 01:51:08,119
in a function like we're doing here

2999
01:51:08,119 --> 01:51:10,520
right before our parentheses with our

3000
01:51:10,520 --> 01:51:12,320
function parameters we're going to put

3001
01:51:12,320 --> 01:51:15,000
in our angle brackets and inside those

3002
01:51:15,000 --> 01:51:16,920
angle brackets similar to how we're

3003
01:51:16,920 --> 01:51:18,520
doing with the function parameters

3004
01:51:18,520 --> 01:51:20,159
inside the parenthesis we're going to

3005
01:51:20,159 --> 01:51:22,360
put a placeholder for whatever type is

3006
01:51:22,360 --> 01:51:23,800
going going to be used with this

3007
01:51:23,800 --> 01:51:26,000
function a fairly strong convention for

3008
01:51:26,000 --> 01:51:28,079
this is to use the capital letter T to

3009
01:51:28,079 --> 01:51:30,159
represent type but just to make sure

3010
01:51:30,159 --> 01:51:31,679
that we're being explicit I'm going to

3011
01:51:31,679 --> 01:51:34,119
use the full word type with a capital T

3012
01:51:34,119 --> 01:51:36,119
again this is a placeholder type the

3013
01:51:36,119 --> 01:51:39,000
capital T type here is not referring to

3014
01:51:39,000 --> 01:51:40,920
something that's built into typescript

3015
01:51:40,920 --> 01:51:43,079
this is a name that I chose I could have

3016
01:51:43,079 --> 01:51:45,760
just as easily chosen blah blah blah but

3017
01:51:45,760 --> 01:51:48,119
let's not do that okay well what can I

3018
01:51:48,119 --> 01:51:50,280
do with this now well just like in a

3019
01:51:50,280 --> 01:51:52,560
function I can use the parameter through

3020
01:51:52,560 --> 01:51:54,199
throughout the code to represent

3021
01:51:54,199 --> 01:51:56,480
whatever value array represents when

3022
01:51:56,480 --> 01:51:58,719
this function gets called I can use my

3023
01:51:58,719 --> 01:52:01,800
generic type here to say the array is

3024
01:52:01,800 --> 01:52:04,840
going to be of type capital T type and

3025
01:52:04,840 --> 01:52:07,079
it's going to be an array of that type

3026
01:52:07,079 --> 01:52:09,040
we've used the word type quite a bit

3027
01:52:09,040 --> 01:52:11,119
here I think it actually might be useful

3028
01:52:11,119 --> 01:52:13,000
for us to call this something totally

3029
01:52:13,000 --> 01:52:15,000
different like let's call it placeholder

3030
01:52:15,000 --> 01:52:16,360
and actually I'm going to call it

3031
01:52:16,360 --> 01:52:18,679
placeholder type because truly it

3032
01:52:18,679 --> 01:52:20,800
doesn't matter what it is just like the

3033
01:52:20,800 --> 01:52:23,400
name of your variable doesn't matter

3034
01:52:23,400 --> 01:52:25,000
what it is you can call it whatever you

3035
01:52:25,000 --> 01:52:26,360
want as long as you're consistent

3036
01:52:26,360 --> 01:52:28,239
throughout your code okay great let's

3037
01:52:28,239 --> 01:52:29,760
get your hands on the keyboard this is

3038
01:52:29,760 --> 01:52:32,079
going to be very simple with more like a

3039
01:52:32,079 --> 01:52:34,840
mini challenge than anything this mini

3040
01:52:34,840 --> 01:52:36,719
challenge is less about solving the

3041
01:52:36,719 --> 01:52:38,560
issue and more about seeing what the

3042
01:52:38,560 --> 01:52:40,520
intellisense popups are when you hover

3043
01:52:40,520 --> 01:52:42,679
over the different values so call get

3044
01:52:42,679 --> 01:52:45,480
last item on each of the three arrays

3045
01:52:45,480 --> 01:52:47,760
that we have on lines 1 2 and 3 you'll

3046
01:52:47,760 --> 01:52:49,320
probably want to console log The

3047
01:52:49,320 --> 01:52:50,719
Returned value just so that something

3048
01:52:50,719 --> 01:52:52,520
shows up in your console and then the

3049
01:52:52,520 --> 01:52:53,800
main thing I want you to focus on is

3050
01:52:53,800 --> 01:52:55,159
hovering your mouse over different

3051
01:52:55,159 --> 01:52:57,159
values in the code just to see what the

3052
01:52:57,159 --> 01:52:59,280
intellisense popup shows so that you can

3053
01:52:59,280 --> 01:53:00,840
get a better idea of what's going on

3054
01:53:00,840 --> 01:53:02,800
with generics pause now and work on this

3055
01:53:02,800 --> 01:53:05,079
mini

3056
01:53:08,639 --> 01:53:12,440
challenge okay so let's get our console

3057
01:53:12,440 --> 01:53:14,679
logs in here we'll just do three of them

3058
01:53:14,679 --> 01:53:16,480
I'm going to use multiple cursors to

3059
01:53:16,480 --> 01:53:18,880
save some time we'll call get last item

3060
01:53:18,880 --> 01:53:21,599
and then we will put in our three

3061
01:53:21,599 --> 01:53:24,520
different raise okay we'll hit save just

3062
01:53:24,520 --> 01:53:26,119
to make sure that's working the way we

3063
01:53:26,119 --> 01:53:28,159
expect great we don't actually need to

3064
01:53:28,159 --> 01:53:29,800
see the values right now but let's hover

3065
01:53:29,800 --> 01:53:32,480
our Mouse over maybe game scores first

3066
01:53:32,480 --> 01:53:34,639
okay we can see that it is typed as an

3067
01:53:34,639 --> 01:53:36,480
array of numbers that's a type that was

3068
01:53:36,480 --> 01:53:38,520
inferred by typescript because of course

3069
01:53:38,520 --> 01:53:40,560
we didn't explicitly type it as an array

3070
01:53:40,560 --> 01:53:42,480
of numbers we can see the same thing

3071
01:53:42,480 --> 01:53:44,079
with favorite things it's an array of

3072
01:53:44,079 --> 01:53:46,480
strings and with voters it's an array of

3073
01:53:46,480 --> 01:53:48,520
object literals okay now let's hover

3074
01:53:48,520 --> 01:53:50,920
over get last item for this first call

3075
01:53:50,920 --> 01:53:52,719
with game scores it shows that that it's

3076
01:53:52,719 --> 01:53:54,920
a function called get less item and as

3077
01:53:54,920 --> 01:53:57,159
its type inside of the angle brackets it

3078
01:53:57,159 --> 01:53:59,360
shows number and then it used that

3079
01:53:59,360 --> 01:54:02,000
number type to infer that array the

3080
01:54:02,000 --> 01:54:04,960
parameter array is an array of numbers

3081
01:54:04,960 --> 01:54:06,639
it also inferred that it's going to be

3082
01:54:06,639 --> 01:54:08,400
returning a number as well which we

3083
01:54:08,400 --> 01:54:10,040
didn't explicitly place here we'll do

3084
01:54:10,040 --> 01:54:11,800
that in just a second but if we hover

3085
01:54:11,800 --> 01:54:13,840
over this second get last item we'll see

3086
01:54:13,840 --> 01:54:15,880
it does the same thing but with strings

3087
01:54:15,880 --> 01:54:17,400
and on the third one it does the same

3088
01:54:17,400 --> 01:54:19,280
thing but with that object literal with

3089
01:54:19,280 --> 01:54:21,320
a name property and an age property

3090
01:54:21,320 --> 01:54:23,880
doing this allows us to write types and

3091
01:54:23,880 --> 01:54:26,079
in this case functions that can be a lot

3092
01:54:26,079 --> 01:54:28,480
more flexible and still have some type

3093
01:54:28,480 --> 01:54:30,920
safety without us using that any type

3094
01:54:30,920 --> 01:54:32,560
which just turns type safety off

3095
01:54:32,560 --> 01:54:34,440
completely now this is bothering me a

3096
01:54:34,440 --> 01:54:36,320
little bit that it says placeholder type

3097
01:54:36,320 --> 01:54:39,239
I'm going to go back to say type and

3098
01:54:39,239 --> 01:54:41,400
again a really strong convention is just

3099
01:54:41,400 --> 01:54:43,880
to use the letter T and other single

3100
01:54:43,880 --> 01:54:45,679
letter variables which is kind of funny

3101
01:54:45,679 --> 01:54:46,880
now that I think about it because we

3102
01:54:46,880 --> 01:54:49,079
tend to tell people not to use single

3103
01:54:49,079 --> 01:54:51,079
letter variables for things if you want

3104
01:54:51,079 --> 01:54:53,320
to dive a little bit deeper into

3105
01:54:53,320 --> 01:54:55,400
generics there is quite a bit more than

3106
01:54:55,400 --> 01:54:57,360
what we covered in this lesson and

3107
01:54:57,360 --> 01:54:59,000
frankly more than we're going to cover

3108
01:54:59,000 --> 01:55:00,599
in this introduction to typescript

3109
01:55:00,599 --> 01:55:01,920
course but you can click on the

3110
01:55:01,920 --> 01:55:03,800
screenshot here to go directly to the

3111
01:55:03,800 --> 01:55:05,560
typescript docs and it will show you

3112
01:55:05,560 --> 01:55:07,040
some additional examples there that

3113
01:55:07,040 --> 01:55:09,079
might help solidify the concept in your

3114
01:55:09,079 --> 01:55:11,000
mind okay now I mentioned that if you

3115
01:55:11,000 --> 01:55:12,800
hover your mouse here it says that it

3116
01:55:12,800 --> 01:55:15,079
inferred the return type as a number but

3117
01:55:15,079 --> 01:55:17,480
we can also do that explicitly however I

3118
01:55:17,480 --> 01:55:19,400
want this to be a challenge even though

3119
01:55:19,400 --> 01:55:21,840
I haven't really taught it to you yet

3120
01:55:21,840 --> 01:55:23,719
this will hearken back to when we talked

3121
01:55:23,719 --> 01:55:25,880
about explicitly typing function return

3122
01:55:25,880 --> 01:55:28,440
values but with a little extra twist as

3123
01:55:28,440 --> 01:55:30,639
we are using generics as our type pause

3124
01:55:30,639 --> 01:55:32,520
now and see if you can figure out how to

3125
01:55:32,520 --> 01:55:36,440
explicitly type the return value of this

3126
01:55:39,840 --> 01:55:42,320
function in any other kind of function

3127
01:55:42,320 --> 01:55:45,040
we put a colon after the parentheses of

3128
01:55:45,040 --> 01:55:47,599
our function definition and we specify

3129
01:55:47,599 --> 01:55:49,520
that this for example would be a number

3130
01:55:49,520 --> 01:55:51,119
or something like that in our case

3131
01:55:51,119 --> 01:55:52,960
though because our function needs to be

3132
01:55:52,960 --> 01:55:55,679
more generic than just using numbers we

3133
01:55:55,679 --> 01:55:57,960
can use that placeholder type generic

3134
01:55:57,960 --> 01:56:00,440
type here as our return value it's going

3135
01:56:00,440 --> 01:56:03,199
to be a single item of whatever type

3136
01:56:03,199 --> 01:56:04,800
this function is currently using when

3137
01:56:04,800 --> 01:56:06,440
it's being called now if we're really

3138
01:56:06,440 --> 01:56:08,639
covering our bases we might also want to

3139
01:56:08,639 --> 01:56:10,280
ensure that we know this could

3140
01:56:10,280 --> 01:56:12,079
potentially be undefined as long as we

3141
01:56:12,079 --> 01:56:14,040
spell undefined correctly and that might

3142
01:56:14,040 --> 01:56:16,040
happen if we have an array of length

3143
01:56:16,040 --> 01:56:18,599
zero all right nice work let's move on

3144
01:56:18,599 --> 01:56:21,000
to the pizza restaurant app and see how

3145
01:56:21,000 --> 01:56:22,760
we might apply something like this to

3146
01:56:22,760 --> 01:56:25,000
that

3147
01:56:26,400 --> 01:56:28,719
app the challenge that we're going to do

3148
01:56:28,719 --> 01:56:31,199
in this lesson is purely going to be for

3149
01:56:31,199 --> 01:56:33,119
practices sake I had to make a few

3150
01:56:33,119 --> 01:56:34,960
changes to other parts of our code so

3151
01:56:34,960 --> 01:56:37,440
that this very generic add to array

3152
01:56:37,440 --> 01:56:39,560
function would work for our purposes in

3153
01:56:39,560 --> 01:56:41,280
learning generics so once we've

3154
01:56:41,280 --> 01:56:43,000
completed this challenge we're going to

3155
01:56:43,000 --> 01:56:45,119
revert back to the old code we can just

3156
01:56:45,119 --> 01:56:47,040
think of it as a refactor that's gone

3157
01:56:47,040 --> 01:56:49,320
wrong I know the Syntax for generics can

3158
01:56:49,320 --> 01:56:51,239
be quite a bit confusing so I wanted to

3159
01:56:51,239 --> 01:56:52,520
make sure you got your hands on the

3160
01:56:52,520 --> 01:56:54,560
keyboard again to type this out your

3161
01:56:54,560 --> 01:56:57,079
challenge is to add types to this add to

3162
01:56:57,079 --> 01:56:59,119
array function as you can see from the

3163
01:56:59,119 --> 01:57:01,639
example usage it's essentially replacing

3164
01:57:01,639 --> 01:57:03,679
what we had before with add new pizza

3165
01:57:03,679 --> 01:57:05,679
and place order this is primarily where

3166
01:57:05,679 --> 01:57:07,719
I made the changes to our old code which

3167
01:57:07,719 --> 01:57:10,239
was using the omit utility type now

3168
01:57:10,239 --> 01:57:12,560
we're just going to call add to array

3169
01:57:12,560 --> 01:57:14,440
we'll provide the array that we want to

3170
01:57:14,440 --> 01:57:16,119
add to and then the object that we want

3171
01:57:16,119 --> 01:57:18,239
to add to that array once you've added

3172
01:57:18,239 --> 01:57:20,239
the generic types to this function the

3173
01:57:20,239 --> 01:57:22,199
red squigglies under array and item

3174
01:57:22,199 --> 01:57:24,400
should go away and you should be able to

3175
01:57:24,400 --> 01:57:26,400
console log our menu and our order queue

3176
01:57:26,400 --> 01:57:28,719
and see these new items added to those

3177
01:57:28,719 --> 01:57:30,159
and actually that reminds me I'm going

3178
01:57:30,159 --> 01:57:32,159
to get rid of these so we don't have any

3179
01:57:32,159 --> 01:57:34,760
duplicates and yeah okay pause now and

3180
01:57:34,760 --> 01:57:37,239
work on this

3181
01:57:40,760 --> 01:57:43,000
challenge when we're adding generics to

3182
01:57:43,000 --> 01:57:45,040
a function right before the parenthesis

3183
01:57:45,040 --> 01:57:47,199
we will add our angle brackets and we'll

3184
01:57:47,199 --> 01:57:49,320
put our generic type this time I am

3185
01:57:49,320 --> 01:57:51,360
going to use the single letter T because

3186
01:57:51,360 --> 01:57:52,960
that does tend to be a pretty strong

3187
01:57:52,960 --> 01:57:54,679
convention that you'll see with our

3188
01:57:54,679 --> 01:57:56,840
array we're going to assume that it is

3189
01:57:56,840 --> 01:57:59,679
an array of type T whatever that is in

3190
01:57:59,679 --> 01:58:01,960
our case it's either going to be a pizza

3191
01:58:01,960 --> 01:58:03,960
object type or an order object type

3192
01:58:03,960 --> 01:58:05,920
which we have right up here at the top

3193
01:58:05,920 --> 01:58:08,960
and item is going to be a single item of

3194
01:58:08,960 --> 01:58:11,119
that same type maybe you can see why I'm

3195
01:58:11,119 --> 01:58:13,000
saying this gets a bit confusing because

3196
01:58:13,000 --> 01:58:14,760
we have a bunch of new characters that

3197
01:58:14,760 --> 01:58:16,560
usually we don't see in the middle of

3198
01:58:16,560 --> 01:58:18,560
JavaScript functions and here we can see

3199
01:58:18,560 --> 01:58:20,920
the code says we're returning an array I

3200
01:58:20,920 --> 01:58:23,320
suppose that will just be the new array

3201
01:58:23,320 --> 01:58:25,320
after it's been modified and so if we

3202
01:58:25,320 --> 01:58:27,679
hover over add to array we can see that

3203
01:58:27,679 --> 01:58:29,560
typescript is already inferring what it

3204
01:58:29,560 --> 01:58:31,400
will return but if we want to be

3205
01:58:31,400 --> 01:58:33,320
explicit we can say it's going to return

3206
01:58:33,320 --> 01:58:36,119
an array of type T let's go ahead and

3207
01:58:36,119 --> 01:58:39,199
console log our menu and we'll do the

3208
01:58:39,199 --> 01:58:41,599
same thing for the order que and let's

3209
01:58:41,599 --> 01:58:43,840
see what shows up okay it's a little

3210
01:58:43,840 --> 01:58:45,440
hard to parse but the first one that

3211
01:58:45,440 --> 01:58:47,239
shows up in the console shows that

3212
01:58:47,239 --> 01:58:49,360
chicken bacon ranch was added as an

3213
01:58:49,360 --> 01:58:51,800
option on our menu and our order CU has

3214
01:58:51,800 --> 01:58:54,199
just one item in it that is the one with

3215
01:58:54,199 --> 01:58:57,239
the pizza from the menu at index 2 let's

3216
01:58:57,239 --> 01:58:59,679
see that is our Hawaiian perfect we can

3217
01:58:59,679 --> 01:59:01,920
see that the generic add to array

3218
01:59:01,920 --> 01:59:03,800
function is correctly passing this type

3219
01:59:03,800 --> 01:59:06,360
on if we do something like trying to add

3220
01:59:06,360 --> 01:59:09,159
another random property to this we will

3221
01:59:09,159 --> 01:59:11,079
get warned and it says that the object

3222
01:59:11,079 --> 01:59:12,719
literal can only specify known

3223
01:59:12,719 --> 01:59:14,840
properties and the property blah does

3224
01:59:14,840 --> 01:59:17,000
not exist in the type pizza now one

3225
01:59:17,000 --> 01:59:18,760
thing before we move on I do want to

3226
01:59:18,760 --> 01:59:20,520
point out a little bit of a shortcoming

3227
01:59:20,520 --> 01:59:22,599
when it comes to using our fun functions

3228
01:59:22,599 --> 01:59:24,920
that are using generics these example

3229
01:59:24,920 --> 01:59:27,840
usages seem to be working fine but if

3230
01:59:27,840 --> 01:59:30,440
you remember on our order type which we

3231
01:59:30,440 --> 01:59:32,719
have up here the status is only allowed

3232
01:59:32,719 --> 01:59:35,159
to be the string ordered or completed

3233
01:59:35,159 --> 01:59:36,679
but check this out if I come and I

3234
01:59:36,679 --> 01:59:39,520
change the status see right here to

3235
01:59:39,520 --> 01:59:41,800
something like done well typescript

3236
01:59:41,800 --> 01:59:43,520
isn't complaining the reason it's not

3237
01:59:43,520 --> 01:59:46,119
complaining is pretty easy to understand

3238
01:59:46,119 --> 01:59:47,800
so we'll touch on it and fix this

3239
01:59:47,800 --> 01:59:49,280
problem really quickly in the next

3240
01:59:49,280 --> 01:59:52,280
lesson

3241
01:59:53,560 --> 01:59:55,159
we have a small bug in our code and

3242
01:59:55,159 --> 01:59:57,199
typescript is not warning us about it

3243
01:59:57,199 --> 01:59:59,800
that's where we added our status of done

3244
01:59:59,800 --> 02:00:02,159
even though done is not supposed to be a

3245
02:00:02,159 --> 02:00:04,840
valid status for order types so what

3246
02:00:04,840 --> 02:00:06,800
exactly is going on here well when we

3247
02:00:06,800 --> 02:00:09,000
defined our generic function and we told

3248
02:00:09,000 --> 02:00:11,599
it it was going to have generic types

3249
02:00:11,599 --> 02:00:13,480
that it needed to use as the type

3250
02:00:13,480 --> 02:00:15,119
throughout the rest of the code for this

3251
02:00:15,119 --> 02:00:18,000
function when we're calling add to array

3252
02:00:18,000 --> 02:00:20,320
both here and here we are assuming that

3253
02:00:20,320 --> 02:00:22,440
typescript is going to be bble to

3254
02:00:22,440 --> 02:00:25,159
implicitly infer what type it needs to

3255
02:00:25,159 --> 02:00:27,800
use as its generic type if you hover

3256
02:00:27,800 --> 02:00:30,800
over add to array right here on line 49

3257
02:00:30,800 --> 02:00:33,159
we can see that it says the generic type

3258
02:00:33,159 --> 02:00:35,239
that it's going to take is an object

3259
02:00:35,239 --> 02:00:37,320
literal with an ID that's a number a

3260
02:00:37,320 --> 02:00:38,760
name that's a string a price that's a

3261
02:00:38,760 --> 02:00:40,639
number and a bunch of other things that

3262
02:00:40,639 --> 02:00:42,239
shows what the menu is typed as and

3263
02:00:42,239 --> 02:00:43,800
everything like that let's do the same

3264
02:00:43,800 --> 02:00:45,719
thing for the add to array on the order

3265
02:00:45,719 --> 02:00:47,400
queue again make sure you're following

3266
02:00:47,400 --> 02:00:49,239
along and hovering your mouse over this

3267
02:00:49,239 --> 02:00:50,639
otherwise what I'm about to say will

3268
02:00:50,639 --> 02:00:52,119
make absolutely no sense the

3269
02:00:52,119 --> 02:00:54,239
intellisense popups shows that it's a

3270
02:00:54,239 --> 02:00:56,760
function called add to array its type is

3271
02:00:56,760 --> 02:00:59,520
an object with an ID number a pizza that

3272
02:00:59,520 --> 02:01:02,159
is a pizza object type and a status

3273
02:01:02,159 --> 02:01:05,280
that's a string interesting our status

3274
02:01:05,280 --> 02:01:07,280
is a string but it's supposed to be the

3275
02:01:07,280 --> 02:01:10,079
union of just these two literal strings

3276
02:01:10,079 --> 02:01:11,679
and that doesn't seem to have come

3277
02:01:11,679 --> 02:01:13,599
through when we're calling add to array

3278
02:01:13,599 --> 02:01:15,639
with the order Q this is another case

3279
02:01:15,639 --> 02:01:17,639
where it can be really helpful for us to

3280
02:01:17,639 --> 02:01:20,520
explicitly type what the generic type

3281
02:01:20,520 --> 02:01:22,880
we're passing into this function is to

3282
02:01:22,880 --> 02:01:24,960
do that we essentially follow the same

3283
02:01:24,960 --> 02:01:26,760
syntax that we had when we were defining

3284
02:01:26,760 --> 02:01:28,360
the function right before the

3285
02:01:28,360 --> 02:01:30,159
parentheses where we provide the

3286
02:01:30,159 --> 02:01:32,119
parameters for this add to array

3287
02:01:32,119 --> 02:01:34,480
function we can explicitly type it with

3288
02:01:34,480 --> 02:01:36,400
the same generic syntax of angle

3289
02:01:36,400 --> 02:01:38,360
brackets now this is where things can

3290
02:01:38,360 --> 02:01:40,040
get a little tricky if this has been a

3291
02:01:40,040 --> 02:01:41,800
bit of a challenge for you to understand

3292
02:01:41,800 --> 02:01:43,880
so let's make this into a mini challenge

3293
02:01:43,880 --> 02:01:46,800
just to help solidify it okay the mini

3294
02:01:46,800 --> 02:01:48,440
challenge is to figure out what should

3295
02:01:48,440 --> 02:01:50,079
be typed right here between the angle

3296
02:01:50,079 --> 02:01:52,079
brackets as the generic type here here

3297
02:01:52,079 --> 02:01:54,679
on line 53 pause now enter in the type

3298
02:01:54,679 --> 02:01:56,239
you think should be put here between the

3299
02:01:56,239 --> 02:01:58,320
angle brackets and when you do so the

3300
02:01:58,320 --> 02:02:00,679
red squiggly should limit itself just to

3301
02:02:00,679 --> 02:02:03,239
the object here at the end because done

3302
02:02:03,239 --> 02:02:05,239
is not a correct property pause now and

3303
02:02:05,239 --> 02:02:07,599
give that a

3304
02:02:10,840 --> 02:02:13,679
try because in this version of add to

3305
02:02:13,679 --> 02:02:15,679
array we are dealing with orders in the

3306
02:02:15,679 --> 02:02:18,480
order CU we have a predefined capital O

3307
02:02:18,480 --> 02:02:20,960
order object and when we add that in now

3308
02:02:20,960 --> 02:02:23,119
typescript seems to be able to

3309
02:02:23,119 --> 02:02:24,560
understand that something is not quite

3310
02:02:24,560 --> 02:02:26,800
right with this object if we hover over

3311
02:02:26,800 --> 02:02:29,199
add to array now instead of having an

3312
02:02:29,199 --> 02:02:31,239
object literal as everything it has

3313
02:02:31,239 --> 02:02:33,880
explicitly typed it as orders arrays of

3314
02:02:33,880 --> 02:02:36,280
orders and so forth and if we hover over

3315
02:02:36,280 --> 02:02:38,440
here we can see that the pop-up tells us

3316
02:02:38,440 --> 02:02:40,280
the types of property status are

3317
02:02:40,280 --> 02:02:42,800
incompatible specifically done is not

3318
02:02:42,800 --> 02:02:44,360
allowed here it needs to be something

3319
02:02:44,360 --> 02:02:46,520
like completed once we change it to that

3320
02:02:46,520 --> 02:02:48,239
awesome everything is working and

3321
02:02:48,239 --> 02:02:50,880
typescript is happy in fact if you typed

3322
02:02:50,880 --> 02:02:52,520
this out yourself you you could start to

3323
02:02:52,520 --> 02:02:54,360
see and this isn't going to be in the

3324
02:02:54,360 --> 02:02:55,960
recording but if you pause it and start

3325
02:02:55,960 --> 02:02:57,679
typing the word completed it does show

3326
02:02:57,679 --> 02:02:59,480
up as an autocomplete option because

3327
02:02:59,480 --> 02:03:01,239
typescript allows us to have these

3328
02:03:01,239 --> 02:03:02,760
autocomplete options I can just hit

3329
02:03:02,760 --> 02:03:05,280
enter and finish off the now valid

3330
02:03:05,280 --> 02:03:07,800
completed string as our status it's

3331
02:03:07,800 --> 02:03:09,440
probably not even worth making this a

3332
02:03:09,440 --> 02:03:11,079
mini challenge if I do want to

3333
02:03:11,079 --> 02:03:13,520
explicitly tell this add to array what

3334
02:03:13,520 --> 02:03:15,520
type it should be I can again just put

3335
02:03:15,520 --> 02:03:17,880
my angle brackets type in capital P

3336
02:03:17,880 --> 02:03:20,119
Pizza and everything will be happy there

3337
02:03:20,119 --> 02:03:21,560
if you want you can see the difference

3338
02:03:21,560 --> 02:03:23,760
now hovering over add to array it tells

3339
02:03:23,760 --> 02:03:26,199
us that the generic type is a pizza type

3340
02:03:26,199 --> 02:03:28,199
whereas when it was gone it tried to

3341
02:03:28,199 --> 02:03:30,040
infer exactly what that type should be

3342
02:03:30,040 --> 02:03:32,159
and it had an object literal in our case

3343
02:03:32,159 --> 02:03:33,679
I don't think it would make too much of

3344
02:03:33,679 --> 02:03:35,239
a difference because we don't have

3345
02:03:35,239 --> 02:03:37,199
anything in our pizza type like we have

3346
02:03:37,199 --> 02:03:39,360
here with our status but once again I

3347
02:03:39,360 --> 02:03:41,840
think both for your own readability the

3348
02:03:41,840 --> 02:03:43,679
readability of other people looking at

3349
02:03:43,679 --> 02:03:46,000
your code and to help typescript out a

3350
02:03:46,000 --> 02:03:47,719
little bit it really does help to

3351
02:03:47,719 --> 02:03:49,679
explicitly type your generic functions

3352
02:03:49,679 --> 02:03:51,840
like this all right that was a lot of

3353
02:03:51,840 --> 02:03:53,760
work you should give yourself a big

3354
02:03:53,760 --> 02:03:55,520
round of applause pat yourself on the

3355
02:03:55,520 --> 02:03:57,079
back do a little dance a little

3356
02:03:57,079 --> 02:03:58,880
celebration we are just about at the end

3357
02:03:58,880 --> 02:04:00,719
of this first section of this typescript

3358
02:04:00,719 --> 02:04:02,440
course as always play around with the

3359
02:04:02,440 --> 02:04:04,639
code I'm going to revert this back to

3360
02:04:04,639 --> 02:04:07,040
the way it was as fun as adding this add

3361
02:04:07,040 --> 02:04:08,960
to a ray generic function was I'm going

3362
02:04:08,960 --> 02:04:10,599
to revert our code back to the way it

3363
02:04:10,599 --> 02:04:12,719
was before because it was just better

3364
02:04:12,719 --> 02:04:14,480
that way once you're feeling good let's

3365
02:04:14,480 --> 02:04:16,920
keep moving

3366
02:04:18,639 --> 02:04:21,199
forward and there we have it folks we

3367
02:04:21,199 --> 02:04:23,000
are at the the end of this first section

3368
02:04:23,000 --> 02:04:25,559
for this typescript introductory course

3369
02:04:25,559 --> 02:04:27,440
obviously we haven't hit every last

3370
02:04:27,440 --> 02:04:29,440
little aspect of typescript but let's

3371
02:04:29,440 --> 02:04:31,679
recap what we have learned of course we

3372
02:04:31,679 --> 02:04:33,840
started off by understanding basic

3373
02:04:33,840 --> 02:04:36,199
literal and custom types in typescript

3374
02:04:36,199 --> 02:04:38,280
then we moved on to how you can create

3375
02:04:38,280 --> 02:04:40,320
optional properties in your typed

3376
02:04:40,320 --> 02:04:42,719
objects we learned about unions and how

3377
02:04:42,719 --> 02:04:44,679
you can combine multiple different types

3378
02:04:44,679 --> 02:04:46,960
into a single type which naturally led

3379
02:04:46,960 --> 02:04:48,840
us to learn about type narrowing so that

3380
02:04:48,840 --> 02:04:51,199
we can narrow down which of those Union

3381
02:04:51,199 --> 02:04:53,920
types we're using inside of our code as

3382
02:04:53,920 --> 02:04:55,400
a side note I feel like the code we

3383
02:04:55,400 --> 02:04:56,880
wrote when we were learning about type

3384
02:04:56,880 --> 02:04:58,800
narrowing is a great example of how

3385
02:04:58,800 --> 02:05:00,719
typescript really helps you learn to

3386
02:05:00,719 --> 02:05:02,440
think more like a senior developer

3387
02:05:02,440 --> 02:05:04,320
thinking of all the edge cases that you

3388
02:05:04,320 --> 02:05:06,199
can while you're writing your code then

3389
02:05:06,199 --> 02:05:07,520
we learned about a couple of the

3390
02:05:07,520 --> 02:05:10,320
built-in utility types that give us some

3391
02:05:10,320 --> 02:05:12,520
extra functionality in modifying our

3392
02:05:12,520 --> 02:05:14,280
existing types in a really userfriendly

3393
02:05:14,280 --> 02:05:16,559
way and we CT everything off by learning

3394
02:05:16,559 --> 02:05:18,559
about generics which allow us to have

3395
02:05:18,559 --> 02:05:20,400
additional flexibility inside of our

3396
02:05:20,400 --> 02:05:22,639
typescript code now as I mentioned this

3397
02:05:22,639 --> 02:05:24,119
doesn't represent everything that there

3398
02:05:24,119 --> 02:05:25,679
is to learn about typescript and

3399
02:05:25,679 --> 02:05:27,280
something that I'm going to be doing

3400
02:05:27,280 --> 02:05:29,520
with this typescript course is adding to

3401
02:05:29,520 --> 02:05:31,800
it over time so there actually is more

3402
02:05:31,800 --> 02:05:33,760
to come at the time that I'm recording

3403
02:05:33,760 --> 02:05:35,280
this what you've watched is everything

3404
02:05:35,280 --> 02:05:37,320
that we have but I do plan on adding a

3405
02:05:37,320 --> 02:05:39,280
few extra topics in this section that

3406
02:05:39,280 --> 02:05:41,000
you just watched as well as adding

3407
02:05:41,000 --> 02:05:43,000
entire new sections more specifically

3408
02:05:43,000 --> 02:05:44,599
one that's focused on how you use

3409
02:05:44,599 --> 02:05:45,840
typescript while you're writing

3410
02:05:45,840 --> 02:05:47,920
JavaScript code that interacts with the

3411
02:05:47,920 --> 02:05:50,440
document object model or the Dom so if

3412
02:05:50,440 --> 02:05:51,880
you haven't already you should should

3413
02:05:51,880 --> 02:05:53,840
subscribe to scrimba newsletter and

3414
02:05:53,840 --> 02:05:55,440
whenever I make a major update to this

3415
02:05:55,440 --> 02:05:57,159
course I'll make sure that we email out

3416
02:05:57,159 --> 02:05:59,400
an announcement of those updates until

3417
02:05:59,400 --> 02:06:01,400
then I've been your teacher Bob zero if

3418
02:06:01,400 --> 02:06:03,520
you want to follow me on Twitter or X

3419
02:06:03,520 --> 02:06:05,440
you can click the link that you see here

3420
02:06:05,440 --> 02:06:07,719
my username is Bob zero so pretty easy

3421
02:06:07,719 --> 02:06:09,960
to remember and until next time good

3422
02:06:09,960 --> 02:06:13,599
luck and happy coding

