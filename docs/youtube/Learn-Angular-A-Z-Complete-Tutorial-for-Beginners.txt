1
00:00:00,000 --> 00:00:10,039
[MUSIC]

2
00:00:10,039 --> 00:00:13,321
So you want to learn Angular,
and I can't blame you.

3
00:00:13,321 --> 00:00:17,883
Google ushered in a new paradigm for web
application development when it released

4
00:00:17,883 --> 00:00:20,272
the first version of Angular in 2012.

5
00:00:20,272 --> 00:00:22,833
And while yes,
that was a very long-time ago,

6
00:00:22,833 --> 00:00:26,550
especially considering how fast
things change in the web industry,

7
00:00:26,550 --> 00:00:30,540
Google continues to improve Angular
with new features and performance.

8
00:00:30,540 --> 00:00:35,137
Angular is a larger framework than React
and View, providing more features and

9
00:00:35,137 --> 00:00:40,360
capabilities out of the box, so it's
entirely understandable if you find it.

10
00:00:40,360 --> 00:00:44,010
Well, a little intimidating, but
you've come to the right place.

11
00:00:44,010 --> 00:00:46,141
I am Jeremy McPeak with Envato Tut+,

12
00:00:46,141 --> 00:00:49,536
and I invite you to spend the next
few hours with me as I walk you

13
00:00:49,536 --> 00:00:54,880
through the fundamentals you need to get
started writing applications with Angular.

14
00:00:54,880 --> 00:00:58,932
We'll start at the very beginning, you'll
install the Angular command line tools,

15
00:00:58,932 --> 00:01:01,480
and we'll create a new project together.

16
00:01:01,480 --> 00:01:06,404
You'll learn how to display data with
Angulars directives and templating syntax,

17
00:01:06,404 --> 00:01:11,250
as well as binding data to properties,
attributes, and handling events.

18
00:01:11,250 --> 00:01:13,322
We'll then dive into components, and

19
00:01:13,322 --> 00:01:17,840
you'll learn how to create components
that accept input and provide output.

20
00:01:17,840 --> 00:01:20,379
I'll also teach you how to
set up two-way binding and

21
00:01:20,379 --> 00:01:23,020
manipulate style within your component.

22
00:01:23,020 --> 00:01:27,621
Then, we'll look at some of the services
and concepts that Angular uses,

23
00:01:27,621 --> 00:01:32,070
such as dependency injection,
the HTTP module, and observables.

24
00:01:32,070 --> 00:01:36,183
You'll learn how to create and
use modules to organize your applications,

25
00:01:36,183 --> 00:01:39,267
handle and validate form input
with reactive forms, and

26
00:01:39,267 --> 00:01:43,130
build single-page applications
with Angular's router.

27
00:01:43,130 --> 00:01:46,702
Now, we have a lot of ground to cover,
but before we begin,

28
00:01:46,702 --> 00:01:51,410
be sure to subscribe to Envato Tuts+ for
more free courses and tutorials.

29
00:01:51,410 --> 00:01:53,050
Now, let's get started.

30
00:01:53,050 --> 00:01:58,642
I am a firm believer that jumping right in
and creating something is one of the best

31
00:01:58,642 --> 00:02:04,390
ways to learn a new technology, so
we are going to do just that with Angular.

32
00:02:04,390 --> 00:02:07,830
But first of all,
we need to go over what you need for

33
00:02:07,830 --> 00:02:11,270
Angular development, and
the first is node.js.

34
00:02:11,270 --> 00:02:17,466
Now, we aren't going to be actually
writing a node-based application instead,

35
00:02:17,466 --> 00:02:22,580
we install node in order to get
Node Package Manager or NPM.

36
00:02:22,580 --> 00:02:25,870
It's how we manage our dependencies
with modern development.

37
00:02:25,870 --> 00:02:32,080
And in the case of Angular, we use NPM
to get the Angular development tools.

38
00:02:32,080 --> 00:02:34,464
And so
when it comes to installing node.js,

39
00:02:34,464 --> 00:02:38,355
you essentially have the choice between
two versions, you have the LTS,

40
00:02:38,355 --> 00:02:43,120
which stands for long-term support,
and then you have the current version.

41
00:02:43,120 --> 00:02:47,230
Now, for our purposes, it really doesn't
matter which version you choose.

42
00:02:47,230 --> 00:02:53,002
I typically always reach for
the LTS because it's long-term support,

43
00:02:53,002 --> 00:02:55,900
it is the more stable version.

44
00:02:55,900 --> 00:02:59,162
But as I mentioned, for our purposes,
it really doesn't matter, so

45
00:02:59,162 --> 00:03:00,990
choose whichever one you want.

46
00:03:00,990 --> 00:03:04,804
The installation is very straightforward,
just take the defaults, and

47
00:03:04,804 --> 00:03:06,540
you will be good to go.

48
00:03:06,540 --> 00:03:08,561
You will also need a code editor.

49
00:03:08,561 --> 00:03:14,544
Now, technically, we are going to be
working with just normal text files,

50
00:03:14,544 --> 00:03:19,687
that's all code is, but logically,
code is specialized text,

51
00:03:19,687 --> 00:03:24,003
so it makes sense to have
a specialised text to editor.

52
00:03:24,003 --> 00:03:26,791
And when it comes to
working with JavaScript,

53
00:03:26,791 --> 00:03:29,157
Visual Studio Code is the best editor.

54
00:03:29,157 --> 00:03:32,970
Now, of course,
you can use whatever editor that you want.

55
00:03:32,970 --> 00:03:37,880
There is no requirement that you use
Visual Studio Code or anything else.

56
00:03:37,880 --> 00:03:42,421
Use what you like and if you don't know
what you like, there are many free

57
00:03:42,421 --> 00:03:47,660
options available to try, there's many
not free options that you can try.

58
00:03:47,660 --> 00:03:52,710
The point is to try a lot of them and
find the one that you like.

59
00:03:52,710 --> 00:03:55,663
Now, as far as
Visual Studio Code is concerned,

60
00:03:55,663 --> 00:03:59,122
there are distributions for
Mac OS Windows and Linux, so

61
00:03:59,122 --> 00:04:02,920
chances are you will be able
to run it on your machine.

62
00:04:02,920 --> 00:04:07,756
And, of course, you need a browser and
any modern browser is going to be fine,

63
00:04:07,756 --> 00:04:12,440
especially since most modern browsers
are now based upon Chromium.

64
00:04:12,440 --> 00:04:16,536
However, I will say that
browsers like Edge, Opera, Brave,

65
00:04:16,536 --> 00:04:21,949
all of those Chromium-based browsers,
while they work the majority of the time,

66
00:04:21,949 --> 00:04:26,720
there might be some specific things
that don't work quite right.

67
00:04:26,720 --> 00:04:29,916
So for me, I'm going to be using Chrome,
but again,

68
00:04:29,916 --> 00:04:33,630
feel free to use whichever
modern browser that you like.

69
00:04:33,630 --> 00:04:39,755
So after you have installed Node,
you will want to open up the command line,

70
00:04:39,755 --> 00:04:46,373
because NPM is a command line tool, and we
will use NPM to install the Angular CLI.

71
00:04:46,373 --> 00:04:49,247
The CLI is the command line interface.

72
00:04:49,247 --> 00:04:53,713
And really, it's just a tool set
that we can use to create projects,

73
00:04:53,713 --> 00:04:57,032
work with our projects,
and even run them as well.

74
00:04:57,032 --> 00:05:02,600
The command that we will use to install

75
00:05:02,600 --> 00:05:09,738
the Angular CLI is npm
install @angular/cli.

76
00:05:09,738 --> 00:05:14,949
Now, we want to follow this up with
the global flag, that's --global,

77
00:05:14,949 --> 00:05:20,324
and the reason is because if we install
this globally, this is going to give us

78
00:05:20,324 --> 00:05:25,810
a command called ng, and that command is
what we use to work with our projects.

79
00:05:25,810 --> 00:05:29,422
And we will be able to use
that ng command anywhere,

80
00:05:29,422 --> 00:05:33,039
regardless of what directory
we are currently in.

81
00:05:33,039 --> 00:05:37,170
If we installed the Angular CLI
without the global flag,

82
00:05:37,170 --> 00:05:42,936
then it would just install that within
whatever directory we are currently in,

83
00:05:42,936 --> 00:05:46,048
and we wouldn't have global access to it.

84
00:05:46,048 --> 00:05:50,895
When Angular is done installing,
we will use the ng new command,

85
00:05:50,895 --> 00:05:54,490
and then we just need
to create our project.

86
00:05:54,490 --> 00:05:59,236
Let's create a to-do application, but
let's not call it to-do because that's

87
00:05:59,236 --> 00:06:02,917
boring, let's make this a wish-list,
and then press Enter.

88
00:06:02,917 --> 00:06:08,268
Now, this is going to ask us some
questions for creating a project.

89
00:06:08,268 --> 00:06:11,885
And the first question is asking
if we gonna use angular routing,

90
00:06:11,885 --> 00:06:14,930
which we will talk about
routing later in this course.

91
00:06:14,930 --> 00:06:18,917
But for right now, we're going to
take the default and specify, no.

92
00:06:18,917 --> 00:06:24,291
Now, I do want to point out that
Angular is rather unique when compared

93
00:06:24,291 --> 00:06:30,410
to React and View, because the router
is built in to the Angular framework.

94
00:06:30,410 --> 00:06:34,890
With React and View,
you have to install the router separately.

95
00:06:34,890 --> 00:06:38,991
In fact, Angular gives us quite a few
features out of the box that other

96
00:06:38,991 --> 00:06:43,170
frameworks don't, but we will talk
about those whenever we need to.

97
00:06:43,170 --> 00:06:45,880
So I'm going to choose no for the routing.

98
00:06:45,880 --> 00:06:49,915
And then, we are going to be asked what
style sheet format we want to use for

99
00:06:49,915 --> 00:06:53,900
this project, and you can see that
there are several options here.

100
00:06:53,900 --> 00:06:58,240
I'm just going to choose just normal CSS,
and now that we have a project,

101
00:06:58,240 --> 00:07:00,650
I'm going to CD into that directory.

102
00:07:00,650 --> 00:07:03,614
It's simply the project
name that we chose,

103
00:07:03,614 --> 00:07:08,065
wish-list in this case, and
I'm going to fire up the code editor.

104
00:07:08,065 --> 00:07:10,179
Now, we can also run our application so

105
00:07:10,179 --> 00:07:12,497
that we can actually
see it in the browser.

106
00:07:12,497 --> 00:07:18,451
And the developer tools will also give us
the ability to develop our application and

107
00:07:18,451 --> 00:07:20,587
see the results in real time.

108
00:07:20,587 --> 00:07:25,270
So it's going to watch our files and
whenever we make changes, it's going

109
00:07:25,270 --> 00:07:30,176
to automatically rebuild our application
and load that into the browser, and

110
00:07:30,176 --> 00:07:33,615
so we can run our project in
a couple of different ways.

111
00:07:33,615 --> 00:07:37,934
We can go back to the command line and
simply type ng serve, and

112
00:07:37,934 --> 00:07:42,589
that's going to start up our
application in development mode, so

113
00:07:42,589 --> 00:07:47,178
that we get the benefit of the hot
reloading and things like that.

114
00:07:47,178 --> 00:07:51,640
Or we can use the built-in terminal
within visual studio code,

115
00:07:51,640 --> 00:07:55,850
which is what I'm going to opt to do,
and I'll pull that up,

116
00:07:55,850 --> 00:07:59,484
we'll type ng serve, and
then we're going to see,

117
00:07:59,484 --> 00:08:03,975
The Angular CLI go through
the process of building our project.

118
00:08:03,975 --> 00:08:07,118
It will tell us where we
can point our browser so

119
00:08:07,118 --> 00:08:10,271
that we can then view
that within the browser.

120
00:08:10,271 --> 00:08:15,030
We can see that our application
was compiled successfully,

121
00:08:15,030 --> 00:08:18,864
and it is going to be
at localhost port 4200.

122
00:08:18,864 --> 00:08:23,946
So let's go ahead and hop on over to
the browser so that we can view that.

123
00:08:23,946 --> 00:08:28,902
Now, if there were any errors as it
compiled our application, of course,

124
00:08:28,902 --> 00:08:31,591
we would see those errors in the output.

125
00:08:31,591 --> 00:08:36,245
But of course, there shouldn't be
since this is a brand new project.

126
00:08:36,245 --> 00:08:40,696
Now, in the browser, you're going
to see a full fledged web page.

127
00:08:40,696 --> 00:08:44,802
Of course, most of these things
point to the Angular website.

128
00:08:44,802 --> 00:08:50,508
But let's just take a moment and
see how we get what we see in the browser.

129
00:08:50,508 --> 00:08:55,150
So inside of our project,
we have this source folder, and

130
00:08:55,150 --> 00:08:59,994
this is the folder where our
application source code lives.

131
00:08:59,994 --> 00:09:01,532
So let's open this up.

132
00:09:01,532 --> 00:09:06,683
And we're going to see some more
folders and we will see this main.ts.

133
00:09:06,683 --> 00:09:12,432
If we open this up, this is the main
TypeScript file of our application,

134
00:09:12,432 --> 00:09:15,278
because Angular uses TypeScript.

135
00:09:15,278 --> 00:09:17,967
Now, if you're not
familiar with TypeScript,

136
00:09:17,967 --> 00:09:21,189
it's simply just a superset
of the JavaScript language.

137
00:09:21,189 --> 00:09:27,397
So perfectly valid JavaScript is
actually perfectly valid TypeScript.

138
00:09:27,397 --> 00:09:32,667
And so we're not going to dive into
the inner depths of TypeScript,

139
00:09:32,667 --> 00:09:34,248
we will be using it.

140
00:09:34,248 --> 00:09:38,498
And as some features pop up,
I'll of course mention them,

141
00:09:38,498 --> 00:09:41,136
we'll talk about them at that time.

142
00:09:41,136 --> 00:09:46,552
But for right now, we are just going to
treat this as just normal JavaScript.

143
00:09:46,552 --> 00:09:48,918
Well, until we don't.

144
00:09:48,918 --> 00:09:51,579
So here, we have main.ts.

145
00:09:51,579 --> 00:09:55,962
This is essentially the main
file of our application.

146
00:09:55,962 --> 00:09:58,778
There are four import statements, but

147
00:09:58,778 --> 00:10:03,893
the one that I want to talk about is
on line 4, where it is importing this

148
00:10:03,893 --> 00:10:08,783
AppModule from a file called
app.module inside of the app folder.

149
00:10:08,783 --> 00:10:10,116
So let's take a look at that.

150
00:10:10,116 --> 00:10:14,168
So here,
we have this app.module.ts file, and

151
00:10:14,168 --> 00:10:18,319
we can see that it is
importing this app component.

152
00:10:18,319 --> 00:10:25,067
Now, Angular is very similar to React and
View in that it is component-driven.

153
00:10:25,067 --> 00:10:29,027
We build applications
by building components.

154
00:10:29,027 --> 00:10:31,132
A components is just a building block.

155
00:10:31,132 --> 00:10:36,055
It contains certain functionality for
different pieces of the application.

156
00:10:36,055 --> 00:10:40,947
And over on the left-hand side if we look
more inside of the app folder you're

157
00:10:40,947 --> 00:10:44,796
going to see several files
that begin with app.component.

158
00:10:44,796 --> 00:10:48,425
So in this case,
we have a component called app, and

159
00:10:48,425 --> 00:10:51,159
it is made up of each one of these files.

160
00:10:51,159 --> 00:10:54,359
There's one for the CSS,
there's one for the HTML,

161
00:10:54,359 --> 00:10:57,719
which is essentially the template for
this component.

162
00:10:57,719 --> 00:11:01,306
This is what is actually
loaded into the browser.

163
00:11:01,306 --> 00:11:06,502
There's a spec file for tests,
and then there is the code file,

164
00:11:06,502 --> 00:11:10,074
or the TypeScript file for that component.

165
00:11:10,074 --> 00:11:13,987
So in this particular case,
it has four files.

166
00:11:13,987 --> 00:11:18,327
That doesn't always have to be the case,
but it's what we have for

167
00:11:18,327 --> 00:11:19,732
this app component.

168
00:11:19,732 --> 00:11:24,727
Let's take a look at the HTML file,
because this contains all of the markup

169
00:11:24,727 --> 00:11:27,999
that's actually loaded
inside of the browser.

170
00:11:27,999 --> 00:11:31,169
It's not all of the markup,
but it's quite a bit of it.

171
00:11:31,169 --> 00:11:35,590
The first [LAUGH], well,
two-thirds of it is just CSS.

172
00:11:35,590 --> 00:11:41,518
But if we take a look after the style,
we can start to see just normal HTML.

173
00:11:41,518 --> 00:11:45,163
We have a div with the class of toolbar,
the role is banner.

174
00:11:45,163 --> 00:11:47,524
There's some content inside of there.

175
00:11:47,524 --> 00:11:51,517
Then we have another div with a class
of content, the role is main.

176
00:11:51,517 --> 00:11:54,376
And once again, we have some content.

177
00:11:54,376 --> 00:12:01,132
But look line 344,
this doesn't look like HTML.

178
00:12:01,132 --> 00:12:05,404
We have a pair of curly braces, and
then inside of that we have title.

179
00:12:05,404 --> 00:12:08,808
So remember that I said
that this is a template.

180
00:12:08,808 --> 00:12:12,955
This is the HTML template for
the app component.

181
00:12:12,955 --> 00:12:17,068
And so what we see here is
just some template syntax.

182
00:12:17,068 --> 00:12:24,028
It is outputting the value that is
assigned to a variable called title.

183
00:12:24,028 --> 00:12:28,572
So then the question becomes
where is this title defined?

184
00:12:28,572 --> 00:12:34,294
Well, that is inside of
the TypeScript file, app.component.ts.

185
00:12:34,294 --> 00:12:37,994
Here, we can see that there's
a class called AppComponent.

186
00:12:37,994 --> 00:12:42,380
It has a title property,
it is set to wishlist.

187
00:12:42,380 --> 00:12:44,671
So if we take a look at
this in the browser,

188
00:12:44,671 --> 00:12:48,211
we can see at the top that there's
this wishlist app is running.

189
00:12:48,211 --> 00:12:52,051
That is the text that we
saw inside of the HTML.

190
00:12:52,051 --> 00:12:55,261
Except that we see title here, and

191
00:12:55,261 --> 00:12:59,919
the value assigned to title
as we saw is wishlist.

192
00:12:59,919 --> 00:13:03,717
So here is wishlist app is running.

193
00:13:03,717 --> 00:13:08,012
So if we change the title from
wishlist to simply my wishlist,

194
00:13:08,012 --> 00:13:12,718
then whenever we go to the browser,
it's gonna take it a second or so

195
00:13:12,718 --> 00:13:15,952
because it has to
recompile our application.

196
00:13:15,952 --> 00:13:20,398
But you can see that it automatically
updated, I did not have to refresh that.

197
00:13:20,398 --> 00:13:27,009
So that's now the title is my wish list,
and we see that reflected in the browser.

198
00:13:27,009 --> 00:13:31,860
Now, here we see something that looks a
little weird, especially whenever you just

199
00:13:31,860 --> 00:13:35,498
think in terms of JavaScript,
and that is this AppComponent.

200
00:13:35,498 --> 00:13:37,700
This is what we call a decorator.

201
00:13:37,700 --> 00:13:41,155
And the decorator gives us some
information about this particular

202
00:13:41,155 --> 00:13:41,840
component.

203
00:13:41,840 --> 00:13:45,283
This is a component called AppComponent,
but

204
00:13:45,283 --> 00:13:49,619
notice that there is this selector,
and it is app-root.

205
00:13:49,619 --> 00:13:52,146
Then there is a templateUrl.

206
00:13:52,146 --> 00:13:57,872
And then the HTML file, app.component.html
is set for the template.

207
00:13:57,872 --> 00:14:01,646
And then in styles is set for
the styles URL,

208
00:14:01,646 --> 00:14:05,633
which is inside of the app.component.css.

209
00:14:05,633 --> 00:14:09,965
So this component decorator
essentially tells Angular

210
00:14:09,965 --> 00:14:14,488
how this component is going to
be used with this selector.

211
00:14:14,488 --> 00:14:18,787
This is essentially a tag name,
where the template for

212
00:14:18,787 --> 00:14:22,627
this component is and
where the style is as well.

213
00:14:22,627 --> 00:14:27,098
And so finally,
let's open up the index.html file.

214
00:14:27,098 --> 00:14:30,050
This is directly inside
of the source folder, and

215
00:14:30,050 --> 00:14:32,167
it doesn't really look like much.

216
00:14:32,167 --> 00:14:37,275
But notice here on line 11,
we have app-root, that is,

217
00:14:37,275 --> 00:14:42,396
the selector that was defined
inside of the AppComponent.

218
00:14:42,396 --> 00:14:45,293
So selector is app-root.

219
00:14:45,293 --> 00:14:50,365
So here inside of index.html,
app-root is being used.

220
00:14:50,365 --> 00:14:55,979
So Angular knows that this is where it
is going to generate the template for

221
00:14:55,979 --> 00:15:00,427
the AppComponent and
inject that right here on line 11.

222
00:15:00,427 --> 00:15:03,397
So that whenever we are in the browser,

223
00:15:03,397 --> 00:15:07,267
we see the result of that
index file being loaded and

224
00:15:07,267 --> 00:15:12,493
then the content from the AppComponent
being rendered inside of it.

225
00:15:12,493 --> 00:15:13,786
And so if that is clear,

226
00:15:13,786 --> 00:15:17,939
don't worry because we're going to be
spending a lot of time with Angular.

227
00:15:17,939 --> 00:15:22,359
And in fact, in the next lesson, we will
start developing our wishlist application.

228
00:15:22,359 --> 00:15:27,662
When I start developing a new project,
I typically start with the data.

229
00:15:27,662 --> 00:15:30,920
Because, after all,
we write software to work with data.

230
00:15:30,920 --> 00:15:36,015
And if we don't have data, it makes
it very hard to develop our software.

231
00:15:36,015 --> 00:15:40,047
So in this lesson, we will begin
by writing a class that represents

232
00:15:40,047 --> 00:15:43,794
an individual wish, because after all,
this is a wish list.

233
00:15:43,794 --> 00:15:47,566
We're going to have a list of wishes.

234
00:15:47,566 --> 00:15:51,522
So the question becomes,
where do we define this class?

235
00:15:51,522 --> 00:15:55,565
Because we do have this source folder,
There's an app folder and

236
00:15:55,565 --> 00:15:59,475
then there's also some files
just directly inside of source.

237
00:15:59,475 --> 00:16:02,048
Well, there really are no hard and

238
00:16:02,048 --> 00:16:06,052
fast rules when it comes
to structuring our project.

239
00:16:06,052 --> 00:16:10,128
There are a lot of people that have a lot
of really good ideas, but I think for

240
00:16:10,128 --> 00:16:13,058
this application,
let's just keep things simple.

241
00:16:13,058 --> 00:16:19,560
A wish is something that's going to
be used throughout the application.

242
00:16:19,560 --> 00:16:23,796
It is a simple application, but
the idea is that this is a wish list.

243
00:16:23,796 --> 00:16:28,910
We might want to use the individual
wish items anywhere.

244
00:16:28,910 --> 00:16:33,301
So it would be something that would
be shared across the application.

245
00:16:33,301 --> 00:16:38,377
So inside of the source folder, I'm going
to create a new folder, called shared.

246
00:16:38,377 --> 00:16:43,401
And then inside of shared, I'll create
another folder called simply models.

247
00:16:43,401 --> 00:16:45,907
This really isn't keeping it simple,
is it?

248
00:16:45,907 --> 00:16:50,784
[LAUGH] But there is something to
say about keeping things organized.

249
00:16:50,784 --> 00:16:53,188
And I personally like
this organization here.

250
00:16:53,188 --> 00:16:57,140
So inside of modules,
we'll create a new file and

251
00:16:57,140 --> 00:17:01,852
this will be our class that
represents an individual wish.

252
00:17:01,852 --> 00:17:05,555
So we can call it wishListItem but
that's a mouthful, so

253
00:17:05,555 --> 00:17:07,569
let's just call it wishItem.

254
00:17:07,569 --> 00:17:11,727
And this is a TypeScript file,
so we'll use the TS extension.

255
00:17:11,727 --> 00:17:15,161
Now, let's zoom out just a little bit,

256
00:17:15,161 --> 00:17:19,608
because how we define this
class is very important.

257
00:17:19,608 --> 00:17:24,626
If we take a look inside of the app
folder, let's open up app.component,

258
00:17:24,627 --> 00:17:29,644
and we will see, of course, we import
component, which is that decorator

259
00:17:29,644 --> 00:17:34,605
that's used to tell Angular the meta
information about this component.

260
00:17:34,605 --> 00:17:39,854
But then we see the class definition,
but it is being exported.

261
00:17:39,854 --> 00:17:45,054
And that is because it needs to be
imported inside of this other file,

262
00:17:45,054 --> 00:17:47,664
app.module, here on line four.

263
00:17:47,664 --> 00:17:52,412
But then, again, if we take a look at this
file, there are some import statements.

264
00:17:52,412 --> 00:17:55,497
The NgModule decorator is used, but

265
00:17:55,497 --> 00:18:00,076
then there's a classified
that is also exported, and

266
00:18:00,076 --> 00:18:04,869
the reason is because it is
imported inside of main.ts.

267
00:18:04,869 --> 00:18:09,822
So the point that I'm trying to get across
is, regardless of if it's JavaScript or

268
00:18:09,822 --> 00:18:12,581
TypeScript, it needs to
be a module because we

269
00:18:12,581 --> 00:18:16,791
are essentially going to import it
somewhere within some other file.

270
00:18:16,791 --> 00:18:21,029
So whenever we create our WishItem class,

271
00:18:21,029 --> 00:18:26,692
we need to export it and
we'll call this class WishItem.

272
00:18:26,692 --> 00:18:31,253
And we are going to use a TypeScript
feature here that allows us to

273
00:18:31,253 --> 00:18:32,952
define a constructor.

274
00:18:32,952 --> 00:18:37,541
And it will also automatically create
the properties for this class,

275
00:18:37,541 --> 00:18:42,441
because we could explicitly define
those properties, but we can also do so

276
00:18:42,441 --> 00:18:44,718
as arguments to the constructor.

277
00:18:44,718 --> 00:18:50,404
So the first thing we are going to mark
is the accessibility of this property.

278
00:18:50,404 --> 00:18:53,819
We want this information to be public, so

279
00:18:53,819 --> 00:18:57,829
that we can access it from
outside of this class.

280
00:18:57,829 --> 00:19:02,542
And when it comes to a WishItem,
we essentially have two things,

281
00:19:02,542 --> 00:19:06,411
we have the wish itself,
which we can call wishText.

282
00:19:06,411 --> 00:19:09,531
I'm not exactly sure I'd like that,
but we'll run with it.

283
00:19:09,531 --> 00:19:16,873
And then we would need a Boolean value to
determine whether or not it is complete.

284
00:19:16,873 --> 00:19:21,747
Now, TypeScript is called TypeScript,
because it allows us

285
00:19:21,747 --> 00:19:26,538
to also specify the type of
the data that we are working with.

286
00:19:26,538 --> 00:19:30,190
You don't have to use the type syntax, but

287
00:19:30,190 --> 00:19:35,270
it is extremely helpful when
developing larger projects.

288
00:19:35,270 --> 00:19:39,681
So our wishText is of course text,
this is a string.

289
00:19:39,681 --> 00:19:45,973
And in TypeScript, we specify the type
after we define the variable or,

290
00:19:45,973 --> 00:19:49,803
in this case, the constructor parameter.

291
00:19:49,803 --> 00:19:51,989
So in this case, it is simply a string.

292
00:19:51,989 --> 00:19:57,454
The isComplete is a Boolean value,
so we will mark that as Boolean.

293
00:19:57,454 --> 00:20:03,224
And so whenever we create a new WishItem,
we will pass in the text for

294
00:20:03,224 --> 00:20:08,098
the wish, we will denote whether or
not it is completed.

295
00:20:08,098 --> 00:20:12,877
And behind the scenes, that's going to
automatically create two properties,

296
00:20:12,877 --> 00:20:17,950
one called wishText, which is a string,
one called isComplete, which is Boolean.

297
00:20:17,950 --> 00:20:21,281
We can also set a default value for
Boolean.

298
00:20:21,281 --> 00:20:26,899
We could say that by default,
isComplete is going to be false,

299
00:20:26,899 --> 00:20:31,669
so that then that gives us
the option of passing either

300
00:20:31,669 --> 00:20:36,548
just the wishText or
the wishText and the isComplete.

301
00:20:36,548 --> 00:20:41,945
So let's go to our app component,
and let's go ahead and

302
00:20:41,945 --> 00:20:47,912
let's import this because we
want to use this WishItem class.

303
00:20:47,912 --> 00:20:52,755
And Visual Studio Code is automatically
popping up with the correct file, so

304
00:20:52,755 --> 00:20:55,893
we can just click on that and
it has imported that.

305
00:20:55,893 --> 00:21:00,955
And so now inside of AppComponent,
we simply want some items,

306
00:21:00,955 --> 00:21:03,926
which we can initialize as an array.

307
00:21:03,926 --> 00:21:07,493
And let's pre-populate this
array with a few items.

308
00:21:07,493 --> 00:21:10,517
So we will call the WishItem constructor.

309
00:21:10,517 --> 00:21:14,354
The first wish could be To Learn Angular.

310
00:21:14,354 --> 00:21:17,438
And I want to point out
the tooltip that we see here.

311
00:21:17,438 --> 00:21:21,141
We can see that WishItem
accepts up to two arguments.

312
00:21:21,141 --> 00:21:26,001
The first is the wishText,
which is a string, the second Is optional,

313
00:21:26,001 --> 00:21:30,861
because of this question mark after
isComplete, and that is Boolean.

314
00:21:30,861 --> 00:21:36,051
This is one of the reasons why
TypeScript exists, it's for tooling and

315
00:21:36,051 --> 00:21:42,108
providing a better development experience,
so that as you are writing your code,

316
00:21:42,108 --> 00:21:48,278
your code editor can provide information
about the types that you are working with.

317
00:21:48,278 --> 00:21:51,725
In this case, that type is a WishItem.

318
00:21:51,725 --> 00:21:56,283
Let's add another wish,
one that we could go ahead and

319
00:21:56,283 --> 00:21:59,961
complete, and that is to have some coffee.

320
00:21:59,961 --> 00:22:05,076
So let's say Get Coffee, and
let's pass in true for that value.

321
00:22:05,076 --> 00:22:08,330
And then let's add one more item, and

322
00:22:08,330 --> 00:22:14,444
this is definitely going to be a wish,
but Find grass that cuts itself.

323
00:22:14,444 --> 00:22:18,011
So let's save this file,
let's pull up the console.

324
00:22:18,011 --> 00:22:22,003
Let's see if we get any errors
with the build process, and

325
00:22:22,003 --> 00:22:25,032
we don't, it was compiled successfully.

326
00:22:25,032 --> 00:22:29,777
And then we just need to display this
information in our template, because,

327
00:22:29,777 --> 00:22:33,865
of course, as it is right now,
we haven't changed our template,

328
00:22:33,865 --> 00:22:35,627
it is still as it was before.

329
00:22:35,627 --> 00:22:39,869
It's working with the same data,
which really the only data was that title.

330
00:22:39,869 --> 00:22:43,692
But we want to change what
is reflected here, and

331
00:22:43,692 --> 00:22:46,404
we will do that in the next lesson.

332
00:22:46,404 --> 00:22:47,842
In the previous lesson,

333
00:22:47,842 --> 00:22:51,479
we created a data model class
to represent an individual wish.

334
00:22:51,479 --> 00:22:53,663
We called it simply WishItem.

335
00:22:53,663 --> 00:22:56,627
And then inside of our AppComponent,

336
00:22:56,627 --> 00:23:02,009
we created an items array that
contains multiple WishItem objects.

337
00:23:02,009 --> 00:23:06,312
So, of course, we want to display
these items within our application.

338
00:23:06,312 --> 00:23:10,830
But, of course, right now, we have just
the default templates being used, but

339
00:23:10,830 --> 00:23:12,633
that's easy enough to change.

340
00:23:12,633 --> 00:23:14,584
Let's open up our template.

341
00:23:14,584 --> 00:23:18,421
And if you'll read the very top,
it says that this is only a placeholder.

342
00:23:18,421 --> 00:23:22,114
Delete the template below to
get started with your project.

343
00:23:22,114 --> 00:23:24,961
All right, so
we'll just delete everything.

344
00:23:24,961 --> 00:23:29,313
And let's also pull in some CSS
because it would be useful to have

345
00:23:29,313 --> 00:23:33,438
something other than just
the default browser stylesheet.

346
00:23:33,438 --> 00:23:37,655
Now, it's common to find
Angular applications using

347
00:23:37,655 --> 00:23:39,679
the material UI library.

348
00:23:39,679 --> 00:23:44,507
If you're not familiar with material,
it is Google's UI framework or

349
00:23:44,507 --> 00:23:48,295
UI language,
whatever verbiage you want to use there.

350
00:23:48,295 --> 00:23:52,179
And that's all well and good, but I think
that we can get started much easier.

351
00:23:52,179 --> 00:23:54,137
By just using Bootstrap.

352
00:23:54,137 --> 00:24:00,179
Cuz we can just use the CDN,
paste in that link to our index.html file,

353
00:24:00,179 --> 00:24:03,721
that is the template of our application.

354
00:24:03,721 --> 00:24:09,003
So that everything within our application
is going to have access to Bootstrap.

355
00:24:09,003 --> 00:24:10,844
Makes it very easy to do.

356
00:24:10,844 --> 00:24:13,327
Plus, it's a lot easier to use.

357
00:24:13,327 --> 00:24:17,981
Now, let me also say that Material
is a pretty cool library.

358
00:24:17,981 --> 00:24:24,488
There are a lot of different components
that have the Material UI built in.

359
00:24:24,488 --> 00:24:29,025
And that's why you would find it's used
in a lot of Angular applications, but for

360
00:24:29,025 --> 00:24:31,279
our purposes, this is going to be fine.

361
00:24:31,279 --> 00:24:32,328
All right, so

362
00:24:32,328 --> 00:24:38,105
let's start our components template with
a div that has a class of container.

363
00:24:38,105 --> 00:24:42,400
And we'll just start with
a simple div element so

364
00:24:42,400 --> 00:24:47,756
that we can display the individual
items within that array.

365
00:24:47,756 --> 00:24:50,756
Now if you'll remember
from a few lessons ago,

366
00:24:50,756 --> 00:24:55,866
we saw this syntax inside of our template
to where we had the double curly braces.

367
00:24:55,866 --> 00:25:00,468
And then inside, I think it was
title that was used, yes it was,

368
00:25:00,468 --> 00:25:03,637
that title property for our app component.

369
00:25:03,637 --> 00:25:11,437
So if we wanted to, we could display
the first item by using the index of 0.

370
00:25:11,437 --> 00:25:13,722
And then we could have the wishText.

371
00:25:13,722 --> 00:25:15,629
I think that's the property that we used.

372
00:25:15,629 --> 00:25:18,897
We'll definitely find out whenever
we review this in the browser, and

373
00:25:18,897 --> 00:25:20,153
sure enough, that's it.

374
00:25:20,153 --> 00:25:23,669
So we could do the same thing for
the other items, but of course,

375
00:25:23,669 --> 00:25:25,637
that's not scalable whatsoever.

376
00:25:25,637 --> 00:25:26,881
That would be a nightmare.

377
00:25:26,881 --> 00:25:29,585
So whenever we work with arrays,

378
00:25:29,585 --> 00:25:34,133
we typically iterate over
them using some kind of loop.

379
00:25:34,133 --> 00:25:37,849
And JavaScript has several
different loops, but

380
00:25:37,849 --> 00:25:41,573
the one that we typically
always use is a for loop.

381
00:25:41,573 --> 00:25:46,725
And Angular gives us an easy
way of iterating over an array,

382
00:25:46,725 --> 00:25:52,406
or let me say this, it gives us
an easy way of using the for of loop.

383
00:25:52,406 --> 00:25:55,415
And we will use what's called a directive.

384
00:25:55,415 --> 00:26:00,221
A directive generally starts with
an asterisk, followed by ng, short for

385
00:26:00,221 --> 00:26:00,918
Angular.

386
00:26:00,918 --> 00:26:06,290
And if you'll notice, Visual Studio Code
is popped up several options here.

387
00:26:06,290 --> 00:26:10,959
But this set right here,
this little icon indicates that this is

388
00:26:10,959 --> 00:26:16,157
something that we can use for
this div element that we are working with.

389
00:26:16,157 --> 00:26:22,607
And we see ngFor, ngIf,
ngPluralCase, ngSwitchCase.

390
00:26:22,607 --> 00:26:29,940
And the thing that sticks out to me is
ngFor, because, hello, we have a for loop.

391
00:26:29,940 --> 00:26:35,921
So whenever you use a directive,
you use it like an attribute.

392
00:26:35,921 --> 00:26:38,834
So this looks a little wonky.

393
00:26:38,834 --> 00:26:43,374
And then the value for
this directive is essentially

394
00:26:43,374 --> 00:26:47,821
a JavaScript expression,
that's item of items.

395
00:26:47,821 --> 00:26:49,234
So let's take a step back.

396
00:26:49,234 --> 00:26:51,934
Let's talk about the for loop.

397
00:26:51,934 --> 00:26:57,244
So the traditional for loop that we
typically learn first is that for

398
00:26:57,244 --> 00:26:59,674
loop that has the three parts.

399
00:26:59,674 --> 00:27:04,414
We have the initialization,
followed by the condition, and

400
00:27:04,414 --> 00:27:06,611
then we have the iteration.

401
00:27:06,611 --> 00:27:10,977
And that's all well and good, but that's
a little bit more than what we need.

402
00:27:10,977 --> 00:27:14,301
We just need to work with
the individual items.

403
00:27:14,301 --> 00:27:18,728
So JavaScript gives us the ability
to use the for of loop,

404
00:27:18,728 --> 00:27:23,632
which is primarily used for
iterable objects, like an array.

405
00:27:23,632 --> 00:27:27,152
So that we can say for, and
then let item of items, and

406
00:27:27,152 --> 00:27:31,846
then that's going to give us
the individual item that we can work with,

407
00:27:31,846 --> 00:27:35,155
and that's exactly what
we want in our template.

408
00:27:35,155 --> 00:27:39,265
So let's go back to the template,
and that's what we have.

409
00:27:39,265 --> 00:27:42,935
So we have a directive,
ngFor, the value for

410
00:27:42,935 --> 00:27:48,261
this directive is the JavaScript
expression for the for of loop.

411
00:27:48,261 --> 00:27:51,786
And then that gives us the ability
to use that individual

412
00:27:51,786 --> 00:27:53,811
item object however we need to.

413
00:27:53,811 --> 00:27:58,759
So we could say item.wishText,
and inside of the browser,

414
00:27:58,759 --> 00:28:01,191
we will see our list of items.

415
00:28:01,191 --> 00:28:04,631
Now that's all well and good, but we want
something a little bit more interactive.

416
00:28:04,631 --> 00:28:07,768
Because this is, after all, a wish list,

417
00:28:07,768 --> 00:28:11,700
we should be able to check
these things off as needed.

418
00:28:11,700 --> 00:28:15,047
Now I'm going to paste in some markup,
because, well,

419
00:28:15,047 --> 00:28:18,896
it's quite a bit of markup and
you don't want to see me type this.

420
00:28:18,896 --> 00:28:21,404
And if you've used Bootstrap before,

421
00:28:21,404 --> 00:28:26,274
you know that there can be some setup
involved to make something look nicer.

422
00:28:26,274 --> 00:28:28,523
And that's basically the case here.

423
00:28:28,523 --> 00:28:32,781
The code is essentially the same,
at least as far as the ngFor

424
00:28:32,781 --> 00:28:37,302
directive is concerned, and
whenever we output the wish text.

425
00:28:37,302 --> 00:28:43,457
Other than that, we just have a basic
ul element that has some li elements,

426
00:28:43,457 --> 00:28:48,650
that is using the Bootstrap markup for
outputting a checkbox.

427
00:28:48,650 --> 00:28:51,818
So if we take a look at
this in the browser,

428
00:28:51,818 --> 00:28:55,905
we get a list of items with
checkbox that we can check.

429
00:28:55,905 --> 00:29:02,311
And, of course, right now, behind the
scenes, the checkbox isn't doing anything.

430
00:29:02,311 --> 00:29:07,356
We want to be able to essentially
change the values of our wish items

431
00:29:07,356 --> 00:29:12,416
when the user clicks on these checkboxes,
but we'll get to that.

432
00:29:12,416 --> 00:29:17,080
The one thing that I do want to
get rid of is the list dots.

433
00:29:17,080 --> 00:29:21,119
So we can do that by changing the CSS.

434
00:29:21,119 --> 00:29:24,863
And let's open up app.component.css.

435
00:29:24,863 --> 00:29:29,163
And we're going to add
the wish-list class.

436
00:29:29,163 --> 00:29:32,401
So that will set the list
style to just none.

437
00:29:32,401 --> 00:29:34,961
And that will get rid of that.

438
00:29:34,961 --> 00:29:40,331
So that now we just see the checkbox and
the text for that checkbox.

439
00:29:40,331 --> 00:29:43,670
Now the ngFor directive
is somewhat special,

440
00:29:43,670 --> 00:29:47,527
in that it is what's called
a structural directive.

441
00:29:47,527 --> 00:29:50,267
It changes the structure of the DOM.

442
00:29:50,267 --> 00:29:55,881
So in the case of ngFor,
it is adding an li element for

443
00:29:55,881 --> 00:29:59,209
every item in the items array.

444
00:29:59,209 --> 00:30:02,811
So it is adding elements
to the DOM structure.

445
00:30:02,811 --> 00:30:07,809
In the next lesson, we will look
at another structural directive,

446
00:30:07,809 --> 00:30:13,521
one that we can use to make decisions and
conditionally show or hide content.

447
00:30:13,521 --> 00:30:18,515
In the previous lesson, we looked at
the ngFor directive, and we used it to

448
00:30:18,515 --> 00:30:23,216
iterate over an array so that we
could display the individual wishes.

449
00:30:23,216 --> 00:30:25,161
And that makes perfect sense.

450
00:30:25,161 --> 00:30:29,165
But what if we don't
have anything to display?

451
00:30:29,165 --> 00:30:33,895
Like, for example, we've just hard-coded
these wishItem objects, and for

452
00:30:33,895 --> 00:30:35,741
development, that's fine.

453
00:30:35,741 --> 00:30:41,117
But in a real application, this
information would be dynamically loaded,

454
00:30:41,117 --> 00:30:44,141
either by fetching it
from the web server or

455
00:30:44,141 --> 00:30:47,671
by accessing some storage,
like local storage.

456
00:30:47,671 --> 00:30:53,681
So let's comment out those lines, and
we can see that there are some issues.

457
00:30:53,681 --> 00:30:56,085
Now, in the terminal,
we see that there is an issue.

458
00:30:56,085 --> 00:30:58,612
It did not compile correctly, and

459
00:30:58,612 --> 00:31:03,855
we see that it is an issue with
the template of component AppComponent.

460
00:31:03,855 --> 00:31:07,759
And it, of course,
tells us what that template is, but

461
00:31:07,759 --> 00:31:11,513
Visual Studio Code gives us
some visual cues as well.

462
00:31:11,513 --> 00:31:15,315
The file name of our
template is a reddish color.

463
00:31:15,315 --> 00:31:19,333
The directory that contains that
file is a reddish color, and

464
00:31:19,333 --> 00:31:22,821
then its parent directory
is a reddish color as well.

465
00:31:22,821 --> 00:31:27,698
And of course, the tab text for
that template is also reddish, so

466
00:31:27,698 --> 00:31:32,141
there's definitely something
wrong with that template.

467
00:31:32,141 --> 00:31:36,725
If we open up that file, then we can
see by this red squiggly underneath

468
00:31:36,725 --> 00:31:40,234
wishText that that is the issue,
that's the error.

469
00:31:40,234 --> 00:31:42,583
So if we hover our mouse over it,

470
00:31:42,583 --> 00:31:46,682
it says Property wishText
does not exist on type never.

471
00:31:46,682 --> 00:31:49,466
Now, if we go to the browser,
we will see the same thing,

472
00:31:49,466 --> 00:31:52,947
except that this is a little bit easier
to read, at least in my opinion.

473
00:31:52,947 --> 00:31:55,610
Property wishText does
not exist on type never.

474
00:31:55,610 --> 00:31:56,240
All right, so

475
00:31:56,240 --> 00:31:59,453
this can be a little confusing if
you're not familiar with TypeScript.

476
00:31:59,453 --> 00:32:04,858
Because remember that we are using
TypeScript, TypeScript is a superset

477
00:32:04,858 --> 00:32:09,577
of JavaScript, and
any valid JavaScript is valid TypeScript.

478
00:32:09,577 --> 00:32:11,989
However, behind the scenes,

479
00:32:11,989 --> 00:32:17,844
TypeScript is doing quite a few things
that's we may or may not be aware of.

480
00:32:17,844 --> 00:32:22,684
For example,
whenever we created this items array,

481
00:32:22,684 --> 00:32:26,456
we hard-coded those WishItem objects.

482
00:32:26,456 --> 00:32:29,765
So TypeScript, behind the scenes,

483
00:32:29,765 --> 00:32:35,434
assumed that this items array
is an array of wishItem objects.

484
00:32:35,434 --> 00:32:41,500
We can see that right here that items
is an array of WishItem objects.

485
00:32:41,500 --> 00:32:46,238
And TypeScript was safe to
assume that because we only have

486
00:32:46,238 --> 00:32:49,533
WishItem objects inside of that array.

487
00:32:49,533 --> 00:32:54,254
Now, what happens if we
take out those objects?

488
00:32:54,254 --> 00:32:58,164
Let's hover over the items property, and

489
00:32:58,164 --> 00:33:02,730
we can see here that items
is now an array of never.

490
00:33:02,730 --> 00:33:05,418
And the reason is very simple,
because it's an empty array.

491
00:33:05,418 --> 00:33:10,918
And as far as TypeScript is concerned, it
will never have any objects inside of it.

492
00:33:10,918 --> 00:33:13,961
Because we initialized
it as an empty array,

493
00:33:13,961 --> 00:33:18,777
we don't do anything else with it,
so it's an array of never objects.

494
00:33:18,777 --> 00:33:21,687
And so there are primarily two
ways that we can get around this.

495
00:33:21,687 --> 00:33:27,787
The first is to say that our items
array is actually of type any.

496
00:33:27,787 --> 00:33:34,698
If we take this approach, then this would
be considered the the JavaScript approach.

497
00:33:34,698 --> 00:33:39,936
Because in JavaScript, we can have
an array that contains anything or

498
00:33:39,936 --> 00:33:43,767
we can have an items property
that can be anything.

499
00:33:43,767 --> 00:33:45,933
And in which case, the error goes away,

500
00:33:45,933 --> 00:33:49,625
if we look at the browser then of course,
we don't see anything, but

501
00:33:49,625 --> 00:33:53,657
that's kind of what we would expect
because there are no items to display.

502
00:33:53,657 --> 00:33:56,466
But what I would do is this.

503
00:33:56,466 --> 00:34:02,478
We know that items is only going to be
an array that contains WishItem objects,

504
00:34:02,478 --> 00:34:08,690
so we might as well just go ahead and say
that this is an array of WishItem objects.

505
00:34:08,690 --> 00:34:13,050
And if you're not familiar with
TypeScript, the syntax for doing that is

506
00:34:13,051 --> 00:34:17,639
fairly simple, although it looks a little
wonky in the world of JavaScript.

507
00:34:17,639 --> 00:34:22,010
So you start with the name of
your property or variable,

508
00:34:22,011 --> 00:34:27,411
followed by a colon, and then the type
of that variable or property.

509
00:34:27,411 --> 00:34:35,403
In this case, it's an array denoted by the
square brackets after the WishItem class.

510
00:34:35,404 --> 00:34:36,659
Okay, that's great.

511
00:34:36,659 --> 00:34:38,232
So we save that.

512
00:34:38,233 --> 00:34:42,879
We still have no errors, we go to
the browser, we still don't see anything.

513
00:34:42,879 --> 00:34:47,150
And at least at this point,
that's okay because we don't see an error.

514
00:34:47,150 --> 00:34:51,935
But in the terms of just the application
as a whole, we don't want to just

515
00:34:51,935 --> 00:34:56,335
display nothing, we want to at
least say that there are no wishes.

516
00:34:56,335 --> 00:35:01,363
So we can do this by using
a directive called ngIf.

517
00:35:01,363 --> 00:35:07,463
If the array doesn't have any items,
then display our message.

518
00:35:07,463 --> 00:35:12,208
So we'll have a div element,
we will use the ngIf directive,

519
00:35:12,208 --> 00:35:16,233
and this works a lot like
just a normal if statement.

520
00:35:16,233 --> 00:35:20,444
We provide a condition, and
if that condition is true,

521
00:35:20,444 --> 00:35:24,476
then the element is going to
be added to the document,

522
00:35:24,476 --> 00:35:28,524
and of course,
any content that it contains as well.

523
00:35:28,524 --> 00:35:30,719
But if the result is false,

524
00:35:30,719 --> 00:35:35,301
then this element is not
rendered in the document at all,

525
00:35:35,301 --> 00:35:40,945
it's missing, it ain't there,
and that's perfect for our needs.

526
00:35:40,945 --> 00:35:43,183
So let's do a check.

527
00:35:43,183 --> 00:35:48,105
If the length of items is equal to 0,
then we want to

528
00:35:48,105 --> 00:35:53,380
display the message of There
are no wishes to display.

529
00:35:53,380 --> 00:35:59,007
And so if we view this in the browser,
then we should see that message, volla.

530
00:35:59,007 --> 00:36:03,327
But let's take a look at the HTML
that is rendered in the document.

531
00:36:03,327 --> 00:36:05,805
So, there's our app root element.

532
00:36:05,805 --> 00:36:07,240
Let's drill down.

533
00:36:07,240 --> 00:36:10,231
There's the div that has
a class of container.

534
00:36:10,231 --> 00:36:15,536
And then we have the div that has our
message, There are no wishes to display.

535
00:36:15,536 --> 00:36:19,857
That works great, but
we have this UL element.

536
00:36:19,857 --> 00:36:21,523
Now in the grand scheme of things,

537
00:36:21,523 --> 00:36:24,175
it's not that big of a deal
that we have the ul element.

538
00:36:24,175 --> 00:36:28,495
But if we don't have any items to display,

539
00:36:28,495 --> 00:36:31,863
why render the UL element at all?

540
00:36:31,863 --> 00:36:36,878
Now unfortunately,
there is not an ngElse directive.

541
00:36:36,878 --> 00:36:40,037
That would be perfect in
this particular case, so

542
00:36:40,037 --> 00:36:44,944
that we could have just ngElse and we
would go on our way, we don't have that.

543
00:36:44,944 --> 00:36:49,856
So one of the ways that we can get around
that is just by using another ngIf,

544
00:36:49,856 --> 00:36:53,993
except that we will essentially
do the opposite comparison.

545
00:36:53,993 --> 00:36:58,777
If we have in the items, so
if the length is greater than 0,

546
00:36:58,777 --> 00:37:04,541
then we want to show our UL element in
all of the LI elements inside of it.

547
00:37:04,541 --> 00:37:08,272
But if not, we don't want to
render that UL element at all.

548
00:37:08,272 --> 00:37:13,564
And we can see that now we still
have the div that has our message,

549
00:37:13,564 --> 00:37:17,981
but the UL element is gone,
it's not there anymore.

550
00:37:17,981 --> 00:37:23,935
And that's all well and good, but
there are alternatives to this approach.

551
00:37:23,935 --> 00:37:27,865
For example,
we could have just a container element.

552
00:37:27,865 --> 00:37:29,659
So let's just start with a div.

553
00:37:29,659 --> 00:37:34,235
And we will still use the ngIf here,
and we can still do

554
00:37:34,235 --> 00:37:39,141
the same comparison if
the item's length is equal to 0.

555
00:37:39,141 --> 00:37:43,291
But then we could say that if that's true,

556
00:37:43,291 --> 00:37:51,150
then we want to render the content inside
of a template that we will call no items.

557
00:37:51,150 --> 00:37:57,065
Else, if we have items, then we want
to render a template called showItems.

558
00:37:57,065 --> 00:38:03,445
Then we can define those templates using
a special component called ng-template.

559
00:38:03,445 --> 00:38:06,826
We define its name starting with
a pound or a hash sign, and

560
00:38:06,826 --> 00:38:08,624
then the name of the template.

561
00:38:08,624 --> 00:38:10,876
So this would be for no items,

562
00:38:10,876 --> 00:38:15,573
in which case we would display
There are no wishes to display.

563
00:38:15,573 --> 00:38:17,974
And then if we do have items,

564
00:38:17,974 --> 00:38:22,990
we would want to have our other
template called showItems.

565
00:38:22,990 --> 00:38:27,889
So we would create that template,
give it the name of showItems,

566
00:38:27,889 --> 00:38:32,089
and then it would contain our
UL element just like that.

567
00:38:32,089 --> 00:38:34,312
So it's a little bit more typing, but

568
00:38:34,312 --> 00:38:37,940
it's also a little bit more clear
as to what's going on here.

569
00:38:37,940 --> 00:38:42,797
So once again, if we go to the browser,
we still see just that content.

570
00:38:42,797 --> 00:38:48,400
If we drill down into app root, drill
down into container, we have our message.

571
00:38:48,400 --> 00:38:52,485
But notice that the div element
that we put the ngIf directive on,

572
00:38:52,485 --> 00:38:57,165
that's not being rendered here, so
that's just kind of a placeholder for

573
00:38:57,165 --> 00:38:59,114
the content for our template.

574
00:38:59,114 --> 00:39:01,427
But let's see the other work.

575
00:39:01,427 --> 00:39:06,762
Let's go back, and
let's have our list items here.

576
00:39:06,762 --> 00:39:11,744
We'll go back to the browser, it will
refresh, and then we can, of course,

577
00:39:11,744 --> 00:39:13,286
see our list of wishes.

578
00:39:13,286 --> 00:39:18,766
So that works, but we can make this
even just a little bit cleaner.

579
00:39:18,766 --> 00:39:22,518
We could get rid of
the then statement here and

580
00:39:22,518 --> 00:39:28,936
we can put our message as the content for
this div that has the ngIf directive,

581
00:39:28,936 --> 00:39:35,552
so that if the condition is true, then our
content inside of this div element and

582
00:39:35,552 --> 00:39:41,016
this div element itself is going
to be displayed in the document.

583
00:39:41,016 --> 00:39:47,885
Otherwise, if we do have items, then the
show items template is going to be used.

584
00:39:47,885 --> 00:39:49,445
So let's go back to the browser.

585
00:39:49,445 --> 00:39:50,303
That's what we see.

586
00:39:50,303 --> 00:39:51,494
We have our list.

587
00:39:51,494 --> 00:39:56,311
If we drill down,
we have our div with a class of container.

588
00:39:56,311 --> 00:40:02,015
But we also have are ul element that
of course, contains all of our items,

589
00:40:02,015 --> 00:40:07,910
but let's make sure that the other works
as well as comment out those items.

590
00:40:07,910 --> 00:40:12,552
Once again, we'll go back to the browser,
we see our message and if we take

591
00:40:12,552 --> 00:40:17,341
a look at the rendered html, we have our
div with a class of container, then we

592
00:40:17,341 --> 00:40:22,600
have that other div that contains our
message, there are no wishes to display.

593
00:40:22,600 --> 00:40:27,850
So when it comes to making a decision,
we can do so in several different ways.

594
00:40:27,850 --> 00:40:30,890
We can use multiple ng-if directives.

595
00:40:30,890 --> 00:40:36,356
We can use ng if in conjunction
with the then statement or

596
00:40:36,356 --> 00:40:40,520
we can also use the else statement.

597
00:40:40,520 --> 00:40:43,900
Now there's one other thing
that I want to point out.

598
00:40:43,900 --> 00:40:47,450
NgIf is a structural directive.

599
00:40:47,450 --> 00:40:52,380
It changes the structure of
the document based upon the condition

600
00:40:52,380 --> 00:40:53,911
that is evaluated.

601
00:40:53,911 --> 00:40:59,055
And now that we know two structural
directives, it's important to know

602
00:40:59,055 --> 00:41:04,390
that you cannot have two structural
directives on the same element.

603
00:41:04,390 --> 00:41:09,726
So if I add ngIf to the li element,
and it doesn't matter what we use for

604
00:41:09,726 --> 00:41:14,519
the condition, we're going to
see that there is an error, and

605
00:41:14,519 --> 00:41:20,240
the error is this second structural
directive, the ngFor directive.

606
00:41:20,240 --> 00:41:24,540
You cannot have two structural
directives on the same element.

607
00:41:24,540 --> 00:41:29,979
Now that’s going to force you about how
you need to structure your mind and

608
00:41:29,979 --> 00:41:34,893
structure your structural directives
because there is no hard and

609
00:41:34,893 --> 00:41:39,208
fast rules as to which directives
you use on each element.

610
00:41:39,208 --> 00:41:42,841
That all depends upon what your needs are.

611
00:41:42,841 --> 00:41:46,524
Now, in the next lesson we are going
to learn how we can find data.

612
00:41:46,524 --> 00:41:51,352
We write software to work with data, and
that data can come in any way, shape or

613
00:41:51,352 --> 00:41:55,600
form, and it is up to us to determine
how we work with that data.

614
00:41:55,600 --> 00:41:59,065
Of course, it depends upon our
application, but sometimes we want to

615
00:41:59,065 --> 00:42:03,470
display that data, sometimes we just
want to work with it behind the scenes.

616
00:42:03,470 --> 00:42:05,210
Now, in the case of our wish list,

617
00:42:05,210 --> 00:42:09,340
we have essentially two pieces of
information that we want to display.

618
00:42:09,340 --> 00:42:12,968
We want the text of the wish,
which we are currently doing, but

619
00:42:12,968 --> 00:42:17,150
we also want to show whether or
not that wish has been fulfilled.

620
00:42:17,150 --> 00:42:20,110
Now, that is, of course,
what the check box is for.

621
00:42:20,110 --> 00:42:22,790
And eventually we want
this to be interactive so

622
00:42:22,790 --> 00:42:25,738
that whenever the user
clicks on these check boxes,

623
00:42:25,738 --> 00:42:29,580
then that toggles whether or
not the wish has been fulfilled.

624
00:42:29,580 --> 00:42:31,896
Now, in the sense of our data,

625
00:42:31,896 --> 00:42:37,580
we represent that fulfillment value
with the is complete property.

626
00:42:37,580 --> 00:42:41,190
It is a Boolean value, of course,
so it's going to be true or false.

627
00:42:41,190 --> 00:42:45,640
Right now,
we only have one wish that is fulfilled.

628
00:42:45,640 --> 00:42:48,790
Get coffee, because I always have coffee.

629
00:42:48,790 --> 00:42:53,800
So at the bare minimum, we of course,
want to display this in the browser.

630
00:42:53,800 --> 00:42:56,320
So the question becomes,
how do we do that?

631
00:42:56,320 --> 00:42:59,050
Well, let's first of all talk
about the input element.

632
00:42:59,050 --> 00:43:02,770
And more specifically,
let's talk about the checkbox.

633
00:43:02,770 --> 00:43:06,610
And the same goes for
the radio button as well.

634
00:43:06,610 --> 00:43:11,218
So in html,
we denote that a checkbox is checked by

635
00:43:11,218 --> 00:43:16,070
just adding the checked
attribute to the element.

636
00:43:16,070 --> 00:43:17,480
That's all we have to do.

637
00:43:17,480 --> 00:43:19,966
If that checked attribute is present,

638
00:43:19,966 --> 00:43:23,480
then the check box will be
checked in the browser.

639
00:43:23,480 --> 00:43:27,540
And the funny thing is it doesn't matter
what you assign to this attribute.

640
00:43:27,540 --> 00:43:31,224
It can be assigned false,
which makes no sense whatsoever, but

641
00:43:31,224 --> 00:43:33,883
it is still going to be
checked in the browser,

642
00:43:33,883 --> 00:43:38,490
because it is based upon whether or
not that checked attribute is present.

643
00:43:38,490 --> 00:43:41,130
Now, that's the html side of things.

644
00:43:41,130 --> 00:43:47,040
On the JavaScript side of things,
this input element has a checked property.

645
00:43:47,040 --> 00:43:49,350
That property is Boolean.

646
00:43:49,350 --> 00:43:52,530
So if it is true,
then the check box is checked.

647
00:43:52,530 --> 00:43:55,690
If it's false, then it is not checked.

648
00:43:55,690 --> 00:43:59,801
So the JavaScript property and
the html attribute are named the same,

649
00:43:59,801 --> 00:44:01,900
but they behave differently.

650
00:44:01,900 --> 00:44:04,905
And because our data is Boolean,

651
00:44:04,905 --> 00:44:10,700
it makes sense that we would want
to bind our isComplete property

652
00:44:10,700 --> 00:44:15,982
to the checked JavaScript
property on the Input element.

653
00:44:15,982 --> 00:44:20,219
And we can do that very easily
right here inside of our template,

654
00:44:20,219 --> 00:44:23,640
we will use what's
called property binding.

655
00:44:23,640 --> 00:44:26,560
So we will take
the JavaScript property name.

656
00:44:26,560 --> 00:44:31,066
In this case it's checked and
we surround it with square brackets and

657
00:44:31,066 --> 00:44:35,804
then the value that we assign to this
is a JavaScript expression that will

658
00:44:35,804 --> 00:44:39,580
determine whether or
not this check box is checked.

659
00:44:39,580 --> 00:44:46,130
That, of course, is the IsComplete
property on our Wish Item class.

660
00:44:46,130 --> 00:44:50,366
So if we take a look at the browser,
we have our three items here,

661
00:44:50,366 --> 00:44:53,980
but notice that
the Get Coffee Item is checked.

662
00:44:53,980 --> 00:44:58,711
Let's inspect this and we will see
that it is indeed type checkbox,

663
00:44:58,711 --> 00:45:04,000
the class is checkbox, but
notice that there is no checked attribute.

664
00:45:04,000 --> 00:45:06,698
That's because we set this using

665
00:45:06,698 --> 00:45:11,700
the JavaScript property
Opposed to the html attribute.

666
00:45:11,700 --> 00:45:16,869
So when you want to bind something to
the JavaScript property of an object,

667
00:45:16,869 --> 00:45:21,792
all you have to do is surround that
property name with square brackets,

668
00:45:21,792 --> 00:45:27,043
assign the JavaScript expression that
will then be bound to that property,

669
00:45:27,043 --> 00:45:29,120
and you are good to go.

670
00:45:29,120 --> 00:45:33,770
Now one thing to note here,
this is the JavaScript property.

671
00:45:33,770 --> 00:45:39,470
So if you were doing something using
a td element inside of a table and

672
00:45:39,470 --> 00:45:42,475
you wanted to bind to the call span.

673
00:45:42,475 --> 00:45:47,270
Well, call span,
all lowercase is the html attribute.

674
00:45:47,270 --> 00:45:50,690
The JavaScript property uses camel case.

675
00:45:50,690 --> 00:45:56,050
So if you want to bind to the JavaScript
property, you would need to use the camel

676
00:45:56,050 --> 00:46:01,252
case version of call span because after
all that is the JavaScript property.

677
00:46:01,252 --> 00:46:08,325
Now, not to confuse the issue Issue,
we can also bind to html attributes.

678
00:46:08,325 --> 00:46:10,862
So for example, we have a checkbox and

679
00:46:10,862 --> 00:46:14,907
we are determining whether or
not that checkbox is checked,

680
00:46:14,907 --> 00:46:19,525
using the checked property, and
we are binding that to IsComplete.

681
00:46:19,525 --> 00:46:25,320
But let's say that we wanted a custom
attribute called data-index.

682
00:46:25,320 --> 00:46:30,820
And this would represent in index of
the item inside of the items array.

683
00:46:30,820 --> 00:46:35,796
Now we can get the index
with the ng4 directive.

684
00:46:35,796 --> 00:46:40,436
All we have to do after our
iteration statement is have index,

685
00:46:40,436 --> 00:46:45,179
as and then whatever identifier
we wanted to use for the index.

686
00:46:45,179 --> 00:46:48,547
I'm going to use ii because
that's what I typically use.

687
00:46:48,547 --> 00:46:55,057
And if we assign ii to just this
data-index inside of the browser,

688
00:46:55,057 --> 00:47:00,987
whenever it is rendered,
we see that data-index is there,

689
00:47:00,987 --> 00:47:04,790
but it is literally the string ii.

690
00:47:04,790 --> 00:47:09,446
We want to bind this ii
variable to the attributes, and

691
00:47:09,446 --> 00:47:12,580
we do that almost in the same way.

692
00:47:12,580 --> 00:47:19,316
We surround the attribute with square
brackets, but before the attribute name,

693
00:47:19,316 --> 00:47:23,821
we have a prefix,
attr.and then the attribute name.

694
00:47:23,821 --> 00:47:30,553
And this is going to result in an input
element, has a data-index attribute,

695
00:47:30,553 --> 00:47:35,665
and it is set to the index of
the item in the items array.

696
00:47:35,665 --> 00:47:40,875
So we can bind data to an element's
attribute or to its property.

697
00:47:40,875 --> 00:47:45,538
Using similar syntax,
the only difference is that binding to

698
00:47:45,538 --> 00:47:50,660
attributes uses the attr.prefix
followed by the attribute name.

699
00:47:50,660 --> 00:47:54,370
And in the next lesson you
will learn how to bind events.

700
00:47:54,370 --> 00:47:59,101
Events are probably the most important
part of an application with a graphical

701
00:47:59,101 --> 00:48:03,402
interface because it is the primary
way that the users interact with our

702
00:48:03,402 --> 00:48:04,347
application.

703
00:48:04,347 --> 00:48:09,138
Like, for example, in our very simple UI,
the user is going to click on these

704
00:48:09,138 --> 00:48:13,811
checkboxes in order to toggle whether or
not that wish has been fulfilled.

705
00:48:13,811 --> 00:48:16,686
But of course, right now,
we aren't really doing anything.

706
00:48:16,686 --> 00:48:21,367
Now, we have bound the isComplete
property on our wish

707
00:48:21,367 --> 00:48:25,353
item to the checked
property on the checkbox.

708
00:48:25,353 --> 00:48:28,502
However, that is a one-way binding.

709
00:48:28,502 --> 00:48:31,358
We are taking the value of isComplete and

710
00:48:31,358 --> 00:48:35,229
binding that to the checked
property on the checkbox.

711
00:48:35,229 --> 00:48:42,117
So when the user clicks on the checkbox,
it's not updating the isComplete property.

712
00:48:42,117 --> 00:48:44,894
So we need to write the code
that's going to do that.

713
00:48:44,894 --> 00:48:49,853
So in order to bind an event,
it's going to be very reminiscent of

714
00:48:49,853 --> 00:48:55,191
the DOM level 0 event handlers,
which were simply HTML attributes.

715
00:48:55,191 --> 00:48:58,843
If we wanted to handle
the click event on an element,

716
00:48:58,843 --> 00:49:03,420
we would use onclick, or for
mouse out, it would be onmouseout.

717
00:49:03,420 --> 00:49:09,869
The idea being that we have the event
name and it is prefixed by, simply, on.

718
00:49:09,869 --> 00:49:13,757
And then the value of this attribute
would be the JavaScript that we wanted to

719
00:49:13,757 --> 00:49:15,593
execute when that event occurred.

720
00:49:15,593 --> 00:49:19,791
Now, over time, we learned that
that didn't scale very well,

721
00:49:19,791 --> 00:49:24,224
and so we started to separate our
markup from our JavaScript to where

722
00:49:24,224 --> 00:49:27,439
we set up the event
listeners in our JavaScript.

723
00:49:27,439 --> 00:49:32,084
Well, now in the world of UI libraries
like Angular and React and Vue,

724
00:49:32,084 --> 00:49:36,335
we do it declaratively so
that it is done inside of the template,

725
00:49:36,335 --> 00:49:41,721
which means that, once again, we are back
to using what looks like attributes.

726
00:49:41,721 --> 00:49:46,837
But for Angular we bind events very
similar to how we bind properties or

727
00:49:46,837 --> 00:49:52,923
attributes, except that instead of using
square brackets, we use parentheses.

728
00:49:52,923 --> 00:49:57,751
And right off the bat, Visual Studio Code
is going to pop up with a list of possible

729
00:49:57,751 --> 00:49:59,747
things that we might want to use.

730
00:49:59,747 --> 00:50:03,929
And this is not even the full list,
over here's a scroll bar, so

731
00:50:03,929 --> 00:50:05,874
you can see how small that is.

732
00:50:05,874 --> 00:50:08,986
So there's a lot of events
that we can listen for here,

733
00:50:08,986 --> 00:50:11,162
but notice the names of these events.

734
00:50:11,162 --> 00:50:13,826
They are simply just the event names.

735
00:50:13,826 --> 00:50:17,140
So blur, click, change.

736
00:50:17,140 --> 00:50:22,009
If mouseout was listed here,
which if we scroll down we would see that,

737
00:50:22,009 --> 00:50:25,433
or mouseover,
it is simply the name of the event.

738
00:50:25,433 --> 00:50:28,517
There is no on prefix or
anything like that.

739
00:50:28,517 --> 00:50:34,311
They are also not camel cased because
the names of events are all lowercase.

740
00:50:34,311 --> 00:50:37,231
So in order to bind to the click event,

741
00:50:37,231 --> 00:50:42,268
all we have to do is use the event
name surrounded by parentheses.

742
00:50:42,268 --> 00:50:46,020
There we go, and then we assign
the JavaScript that is going to execute.

743
00:50:46,020 --> 00:50:48,562
Now, this doesn't have to be a function.

744
00:50:48,562 --> 00:50:52,830
We can have a JavaScript expression that
will just execute whenever we click on it.

745
00:50:52,830 --> 00:50:56,203
But I think it would be
useful to have a function so

746
00:50:56,203 --> 00:50:58,848
that we can do some extra things here.

747
00:50:58,848 --> 00:51:03,685
So I'm going to say that whenever
we click on our checkbox,

748
00:51:03,685 --> 00:51:08,245
we are going to call a function
called toggleItem().

749
00:51:08,245 --> 00:51:12,816
Now, this is actually going to be
a method on our component class.

750
00:51:12,816 --> 00:51:19,639
So we need to go to app-component and
we need to add the toggleItem method.

751
00:51:19,639 --> 00:51:20,689
And for right now,

752
00:51:20,689 --> 00:51:24,305
let's just write a message to
the console that this was clicked.

753
00:51:24,305 --> 00:51:26,313
So let's save that,
let's go to the browser.

754
00:51:26,313 --> 00:51:31,580
I already have the console pulled up, so
whenever we click on these checkboxes,

755
00:51:31,580 --> 00:51:34,687
we can see the text,
clicked, in the console.

756
00:51:34,687 --> 00:51:35,559
So that's great.

757
00:51:35,559 --> 00:51:41,129
So when it comes to DOM events, one of the
things we typically do is access the event

758
00:51:41,129 --> 00:51:46,480
object that occurs because that gives us
a lot of information about the event.

759
00:51:46,480 --> 00:51:49,545
Now, that's not going to
be given to us by default.

760
00:51:49,545 --> 00:51:54,249
What we have to do is pass
the event object here, and we do so

761
00:51:54,249 --> 00:51:56,656
using a special identifier.

762
00:51:56,656 --> 00:51:59,647
It is simply the dollar
sign followed by event.

763
00:51:59,647 --> 00:52:04,829
So there we go, that will pass
the event object to our toggle item.

764
00:52:04,829 --> 00:52:07,371
Now, notice we are getting an error here.

765
00:52:07,371 --> 00:52:10,379
And that's because as it is right now,

766
00:52:10,379 --> 00:52:14,492
the toggleItem method
doesn't accept an argument.

767
00:52:14,492 --> 00:52:18,941
But we want an argument,
we're just gonna call it e, and

768
00:52:18,941 --> 00:52:25,354
let's type this as an any object, and then
let's just write out e to the console.

769
00:52:25,354 --> 00:52:30,147
So now whenever we click on these
checkboxes, we are going to see the event

770
00:52:30,147 --> 00:52:34,418
object and we can see all of
the information that comes with that.

771
00:52:34,418 --> 00:52:38,304
So, of course,
there's the client coordinates.

772
00:52:38,304 --> 00:52:42,150
We can see if the control key
was pressed whenever I clicked.

773
00:52:42,150 --> 00:52:46,351
If we scroll down, we can see the type
of event that occurred, which of course,

774
00:52:46,351 --> 00:52:49,062
is rather obvious, but
sometimes you never know.

775
00:52:49,062 --> 00:52:53,186
We can see the targets,
which this is in alphabetical order,

776
00:52:53,186 --> 00:52:56,931
it ought to be easy to find,
the target's right there.

777
00:52:56,931 --> 00:52:59,468
So everything that we would need for

778
00:52:59,468 --> 00:53:03,282
that event,
we get access to with that event object.

779
00:53:03,282 --> 00:53:06,124
But I think in our case
we don't even need that.

780
00:53:06,124 --> 00:53:10,101
All we really need is the item
that we want to work with.

781
00:53:10,101 --> 00:53:13,175
So we can pass item to toggleItem, and

782
00:53:13,175 --> 00:53:17,883
that is going to give us
the ability to manipulate that item

783
00:53:17,883 --> 00:53:22,801
object because that item object
comes from our items array.

784
00:53:22,801 --> 00:53:26,978
So we are working with all
of the same objects here.

785
00:53:26,978 --> 00:53:30,274
So let's type this,
first of all, as a WishItem.

786
00:53:30,274 --> 00:53:33,316
Let's call this item, as well.

787
00:53:33,316 --> 00:53:36,402
And before we do anything,
let's go ahead and

788
00:53:36,402 --> 00:53:39,344
let's see what that
item is in the console.

789
00:53:39,344 --> 00:53:42,584
And we will see that
the binding that we set up for

790
00:53:42,584 --> 00:53:45,669
the checked property is a one-way binding.

791
00:53:45,669 --> 00:53:50,878
So let's click on the Get Coffee wish,
which of course, unchecks that.

792
00:53:50,878 --> 00:53:55,836
But if we look in the console, we can
see that the wishText, of course, didn't

793
00:53:55,836 --> 00:54:01,021
change because, well, that makes perfect
sense, but isComplete is still true.

794
00:54:01,021 --> 00:54:06,062
And if we click on Get Coffee,
once again, isComplete is still true.

795
00:54:06,062 --> 00:54:10,305
So property binding is just
setting up a one-way binding.

796
00:54:10,305 --> 00:54:15,475
That means that we need to update
the isComplete property ourselves.

797
00:54:15,475 --> 00:54:21,974
And we can do that very easily, since we
have the item that we want to work with,

798
00:54:21,974 --> 00:54:27,488
we can simply set the isCompleted
property equal to its opposite,

799
00:54:27,488 --> 00:54:32,134
and that way our data is going
to stay in sync with the UI.

800
00:54:32,134 --> 00:54:34,255
So let's let this reload.

801
00:54:34,255 --> 00:54:36,264
Let's click on Get Coffee.

802
00:54:36,264 --> 00:54:39,558
We can now see that isComplete is false.

803
00:54:39,558 --> 00:54:43,295
If we click on it again,
isComplete will be true.

804
00:54:43,295 --> 00:54:46,588
So setting up event
listeners is very simple.

805
00:54:46,588 --> 00:54:52,247
We do so inside of our template using
the event names surrounded by parentheses.

806
00:54:52,247 --> 00:54:55,701
And then we simply assign
the JavaScript code that we

807
00:54:55,701 --> 00:54:58,381
want to execute when that event occurs.

808
00:54:58,381 --> 00:55:02,662
If events are the most important
part of a graphical application,

809
00:55:02,662 --> 00:55:07,478
then forms, or at least working with
forms, is a very close second because

810
00:55:07,478 --> 00:55:11,162
events allow the user to
interact with our application.

811
00:55:11,162 --> 00:55:16,267
Forms allow them to provide data
to our application to work with.

812
00:55:16,267 --> 00:55:19,895
Now, Angular lets us work with
forms in two different ways.

813
00:55:19,895 --> 00:55:25,807
The first is called reactive forms, which
is the more robust and scalable approach.

814
00:55:25,807 --> 00:55:28,239
There's also a lot more setup involved,
and

815
00:55:28,239 --> 00:55:30,736
we will eventually work
with reactive forms.

816
00:55:30,736 --> 00:55:33,985
But for right now,
we're going to take the second approach,

817
00:55:33,985 --> 00:55:36,246
which is called template-driven forms.

818
00:55:36,246 --> 00:55:40,561
It basically allows us to define our
forms inside of our template, and

819
00:55:40,561 --> 00:55:42,768
then we just rely upon directives.

820
00:55:42,768 --> 00:55:47,390
That allows us to manipulate
the underlying properties or

821
00:55:47,390 --> 00:55:50,233
objects that are bound to our form.

822
00:55:50,233 --> 00:55:54,200
So I just pasted in the markup for
our form.

823
00:55:54,200 --> 00:55:55,365
It's very simple.

824
00:55:55,365 --> 00:55:59,301
We have just a simple text field for
the wish text, and

825
00:55:59,301 --> 00:56:04,305
then a button that the user will click
on to add that wish to the list.

826
00:56:04,305 --> 00:56:09,205
And let's start with the easiest part,
which is going to be handling the click

827
00:56:09,205 --> 00:56:13,008
event on our button,
because we already know how to do that.

828
00:56:13,008 --> 00:56:15,271
So let's just start there.

829
00:56:15,271 --> 00:56:20,767
And the first thing that we need to do is
prevent the form from being submitted,

830
00:56:20,767 --> 00:56:26,031
because that is the default behavior
of clicking a button inside of a form.

831
00:56:26,031 --> 00:56:28,877
At least, as far as this is concerned,

832
00:56:28,877 --> 00:56:33,209
it's just basic form processing,
preventDefault().

833
00:56:33,209 --> 00:56:39,862
We'll use the $event object to get access
to preventDefault(), and there we go.

834
00:56:39,862 --> 00:56:44,440
Now, the beautiful thing about this
type of syntax is that we can execute

835
00:56:44,440 --> 00:56:45,952
multiple statements.

836
00:56:45,952 --> 00:56:49,731
So this is going to be a single statement,
and

837
00:56:49,731 --> 00:56:54,212
then we could call a method
to add the wish to our list.

838
00:56:54,212 --> 00:56:57,831
We'll call this method, addNewWish.

839
00:56:57,831 --> 00:57:02,574
And of course, we need to add
this to our component class.

840
00:57:02,574 --> 00:57:05,753
So let's do that before the toggleItem.

841
00:57:05,753 --> 00:57:09,145
This is just a personal preference
of mine, inside of a class,

842
00:57:09,145 --> 00:57:11,899
I'd like to group all of
the like things together.

843
00:57:11,899 --> 00:57:16,519
I want to group the properties together,
I want to group the methods together, and

844
00:57:16,519 --> 00:57:20,754
then I want them in alphabetical order,
because I'm OCD about that stuff.

845
00:57:20,754 --> 00:57:25,187
So, of course,
the code inside of this addNewWish is

846
00:57:25,187 --> 00:57:29,137
simply going to add the wish
to the items array.

847
00:57:29,137 --> 00:57:34,105
And then, ideally, we will also
clear the text box so that the user

848
00:57:34,105 --> 00:57:39,370
doesn't have to clear that out if
they want to rapidly add new wishes.

849
00:57:39,370 --> 00:57:41,915
So that should work, and we're good.

850
00:57:41,915 --> 00:57:48,640
So now, what we need to do is find a way
to bind data to this input element.

851
00:57:48,640 --> 00:57:53,176
And we do that with syntax that's
going to look very similar,

852
00:57:53,176 --> 00:57:58,238
because we essentially combine both
the property binding syntax and

853
00:57:58,238 --> 00:58:00,958
the event binding syntax together.

854
00:58:00,958 --> 00:58:05,392
We start with the square bracket,
followed by the parentheses, and

855
00:58:05,392 --> 00:58:08,611
then we have a special
directive called ngModel.

856
00:58:08,611 --> 00:58:13,231
Now, this is very similar to what
you would find in React and Vue.

857
00:58:13,231 --> 00:58:18,770
We simply are telling Angular, hey,
we have this form field that we

858
00:58:18,770 --> 00:58:25,198
want to bind to a property on our class,
and we can just call this newWishText.

859
00:58:25,198 --> 00:58:31,398
So let's take this property and
define it inside of our component class.

860
00:58:31,398 --> 00:58:33,584
So I'm gonna put this after the items.

861
00:58:33,584 --> 00:58:37,787
Now, of course, down in the terminal,
we see that there's an error, and

862
00:58:37,787 --> 00:58:42,620
that's because we haven't defined this
newWishText property inside of the class.

863
00:58:42,620 --> 00:58:47,091
But even after we do that,
we will still end up with an error.

864
00:58:47,091 --> 00:58:50,191
So let's hop on over to the browser,
and let's see what that error is.

865
00:58:50,191 --> 00:58:56,531
It says that it can't bind ngModel since
it isn't a known property of input.

866
00:58:56,531 --> 00:58:59,742
Now, if you rush on over
to the documentation,

867
00:58:59,742 --> 00:59:05,364
it's not going to give you any hint as to
why you are getting this particular error,

868
00:59:05,364 --> 00:59:08,361
which is frustrating,
but it is what it is.

869
00:59:08,361 --> 00:59:13,621
So instead, what we need to do
is open up the app.module file.

870
00:59:13,621 --> 00:59:17,599
Now, we haven't talked about this file,
because we haven't needed to, but

871
00:59:17,599 --> 00:59:18,151
now we do.

872
00:59:18,151 --> 00:59:22,564
This is a very important file,
because it defines practically

873
00:59:22,564 --> 00:59:26,738
everything that our application
requires in order to run.

874
00:59:26,738 --> 00:59:30,054
Now, the first three statements
are import statements.

875
00:59:30,054 --> 00:59:33,386
It's importing the NgModel decorator.

876
00:59:33,386 --> 00:59:38,095
It's importing this browser module,
which if you hover your mouse over,

877
00:59:38,095 --> 00:59:42,591
it says that it exports required
infrastructure for all Angular apps.

878
00:59:42,591 --> 00:59:47,391
So it's required infrastructure for
our app and every other app.

879
00:59:47,391 --> 00:59:49,310
But then there's also the AppComponent,

880
00:59:49,310 --> 00:59:51,501
which is the component
that we are working with.

881
00:59:51,501 --> 00:59:55,574
But notice the use of
the NgModel decorator.

882
00:59:55,574 --> 01:00:00,931
There's an object that's passed
here that defines the declarations,

883
01:00:00,931 --> 01:00:04,195
the imports, providers, and bootstrap.

884
01:00:04,195 --> 01:00:06,775
So first, we have declarations.

885
01:00:06,775 --> 01:00:12,226
This is a set of components or directives
that belong to this particular module.

886
01:00:12,226 --> 01:00:16,527
So in the case of our application,
we have this AppComponent,

887
01:00:16,527 --> 01:00:20,921
which belongs to this module
because it has been declared here.

888
01:00:20,921 --> 01:00:27,400
The imports are things that are available
to the templates, inside of this module.

889
01:00:27,400 --> 01:00:32,561
The providers are objects that can
be injected to parts of this module.

890
01:00:32,561 --> 01:00:35,563
And then bootstrap is essentially
what is bootstrapped.

891
01:00:35,563 --> 01:00:38,855
This is the entry point of the module.

892
01:00:38,855 --> 01:00:41,898
And so in our case,
once again, it's AppComponent,

893
01:00:41,898 --> 01:00:44,160
that's the entry point of this module.

894
01:00:44,160 --> 01:00:49,040
So what we need to do in order
to use the NgModel directive,

895
01:00:49,040 --> 01:00:54,022
is import the FormsModule, and
Visual Studio Code is being

896
01:00:54,022 --> 01:00:59,221
very helpful and allows us to
import that with a single click.

897
01:00:59,221 --> 01:01:02,591
That comes from @angular/forms.

898
01:01:02,591 --> 01:01:09,169
By importing the FormsModule, we now
have access to that NgModel directive.

899
01:01:09,169 --> 01:01:12,589
Not just inside of our AppComponent,
but for

900
01:01:12,589 --> 01:01:17,629
any other component that we would
define inside of our application

901
01:01:17,629 --> 01:01:22,855
as long as it is part of this AppModule,
and then the error goes away.

902
01:01:22,855 --> 01:01:25,996
So we are now a step closer
to making this work.

903
01:01:25,996 --> 01:01:31,501
Let's go back to our component code, and
let's do something inside of addNewWish.

904
01:01:31,501 --> 01:01:38,462
So we have now bound this newWishText
property to that input element.

905
01:01:38,462 --> 01:01:42,537
So whenever the value of
that input element changes,

906
01:01:42,537 --> 01:01:47,434
it will be reflected here inside
of this newWishText property.

907
01:01:47,434 --> 01:01:53,833
So we want to add this
newWishItem to our items array.

908
01:01:53,833 --> 01:01:59,017
So we will simply create a new WishItem,
the text is given to us,

909
01:01:59,017 --> 01:02:03,914
thanks to that NewWishText property,
and the Boolean value

910
01:02:03,914 --> 01:02:08,921
signifying whether or
not the wish is fulfilled as optional.

911
01:02:08,921 --> 01:02:13,956
And I would imagine that to any new wish
would just be unfulfilled by default.

912
01:02:13,956 --> 01:02:16,332
So that's all that we should have to do.

913
01:02:16,332 --> 01:02:23,318
And then we could set the value of
newWishText equal to an empty string.

914
01:02:23,318 --> 01:02:28,351
Essentially clearing out that value so
that the user can then have

915
01:02:28,351 --> 01:02:33,672
a fresh form and they could type in
a new wish if they wanted to do that.

916
01:02:33,672 --> 01:02:37,054
So let's go back to the browser,
and let's test this out.

917
01:02:37,054 --> 01:02:43,641
We wanna wish of $100 billion.

918
01:02:43,641 --> 01:02:47,448
I think that's right, and
[LAUGH] let's click on Add Wish.

919
01:02:47,448 --> 01:02:52,184
Okay, well,
a wish item was added to our list, but

920
01:02:52,184 --> 01:02:55,612
there's no text there whatsoever.

921
01:02:55,612 --> 01:03:00,113
So let's pull up the developer tools,
and let's take a look at the console,

922
01:03:00,113 --> 01:03:03,448
because it's going to give
us a very descriptive error.

923
01:03:03,448 --> 01:03:09,049
And we can see right here,
if ngModel is used within a form tag,

924
01:03:09,049 --> 01:03:12,749
either the name attribute must be set, or

925
01:03:12,749 --> 01:03:18,797
the form control must be defined
as standalone in ngModel options.

926
01:03:18,797 --> 01:03:20,562
So this is a very simple fix.

927
01:03:20,562 --> 01:03:22,275
We just need to go to our template.

928
01:03:22,275 --> 01:03:27,608
Let's add a name attribute
to our input element here.

929
01:03:27,608 --> 01:03:32,596
And it doesn't matter what this is, let's
just give it the name of newWishText, or

930
01:03:32,596 --> 01:03:33,381
let's not.

931
01:03:33,381 --> 01:03:36,617
Well, let's still do newWishText, but

932
01:03:36,617 --> 01:03:40,869
let's use hyphens in between
the words there, just so

933
01:03:40,869 --> 01:03:45,861
that we can see that there is no
relationship between the name and

934
01:03:45,861 --> 01:03:49,757
the property that is bound
to this input element.

935
01:03:49,757 --> 01:03:52,718
So with that simple change,
we can go back to the browser.

936
01:03:52,718 --> 01:03:57,721
We want $100 billion.

937
01:03:57,721 --> 01:04:02,373
And whenever we add wish,
there we have that wish item.

938
01:04:02,373 --> 01:04:05,153
And so,
now that we have this functionality,

939
01:04:05,153 --> 01:04:07,163
let's go back to our component.

940
01:04:07,163 --> 01:04:11,954
Let's comment out those
hard-coded wish items because

941
01:04:11,954 --> 01:04:15,854
now we have the ability
to add items on the fly.

942
01:04:15,854 --> 01:04:19,198
And this also gives us
the ability to actually test and

943
01:04:19,198 --> 01:04:23,821
make sure that this application is going
to work how we would expect it to.

944
01:04:23,821 --> 01:04:25,826
So, let's go back to the browser.

945
01:04:25,826 --> 01:04:31,289
I do want to add another div
here with a class of row.

946
01:04:31,289 --> 01:04:34,570
Let's also set some
margin to the top here.

947
01:04:34,570 --> 01:04:39,259
And this div element is going to serve
as the container for the content or

948
01:04:39,259 --> 01:04:41,617
rather for the list, I should say.

949
01:04:41,617 --> 01:04:45,688
So we'll have our list
inside of this div element,

950
01:04:45,688 --> 01:04:50,811
we'll also have that message if
there are no wishes to display.

951
01:04:50,811 --> 01:04:54,722
Just so that there's a little bit of
white space between that and I like that.

952
01:04:54,722 --> 01:04:57,935
So, now I wish for coffee, and

953
01:04:57,935 --> 01:05:02,888
voilà our application
is working as intended.

954
01:05:02,888 --> 01:05:05,110
Sometimes when you use ngModel,

955
01:05:05,110 --> 01:05:08,848
you want to be notified when
that model values changes.

956
01:05:08,848 --> 01:05:14,579
For example, in the previous lesson,
we used the ngModel directive on our input

957
01:05:14,579 --> 01:05:20,075
box so that the value of this input box
is bound to a property in our component.

958
01:05:20,075 --> 01:05:23,997
And so, we could also set this up so
that as the user types,

959
01:05:23,997 --> 01:05:27,536
we are notified of that change and
we get that value.

960
01:05:27,536 --> 01:05:31,139
Now, I don't necessarily want to
do that for the input box, but

961
01:05:31,139 --> 01:05:34,432
I do want to use this functionality
to implement a filter.

962
01:05:34,432 --> 01:05:39,068
So that the user can filter the list so
that they can see all of the wishes,

963
01:05:39,068 --> 01:05:43,416
only the fulfilled wishes, and
also only the unfulfilled wishes.

964
01:05:43,416 --> 01:05:47,548
So, the first thing I want to do is
uncomment these hard-coded wish items

965
01:05:47,548 --> 01:05:50,094
because this gives us
some data to work with.

966
01:05:50,094 --> 01:05:54,254
And we don't have to manually, [LAUGH]
add them every time the page reloads,

967
01:05:54,254 --> 01:05:56,017
that would be rather annoying.

968
01:05:56,017 --> 01:06:00,443
The next thing I want to do
is add the markup for the UI.

969
01:06:00,443 --> 01:06:05,389
And this is going to be just a simple
select element that has three

970
01:06:05,389 --> 01:06:09,892
possible options, all,
unfulfilled, and fulfilled.

971
01:06:09,892 --> 01:06:12,021
Now, the values are arbitrary,

972
01:06:12,021 --> 01:06:16,210
we can technically use any string
value that we would want to use.

973
01:06:16,210 --> 01:06:20,927
I opted to use numeric values because
I figured that that would be a little

974
01:06:20,927 --> 01:06:21,867
more simple.

975
01:06:21,867 --> 01:06:24,414
And since we're here, let's go ahead and

976
01:06:24,414 --> 01:06:29,032
let's use the ngModel directive to bind
this to a property on our component.

977
01:06:29,032 --> 01:06:33,058
Let's just call it listFilter
because that is exactly what it is.

978
01:06:33,058 --> 01:06:35,664
Let's go ahead and
define that inside of our component.

979
01:06:35,664 --> 01:06:39,837
I'm gonna put this after the items array,
and

980
01:06:39,837 --> 01:06:45,615
this is a string because the value
of this listFilter model comes

981
01:06:45,615 --> 01:06:51,182
from the options value attribute,
which is always a string.

982
01:06:51,182 --> 01:06:54,151
And we're going to initialize
it as an empty string.

983
01:06:54,151 --> 01:06:59,400
Now, let's go to the browser and we are,
of course, going to see this combo box.

984
01:06:59,400 --> 01:07:02,339
Notice that there is nothing
selected by default and

985
01:07:02,339 --> 01:07:05,610
that makes perfect sense because
if we look at the markup,

986
01:07:05,610 --> 01:07:08,972
there was not the selected flag
on any one of these options.

987
01:07:08,972 --> 01:07:10,853
So, of course it's not selected.

988
01:07:10,853 --> 01:07:15,215
However, since this is now bound
to this listFilter property,

989
01:07:15,215 --> 01:07:17,974
we can use this value to set the default.

990
01:07:17,974 --> 01:07:23,607
So, I think all should be the default,
we can set the default value to 0 and

991
01:07:23,607 --> 01:07:28,896
that is going to automatically select
the all option in the combo box.

992
01:07:28,896 --> 01:07:33,769
If we set it to 2,
then that would set it to fulfilled.

993
01:07:33,769 --> 01:07:38,715
I guess some people would want to see
that by default, but I don't think so,

994
01:07:38,715 --> 01:07:41,129
I think all is a good starting point.

995
01:07:41,129 --> 01:07:47,412
So, now that we have that all done,
we need to set up our select element so

996
01:07:47,412 --> 01:07:51,947
that it uses a special
event called ngModelChange.

997
01:07:51,947 --> 01:07:57,365
This is an event that only
occurs when the model changes.

998
01:07:57,365 --> 01:08:03,300
So you can only use this event on
elements that use the ngModel directive.

999
01:08:03,300 --> 01:08:08,000
Otherwise, it's pointless because it
is only for when the model changes.

1000
01:08:08,000 --> 01:08:10,982
And that's not the only
special thing about this.

1001
01:08:10,982 --> 01:08:17,076
The events object for this event
is not your typical event object.

1002
01:08:17,076 --> 01:08:21,167
This contains the new value of the model.

1003
01:08:21,167 --> 01:08:26,100
So as the user selects a different option,
the value of that

1004
01:08:26,100 --> 01:08:30,933
option is going to be passed
to whatever method we choose,

1005
01:08:30,933 --> 01:08:37,666
which I've called this filterChanged and
this dollar sign event is that value.

1006
01:08:37,666 --> 01:08:41,515
So let's go ahead and
define this inside of our component, and

1007
01:08:41,515 --> 01:08:44,136
we can write out that
value to the console.

1008
01:08:44,136 --> 01:08:47,892
So I'm gonna call the parameter value,
I'm going to type it as any.

1009
01:08:47,892 --> 01:08:50,612
And then we will simply
write out that value so

1010
01:08:50,612 --> 01:08:53,546
that whenever we go to the browser,
by default,

1011
01:08:53,546 --> 01:08:58,069
we're not going to see anything because
the model value hasn't changed.

1012
01:08:58,069 --> 01:09:00,772
However, if we change it to fulfilled,

1013
01:09:00,772 --> 01:09:04,434
we can see the value of 2
being written to the console.

1014
01:09:04,434 --> 01:09:07,216
If we change it to unfulfilled, we see 1.

1015
01:09:07,216 --> 01:09:11,000
If we change it back to all,
we see the value of 0.

1016
01:09:11,000 --> 01:09:15,897
So, we can use this functionality
to essentially filter the items

1017
01:09:15,897 --> 01:09:17,913
that we see in the browser.

1018
01:09:17,913 --> 01:09:22,013
However, we don't want to
actually filter the items array

1019
01:09:22,014 --> 01:09:26,777
because this is our single source of
truth when it comes to our items.

1020
01:09:26,777 --> 01:09:31,031
So what we could do is have
a visibleItems property,

1021
01:09:31,031 --> 01:09:35,286
which will be essentially
a copy of our items array,

1022
01:09:35,286 --> 01:09:39,460
except that this will
contain our filtered items.

1023
01:09:39,460 --> 01:09:42,819
So we will initialize it
with the items array.

1024
01:09:42,819 --> 01:09:48,134
And then inside the filterChanged,
you will set a new value for visibleItems.

1025
01:09:48,134 --> 01:09:53,764
And of course, that's going to be based
upon the new value of our listFilter.

1026
01:09:53,764 --> 01:10:01,455
So, if it is 0 then of course the visible
items will be all of our items.

1027
01:10:01,455 --> 01:10:06,891
Then we can have an else if to check
if value is equal to the string

1028
01:10:06,891 --> 01:10:13,267
of 1 in which case, we'll set visible
items to a filtered list of items.

1029
01:10:13,267 --> 01:10:18,014
And that filter is going to be
based upon if the item is not

1030
01:10:18,014 --> 01:10:23,172
completed because this is for
showing unfulfilled wishes.

1031
01:10:23,172 --> 01:10:27,430
And of course,
if neither of those cases are true,

1032
01:10:27,430 --> 01:10:32,393
then what we want to do is
display only the fulfilled items.

1033
01:10:32,393 --> 01:10:33,717
So there we go.

1034
01:10:33,717 --> 01:10:38,889
All we need to do now is use our
new visibleItems in our templates.

1035
01:10:38,889 --> 01:10:42,969
And really we want to do this
in two places whenever we check

1036
01:10:42,969 --> 01:10:44,729
the length of the items.

1037
01:10:44,729 --> 01:10:48,865
Because it's possible that
the user will select a filter and

1038
01:10:48,865 --> 01:10:51,622
there will not be any wishes to display,

1039
01:10:51,622 --> 01:10:56,022
in which case we want the message
to say that there are no wishes.

1040
01:10:56,022 --> 01:10:59,615
So we will want to use visibleItems there.

1041
01:10:59,615 --> 01:11:03,294
And then whenever we display
the list of those items,

1042
01:11:03,294 --> 01:11:06,010
we only want to show the visibleItems.

1043
01:11:06,010 --> 01:11:08,806
So, let's go to the browser and
let's check this out.

1044
01:11:08,806 --> 01:11:11,676
Of course,
we are displaying all items now, but

1045
01:11:11,676 --> 01:11:14,202
let's change the filter to unfulfilled.

1046
01:11:14,202 --> 01:11:15,432
We see unfulfilled.

1047
01:11:15,432 --> 01:11:20,062
Let's change it to fulfilled and
we see the fulfilled item.

1048
01:11:20,062 --> 01:11:23,282
Now, on the surface, it looks like
this is going to work for us, but

1049
01:11:23,282 --> 01:11:26,177
there's quite a few bugs here
that we would need to sort out.

1050
01:11:26,177 --> 01:11:29,078
First of all, I have unfulfilled selected.

1051
01:11:29,078 --> 01:11:32,332
So of course,
we only see the unfulfilled items.

1052
01:11:32,332 --> 01:11:37,279
So, we want to wish for $100 billion.

1053
01:11:37,279 --> 01:11:41,252
And whenever we add this wish,
we don't see it listed here.

1054
01:11:41,252 --> 01:11:46,315
And the reason is very simple,
because while we did add that

1055
01:11:46,315 --> 01:11:52,196
wish to the items array,
the visibleItems array, Was not updated.

1056
01:11:52,196 --> 01:11:54,538
So if we refresh this filter and

1057
01:11:54,538 --> 01:11:58,508
go back to unfulfilled,
then we will see that item.

1058
01:11:58,508 --> 01:12:03,552
The second bug is that if we complete or
uncomplete any one of these,

1059
01:12:03,552 --> 01:12:08,510
once again, it's not going to
automatically update what we see in

1060
01:12:08,510 --> 01:12:13,201
the browser because we have to
essentially change the filter so

1061
01:12:13,201 --> 01:12:18,094
that the visible items array is
updated with the new set of items.

1062
01:12:18,094 --> 01:12:21,538
Now those are bugs that we
can pretty easily fixed.

1063
01:12:21,538 --> 01:12:26,166
We would just need to apply
the filter anytime that the main

1064
01:12:26,166 --> 01:12:28,250
items array was changed.

1065
01:12:28,250 --> 01:12:30,502
However, there's a better approach.

1066
01:12:30,502 --> 01:12:35,643
We can turn our visible items array
into a getter, which will allow us

1067
01:12:35,643 --> 01:12:41,153
to react to just about any change that
we make to the original items array.

1068
01:12:41,153 --> 01:12:43,194
And we'll look at that in the next lesson.

1069
01:12:43,194 --> 01:12:48,124
In the previous lesson, you learned
about the ngModelChange event and

1070
01:12:48,124 --> 01:12:52,329
how you can use it to react to
when the ngModelValue changes.

1071
01:12:52,329 --> 01:12:54,010
And it's a wonderful tool.

1072
01:12:54,010 --> 01:12:57,575
It's something that you'll use
quite regularly, I would imagine,

1073
01:12:57,575 --> 01:12:58,790
in your applications.

1074
01:12:58,790 --> 01:13:02,860
However, I don't think it
was the appropriate tool for

1075
01:13:02,860 --> 01:13:05,380
us to use to implement our filter.

1076
01:13:05,380 --> 01:13:08,529
Because if you'll remember,
I talked about two bugs.

1077
01:13:08,529 --> 01:13:13,599
And we could get around those bugs
with minimal effort because all

1078
01:13:13,599 --> 01:13:19,498
we would need to do is be sure that the
visible items array was updated any time

1079
01:13:19,498 --> 01:13:25,418
that we made a change to the items array
or to the objects inside of the array.

1080
01:13:25,418 --> 01:13:30,563
And so instead, what we can do is
use a feature not from Angular,

1081
01:13:30,563 --> 01:13:36,398
but from JavaScript, we can repurpose
the visible items to be a getter.

1082
01:13:36,398 --> 01:13:38,841
So that it returns an array.

1083
01:13:38,841 --> 01:13:43,833
But that array is of course,
going to be dependent upon the filter.

1084
01:13:43,833 --> 01:13:47,328
It's either going to return all or
the items,

1085
01:13:47,328 --> 01:13:51,728
only the fulfilled items and
only the unfulfilled items.

1086
01:13:51,728 --> 01:13:56,566
So we can essentially take the code
from our filter change method, and

1087
01:13:56,566 --> 01:13:59,519
we can paste that inside of visible items.

1088
01:13:59,519 --> 01:14:00,574
But let's do this.

1089
01:14:00,574 --> 01:14:03,656
Let's create a variable core value,

1090
01:14:03,656 --> 01:14:08,386
we will initialize it with
the value from the list filter.

1091
01:14:08,386 --> 01:14:12,554
That way we don't have to change
value all of the time, and

1092
01:14:12,554 --> 01:14:16,910
instead of setting a value here,
all we need to do is return.

1093
01:14:16,910 --> 01:14:21,984
And the beautiful thing about this
is that now we are basing everything

1094
01:14:21,984 --> 01:14:27,144
off of the items array so that anytime
that the items array is modified,

1095
01:14:27,144 --> 01:14:30,154
or the objects inside of it are modified,

1096
01:14:30,154 --> 01:14:34,810
it's going to automatically be
reflected within the browser.

1097
01:14:34,810 --> 01:14:37,868
We don't have to write any
extra code to make this work.

1098
01:14:37,868 --> 01:14:44,068
Now, unfortunately, this means that we
don't need to use the ngModelChange event.

1099
01:14:44,068 --> 01:14:47,312
So we can get rid of that
FilterChanged method.

1100
01:14:47,312 --> 01:14:53,572
We can also get rid of the ngModelChange
event on our select element.

1101
01:14:53,572 --> 01:14:58,428
But with that very simple change, we are
going to have the functionality that we

1102
01:14:58,428 --> 01:15:03,368
wanted, and we aren't going to have the
bugs that we had in the previous lesson.

1103
01:15:03,368 --> 01:15:04,604
So let's go to the browser.

1104
01:15:04,604 --> 01:15:06,859
Of course, we see all of the items.

1105
01:15:06,859 --> 01:15:11,052
Let's make sure that the filtering works,
which unfulfilled works and

1106
01:15:11,052 --> 01:15:12,157
fulfilled works.

1107
01:15:12,157 --> 01:15:15,466
So the first bug was adding an item.

1108
01:15:15,466 --> 01:15:19,410
So let's go to the unfulfilled items and

1109
01:15:19,410 --> 01:15:23,819
let's add in our wish for $100 billion.

1110
01:15:23,819 --> 01:15:26,171
And whenever we add this item,

1111
01:15:26,171 --> 01:15:31,522
it should automatically populate
here in our unfulfilled item list.

1112
01:15:31,522 --> 01:15:32,759
And it does.

1113
01:15:32,759 --> 01:15:33,594
So that's perfect.

1114
01:15:33,594 --> 01:15:38,667
That worked exactly as it should have,
and we didn't have to write any extra

1115
01:15:38,667 --> 01:15:43,423
code to make sure that the visible
items array is in sync with the items,

1116
01:15:43,423 --> 01:15:48,365
because now visible items is completely
dependent upon the items array.

1117
01:15:48,365 --> 01:15:51,961
So now let's test the other bug.

1118
01:15:51,961 --> 01:15:57,660
If we uncheck Get Coffee, that should
disappear from this list and it does.

1119
01:15:57,660 --> 01:16:01,673
We see our message saying that
there are no wishes to display and

1120
01:16:01,673 --> 01:16:05,471
if we view the unfulfilled of course,
Get Coffee is there.

1121
01:16:05,471 --> 01:16:09,731
If we check this again, it should
disappear and if we view all of them,

1122
01:16:09,731 --> 01:16:12,560
then Get Coffee will be
the only one selected.

1123
01:16:12,560 --> 01:16:13,996
So there we go.

1124
01:16:13,996 --> 01:16:17,541
We have our filter completely implemented.

1125
01:16:17,541 --> 01:16:21,405
We don't have to do anything extra to
get the functionality that we want.

1126
01:16:21,405 --> 01:16:26,398
Now, I think we can make our code just
a little bit cleaner if we do something

1127
01:16:26,398 --> 01:16:27,202
like this.

1128
01:16:27,202 --> 01:16:30,819
I'm going to define
a variable called filters and

1129
01:16:30,819 --> 01:16:33,928
this is going to be
an array of our filters.

1130
01:16:33,928 --> 01:16:38,727
So basically what we want are functions
that are going to be used as

1131
01:16:38,727 --> 01:16:41,446
the callback for the filter method.

1132
01:16:41,446 --> 01:16:45,289
So that for index 0,
that is to display all of our items,

1133
01:16:45,289 --> 01:16:49,937
a callback method is simply going
to have something that's truthy so

1134
01:16:49,937 --> 01:16:53,964
that it will display everything and
that's going to work.

1135
01:16:53,964 --> 01:16:58,030
Let's type our parameter
here to wish item, and

1136
01:16:58,030 --> 01:17:02,103
let's use this as a basis for
the other filters.

1137
01:17:02,103 --> 01:17:06,966
Now the second filter is for
unfulfilled items so we want to check and

1138
01:17:06,966 --> 01:17:09,609
make sure that is complete as false,

1139
01:17:09,609 --> 01:17:14,414
otherwise we want is complete to
be true for the fulfilled wishes.

1140
01:17:14,414 --> 01:17:17,681
So that's inside of our
visible items getter,

1141
01:17:17,681 --> 01:17:22,104
we can essentially get rid of all
of this code and we will do this.

1142
01:17:22,104 --> 01:17:26,316
We will return items,
we'll call a filter, but

1143
01:17:26,316 --> 01:17:32,497
then we will use the filters and
the index is going to be the list filter.

1144
01:17:32,497 --> 01:17:35,493
So this should work or maybe it won't, but

1145
01:17:35,493 --> 01:17:39,833
we might have to change list
filter to any, so let's do that.

1146
01:17:39,833 --> 01:17:41,561
Let's go back to the browser.

1147
01:17:41,561 --> 01:17:42,669
Let's try this out.

1148
01:17:42,669 --> 01:17:44,231
So of course, all works.

1149
01:17:44,231 --> 01:17:46,304
Unfulfilled, appears to work.

1150
01:17:46,304 --> 01:17:47,883
Fulfilled, appears to work.

1151
01:17:47,883 --> 01:17:51,049
If we uncheck Get Coffee, that disappears.

1152
01:17:51,049 --> 01:17:52,100
There it is.

1153
01:17:52,100 --> 01:17:53,891
Let's add an item.

1154
01:17:53,891 --> 01:17:57,082
I'll be happy with a 100,000.

1155
01:17:57,082 --> 01:17:58,475
So let's do that.

1156
01:17:58,475 --> 01:18:00,716
Let's add it, and voila.

1157
01:18:00,716 --> 01:18:05,512
So there are times when using
the NGModelChange event is appropriate.

1158
01:18:05,512 --> 01:18:08,292
There are times when it's not appropriate.

1159
01:18:08,292 --> 01:18:14,422
And for our filter feature, a simple
getter was the appropriate approach.

1160
01:18:14,422 --> 01:18:18,763
We haven't really done a whole lot with
our application, but already things

1161
01:18:18,763 --> 01:18:23,522
are becoming a little cluttered, both from
the code aspect as well as the template.

1162
01:18:23,522 --> 01:18:26,172
And we essentially have
three distinct pieces.

1163
01:18:26,172 --> 01:18:30,155
If we really think about it,
we have the user input,

1164
01:18:30,155 --> 01:18:35,327
we have the filter and then we have
just displaying our items array.

1165
01:18:35,327 --> 01:18:39,842
And the reason why I say that these
are three distinct pieces is because they

1166
01:18:39,842 --> 01:18:42,576
essentially have their own functionality.

1167
01:18:42,576 --> 01:18:48,906
The user input is strictly for getting
user input and modifying the items array.

1168
01:18:48,906 --> 01:18:53,724
The filter is for, well, is for
filtering the items array and

1169
01:18:53,724 --> 01:18:57,535
then the list is for
displaying the items array.

1170
01:18:57,535 --> 01:19:01,594
Now, of course, they all have
that items array in common, but

1171
01:19:01,594 --> 01:19:03,826
they do different things with it.

1172
01:19:03,826 --> 01:19:08,446
So first of all, it's very easy to
get stuck in the mindset of only

1173
01:19:08,446 --> 01:19:12,145
creating components for
things that can be reused.

1174
01:19:12,145 --> 01:19:17,440
And yes, it is perfectly fine to
create components that can be reused,

1175
01:19:17,440 --> 01:19:21,774
but we use components for
a variety of different reasons.

1176
01:19:21,774 --> 01:19:27,266
Most of all, we use components because it
organizes our application Into smaller

1177
01:19:27,266 --> 01:19:32,532
pieces, which makes it easier to develop
and maintain and add more features.

1178
01:19:32,532 --> 01:19:37,318
So starting in this lesson,
we are going to create three components,

1179
01:19:37,318 --> 01:19:40,899
one for each of the three
pieces of our application.

1180
01:19:40,899 --> 01:19:44,127
And in this lesson,
we're going to start with just the list,

1181
01:19:44,127 --> 01:19:46,748
because that's the easiest
thing that we can do.

1182
01:19:46,748 --> 01:19:50,154
So essentially what I want
to do is take the list out.

1183
01:19:50,154 --> 01:19:52,343
Now it's more than just the list.

1184
01:19:52,343 --> 01:19:56,087
It's also the message that will
display that there are no wishes

1185
01:19:56,087 --> 01:20:00,550
to display because I think that the list
should be responsible for that.

1186
01:20:00,550 --> 01:20:04,438
So I wanna take this out so
that here inside of our app component,

1187
01:20:04,438 --> 01:20:06,530
we would use something like this.

1188
01:20:06,530 --> 01:20:11,515
It would be simply wish-list, and
then we could supply the visible

1189
01:20:11,515 --> 01:20:15,400
items to a property on this
component called items.

1190
01:20:15,400 --> 01:20:20,775
So we would have visible items just like
that, bound to a property called items.

1191
01:20:20,775 --> 01:20:24,695
And then that simplifies
this component's template.

1192
01:20:24,695 --> 01:20:28,831
And it will also help simplify
the code for this component,

1193
01:20:28,831 --> 01:20:32,638
because the toggle item method
can be extracted out and

1194
01:20:32,638 --> 01:20:37,871
I think that is the only thing that we
need as far as displaying those items.

1195
01:20:37,871 --> 01:20:40,017
So now let's create that component.

1196
01:20:40,017 --> 01:20:41,461
We can do it manually but

1197
01:20:41,461 --> 01:20:45,660
there are steps involved if we
are creating the component manually.

1198
01:20:45,660 --> 01:20:50,470
Not only do we have to create code for it
but then we have to import components so

1199
01:20:50,470 --> 01:20:55,206
that we can use the component decorator so
that we can define the selector and

1200
01:20:55,206 --> 01:20:56,570
the template.

1201
01:20:56,570 --> 01:21:00,290
We don't necessarily always need CSS,
but it could be useful.

1202
01:21:00,290 --> 01:21:05,205
But we also need to modify the module
file because we need to import any

1203
01:21:05,205 --> 01:21:09,018
new component that we add so
that we can declare that so

1204
01:21:09,018 --> 01:21:12,440
that we can then use it
within our application.

1205
01:21:12,440 --> 01:21:14,400
Because if we don't declare it,

1206
01:21:14,400 --> 01:21:17,765
then it's not going to know
that that component exists.

1207
01:21:17,765 --> 01:21:20,724
So it's a lot of things
that we have to do and

1208
01:21:20,724 --> 01:21:25,834
thankfully the Angular CLI gives us
the ability to generate a component.

1209
01:21:25,834 --> 01:21:30,445
We use the ng command, we follow
that up with generate component, and

1210
01:21:30,445 --> 01:21:33,650
then we specify the name
of that component.

1211
01:21:33,650 --> 01:21:37,560
I'm gonna call this wish list,
which is going to make things much more

1212
01:21:37,560 --> 01:21:40,760
confusing because our
application is called wishlist.

1213
01:21:40,760 --> 01:21:43,809
But for something that
displays the list of wishes,

1214
01:21:43,809 --> 01:21:48,100
I can't really think of anything
better as far as a name is concerned.

1215
01:21:48,100 --> 01:21:50,045
Now, here in the command line,

1216
01:21:50,045 --> 01:21:53,374
we can see that there are four
files that were created.

1217
01:21:53,374 --> 01:21:59,254
They are inside of a directory called
wishlist which is a subdirectory of app.

1218
01:21:59,254 --> 01:22:03,092
And we have a template,
we have a spec file for test,

1219
01:22:03,092 --> 01:22:06,777
we have the code file and
then we have the CSS file.

1220
01:22:06,777 --> 01:22:11,599
So all four of those files
were automatically created for

1221
01:22:11,599 --> 01:22:14,620
us and then the module was updated.

1222
01:22:14,620 --> 01:22:20,405
So let's take a look at that and we will
see that on line six we now are importing

1223
01:22:20,405 --> 01:22:26,230
that wish list component and on line 11,
it was added to the declarations.

1224
01:22:26,230 --> 01:22:30,780
So we didn't have to do any of that,
the angular CLI did that for us.

1225
01:22:30,780 --> 01:22:31,430
So great.

1226
01:22:31,430 --> 01:22:33,980
I love tools that make our lives easier.

1227
01:22:33,980 --> 01:22:38,220
So now let's go to our
wish list directory.

1228
01:22:38,220 --> 01:22:40,130
Let's open up the template.

1229
01:22:40,130 --> 01:22:45,030
I'm going to paste in that code that I
took out of the app components template,

1230
01:22:45,030 --> 01:22:50,250
because this is essentially the template,
for this new wishlist component.

1231
01:22:50,250 --> 01:22:54,770
Now, this isn't working with
a property called visible Items this

1232
01:22:54,770 --> 01:22:57,875
is going to work with
a property called Items.

1233
01:22:57,875 --> 01:23:02,741
And the reason why is because well,
that's what I want to do here when I

1234
01:23:02,741 --> 01:23:08,270
changed the apps template to just wish
list and to use this items property.

1235
01:23:08,270 --> 01:23:11,868
We can make this whatever this is
completely arbitrary, but for me,

1236
01:23:11,868 --> 01:23:14,680
personally, it makes
sense to call this Items.

1237
01:23:14,680 --> 01:23:18,180
I guess we could call it Wishes
if we wanted to do that.

1238
01:23:18,180 --> 01:23:19,420
And let's do that.

1239
01:23:19,420 --> 01:23:20,860
That actually might be better.

1240
01:23:20,860 --> 01:23:25,312
So let's go back to the Wishlist template,
and let's change that so

1241
01:23:25,312 --> 01:23:27,510
that we will be working with.

1242
01:23:27,510 --> 01:23:32,657
Wishes instead of items and
we also need this toggle item method.

1243
01:23:32,657 --> 01:23:38,137
So let's go to the apps code let's
take out that toggle item method,

1244
01:23:38,137 --> 01:23:43,709
we're gonna cut that out and
we're going to paste it inside of the wish

1245
01:23:43,709 --> 01:23:48,820
lists component and we also need
to import the wish Item class.

1246
01:23:48,820 --> 01:23:52,380
Now, we still need that inside of the app
component, so we're gonna leave it.

1247
01:23:52,380 --> 01:23:56,060
We're just gonna copy that
line where we import that and

1248
01:23:56,060 --> 01:23:59,780
we will paste it inside of
the wishlist component.

1249
01:23:59,780 --> 01:24:03,710
And so now we just have
errors inside of two files.

1250
01:24:03,710 --> 01:24:08,200
One is the app components template,
so let's take a look there.

1251
01:24:08,200 --> 01:24:12,426
We're going to see that the error says
that wishlist is not a known element,

1252
01:24:12,426 --> 01:24:15,410
and that's interesting
because we just created it.

1253
01:24:15,410 --> 01:24:21,050
However, if we take a look at the wishlist
component notice what the selector is.

1254
01:24:21,050 --> 01:24:24,290
It is app-wish-list.

1255
01:24:24,290 --> 01:24:26,540
That's a little difficult to say.

1256
01:24:26,540 --> 01:24:31,180
The reason why we have this app prefix
is because this is the app module.

1257
01:24:31,180 --> 01:24:33,107
So some people leave that.

1258
01:24:33,107 --> 01:24:37,620
I typically don't unless if there's
some kind of naming collision because

1259
01:24:37,620 --> 01:24:39,675
that's exactly what this is for.

1260
01:24:39,675 --> 01:24:44,691
This is to help avoid naming collisions
but we're only going to have one wishlist.

1261
01:24:44,691 --> 01:24:48,737
So let's just call it wishlist so
we'll save that we can go back to

1262
01:24:48,737 --> 01:24:52,950
the apps template and we're going
to see that that error goes away.

1263
01:24:52,950 --> 01:24:56,405
So we're good there, but
we still have another one that

1264
01:24:56,405 --> 01:25:00,930
it can't bind to wishes since it
isn't a known property of wish-list.

1265
01:25:00,930 --> 01:25:05,600
Well, that makes perfect sense because we
haven't defined a property called wishes.

1266
01:25:05,600 --> 01:25:11,340
However, it makes us think that we
could get away with doing something

1267
01:25:11,340 --> 01:25:16,788
like this to where we define that
property which is going to be typed

1268
01:25:16,788 --> 01:25:21,944
as an array of wish items and
that's going to get rid of one error

1269
01:25:21,944 --> 01:25:27,750
because we had the same error
inside of the wishlist's template.

1270
01:25:27,750 --> 01:25:29,354
If I took out that wishes property,

1271
01:25:29,354 --> 01:25:32,030
then we would have an error on
line one where we used wishes,

1272
01:25:32,030 --> 01:25:35,310
we would have another error on line seven,
where we used wishes as well.

1273
01:25:35,310 --> 01:25:39,020
But that didn't take away
the error from the app component.

1274
01:25:39,020 --> 01:25:41,650
It still says, can't bind to wishes.

1275
01:25:41,650 --> 01:25:45,030
Well, here's the thing about
components that have input.

1276
01:25:45,030 --> 01:25:47,410
Now the way that this is written,

1277
01:25:47,410 --> 01:25:53,410
we are providing input to a property
called Wishes for the Wishlist component.

1278
01:25:53,410 --> 01:25:58,730
But we have to explicitly
say that wishes is input.

1279
01:25:58,730 --> 01:26:02,430
And we do that by going back
to our wishlist component.

1280
01:26:02,430 --> 01:26:05,530
And we are going to use
an input decorator.

1281
01:26:05,530 --> 01:26:08,581
We need to import this
from Angular core and

1282
01:26:08,581 --> 01:26:13,830
then we simply decorate the properties
that we want to use as input.

1283
01:26:13,830 --> 01:26:16,180
So wishes is going to be input.

1284
01:26:16,180 --> 01:26:20,000
So we will use the input
decorator before that.

1285
01:26:20,000 --> 01:26:23,285
And by just that simple change,
the error goes away,

1286
01:26:23,285 --> 01:26:26,040
we can see that our application compiles.

1287
01:26:26,040 --> 01:26:28,385
And whenever we go to the browser, well,

1288
01:26:28,385 --> 01:26:32,640
it doesn't look the same because
the styling is a little bit different.

1289
01:26:32,640 --> 01:26:34,650
And we did add some CSS, didn't we?

1290
01:26:34,650 --> 01:26:38,770
So let's open up the CSS for
the app component.

1291
01:26:38,770 --> 01:26:41,605
Let's take out this wishlist class, and

1292
01:26:41,605 --> 01:26:46,500
we're going to put that inside
of the wishlist components CSS.

1293
01:26:46,500 --> 01:26:48,700
Because it makes sense to put this here.

1294
01:26:48,700 --> 01:26:52,900
This is for the wish-list itself,
so we can go back to browser.

1295
01:26:52,900 --> 01:26:57,500
And you're seeing those dots and
then seeing them gone

1296
01:26:57,500 --> 01:27:02,100
does kind of accentuate how
our list is indented over.

1297
01:27:02,100 --> 01:27:04,180
So let's get rid of that padding.

1298
01:27:04,180 --> 01:27:08,680
So we'll set padding zero and
that should scoot that a little bit over.

1299
01:27:08,680 --> 01:27:09,540
And it does.

1300
01:27:09,540 --> 01:27:12,130
I would like that to be flush, but well.

1301
01:27:12,130 --> 01:27:14,461
So everything works as it did before but

1302
01:27:14,461 --> 01:27:18,110
our application is just
a little bit more organized.

1303
01:27:18,110 --> 01:27:19,432
And in the next lesson,

1304
01:27:19,432 --> 01:27:24,146
we are going to improve that organization
even more by creating another component.

1305
01:27:24,146 --> 01:27:28,877
The next piece of functionality that we
will extract into its own component is

1306
01:27:28,877 --> 01:27:32,754
the form at the top of our application,
so the user input form.

1307
01:27:32,754 --> 01:27:37,382
So that whenever they type into the text
box, click on the Add Wish button,

1308
01:27:37,382 --> 01:27:40,766
of course everything will
still work as it did before.

1309
01:27:40,766 --> 01:27:45,498
Now, this is going to be a little bit
different than the wish list because

1310
01:27:45,498 --> 01:27:49,388
there is no input,
at least as far as The form is concerned.

1311
01:27:49,388 --> 01:27:51,154
There is, however, output.

1312
01:27:51,154 --> 01:27:56,198
Because when the user clicks on the Add
Wish button, our component needs to

1313
01:27:56,198 --> 01:28:01,499
tell the app component, that, hey,
I have some new data for you to work with.

1314
01:28:01,499 --> 01:28:05,085
And the way that we do that is by
essentially creating an event.

1315
01:28:05,085 --> 01:28:09,585
So let's, first of all,
generate our new component, and

1316
01:28:09,585 --> 01:28:12,556
let's just call it add-wish-form.

1317
01:28:12,556 --> 01:28:18,058
To create an event, we have to use
what's called an event emitter so

1318
01:28:18,058 --> 01:28:23,091
that we can emit or fire that
event whenever we want to emit it.

1319
01:28:23,091 --> 01:28:25,881
So let's start with the template here.

1320
01:28:25,881 --> 01:28:29,655
Let's cut this out of our
app components template, and

1321
01:28:29,655 --> 01:28:32,071
let's write out what we want to do.

1322
01:28:32,071 --> 01:28:39,501
So we'll have the add-wish-form, and
we want to bind an event to this.

1323
01:28:39,501 --> 01:28:42,831
So we're going to use
the event binding syntax.

1324
01:28:42,831 --> 01:28:47,941
And whenever you think of event names,
they are typically actions, first of all.

1325
01:28:47,941 --> 01:28:52,666
They are also typically in the present
tense, such as click, mouseOver,

1326
01:28:52,666 --> 01:28:55,291
mouseOut, keyDown, things like that.

1327
01:28:55,291 --> 01:28:57,570
So let's call this event addWish, and

1328
01:28:57,570 --> 01:29:02,001
then we will have some code that's
going to execute whenever this happens.

1329
01:29:02,001 --> 01:29:04,591
So let's go to our Add Wish form.

1330
01:29:04,591 --> 01:29:09,641
Let's open up the template, and
then let's paste in the form.

1331
01:29:09,641 --> 01:29:14,145
And I don't think there's really anything
that we need to change as far as this

1332
01:29:14,145 --> 01:29:18,731
template is concerned, because we still
need this newWishText for the model.

1333
01:29:18,731 --> 01:29:24,081
We still want to execute some code
whenever the user clicks on this button.

1334
01:29:24,081 --> 01:29:29,648
So we still need to handle the click
event and emit our own event.

1335
01:29:29,648 --> 01:29:31,467
So we'll leave this as is.

1336
01:29:31,467 --> 01:29:33,844
So let's go ahead and close this file.

1337
01:29:33,844 --> 01:29:37,752
So let's extract the code
from our component.

1338
01:29:37,752 --> 01:29:44,431
So we essentially need to cut out
the newWishText and the addNewWish method.

1339
01:29:44,431 --> 01:29:46,825
So let's just cut that out, and

1340
01:29:46,825 --> 01:29:51,093
let's put this inside of the code for
our new component.

1341
01:29:51,093 --> 01:29:53,231
Now let's change the selector.

1342
01:29:53,231 --> 01:29:56,654
I want this to be just simply,
add-wish-form.

1343
01:29:56,654 --> 01:29:59,998
And we need to address line 18 here

1344
01:29:59,998 --> 01:30:04,910
because we now do not have
access to the items array.

1345
01:30:04,910 --> 01:30:09,051
In fact, as far as this component is
concerned, the items array doesn't exist.

1346
01:30:09,051 --> 01:30:13,901
So this is where we will emit our event,
but, first of all,

1347
01:30:13,901 --> 01:30:16,332
we need to import two things.

1348
01:30:16,332 --> 01:30:21,284
We need the output decorator,
so just like with an input for

1349
01:30:21,284 --> 01:30:25,457
a component,
we have to decorate output as well.

1350
01:30:25,457 --> 01:30:28,901
And then we need to import
the EventEmitter class.

1351
01:30:28,901 --> 01:30:33,463
Now one last thing we need to do
is import the WishItem class so

1352
01:30:33,463 --> 01:30:36,869
that we can work with
that inside of our file.

1353
01:30:36,869 --> 01:30:41,062
And that should be it, so
that now all we have to do is just write

1354
01:30:41,062 --> 01:30:45,672
the code that's going to create our
event and then emit that event.

1355
01:30:45,672 --> 01:30:48,482
So we'll start by using
the output decorator.

1356
01:30:48,482 --> 01:30:52,348
We use it just like the input,
except, well, it's called output.

1357
01:30:52,348 --> 01:30:56,072
And then we have the name of our event,
which was addWish.

1358
01:30:56,072 --> 01:31:00,471
And we're going to new up
the EventEmitter constructor.

1359
01:31:00,471 --> 01:31:06,200
And we can specify the type of event
object that we are going to pass to it.

1360
01:31:06,200 --> 01:31:08,620
Now, here we can do
several different things.

1361
01:31:08,620 --> 01:31:14,858
We could say that the event object is
going to be the text from the text box.

1362
01:31:14,858 --> 01:31:20,371
We could say that we are going to
pass a brand new Wishitem object.

1363
01:31:20,371 --> 01:31:24,148
And I think that that's
probably the best approach.

1364
01:31:24,148 --> 01:31:27,910
So that whenever we emit
this addWish event,

1365
01:31:27,910 --> 01:31:33,960
we will pass it a new wish item object
that contains the new wish's text.

1366
01:31:33,960 --> 01:31:37,965
So that's whenever we call
this addNew wish method,

1367
01:31:37,965 --> 01:31:40,371
we will use this addWish event.

1368
01:31:40,371 --> 01:31:46,741
We will emit it, and
then we will pass in our Wish item object.

1369
01:31:46,741 --> 01:31:50,571
So that should be it as far as
this component is concerned.

1370
01:31:50,571 --> 01:31:55,335
So now the only other thing that we need
to do is actually do something whenever

1371
01:31:55,335 --> 01:31:57,112
this addWish event occurs.

1372
01:31:57,112 --> 01:31:58,921
So let's go to our app component.

1373
01:31:58,921 --> 01:32:04,228
Now we could define a method, we could
say that we want to call a method,

1374
01:32:04,228 --> 01:32:09,101
addWishToItems, and then we can
define that inside of our code.

1375
01:32:09,101 --> 01:32:13,766
However, with something as simple as this,
it would be far easier and

1376
01:32:13,766 --> 01:32:16,465
probably more readable to just do this.

1377
01:32:16,465 --> 01:32:22,977
We will push into our items array,
the event object, which is a wishItem.

1378
01:32:22,977 --> 01:32:24,143
So let's save this.

1379
01:32:24,143 --> 01:32:28,884
It does look we have an error inside
of the template for our wish item, but

1380
01:32:28,884 --> 01:32:30,455
okay, that went away.

1381
01:32:30,455 --> 01:32:31,436
So let's go to the browser.

1382
01:32:31,436 --> 01:32:34,425
Everything looks it's
working like it did before.

1383
01:32:34,425 --> 01:32:39,146
Let's do a hard refresh just to make
sure everything is loaded as it should.

1384
01:32:39,146 --> 01:32:41,534
And then let's type in a new wish.

1385
01:32:41,534 --> 01:32:44,563
I want $100,000, so
I'm going to wish for this.

1386
01:32:44,563 --> 01:32:47,174
We're going to add it, and
there it is in our list.

1387
01:32:47,174 --> 01:32:48,105
And, of course,

1388
01:32:48,105 --> 01:32:52,149
the filter still works because we didn't
change any of that functionality.

1389
01:32:52,149 --> 01:32:57,565
So now let's very briefly to
look at our app components code.

1390
01:32:57,565 --> 01:33:02,386
Now of course we still have a lot of
things here, but little by little,

1391
01:33:02,386 --> 01:33:07,128
as we start breaking out that
functionality into other components,

1392
01:33:07,128 --> 01:33:09,434
this becomes much more cleaner.

1393
01:33:09,434 --> 01:33:12,723
And as we start breaking
out the functionality for

1394
01:33:12,723 --> 01:33:17,352
the filter, the code for our app
component will be very, very clean.

1395
01:33:17,352 --> 01:33:19,092
Extracting the functionality for

1396
01:33:19,092 --> 01:33:21,917
the filter is going to be
relatively straightforward.

1397
01:33:21,917 --> 01:33:25,967
In fact, it's going to be very
much like the add wish form,

1398
01:33:25,967 --> 01:33:29,855
in that we won't have any input,
we will have an output,

1399
01:33:29,855 --> 01:33:34,398
because the app component needs
to know which filter is selected.

1400
01:33:34,398 --> 01:33:37,236
And in order to make all of this work,

1401
01:33:37,236 --> 01:33:40,998
we are going to lean on
the ngModelChange event.

1402
01:33:40,998 --> 01:33:45,786
Now, if you'll remember, we originally
used ngModelChange to implement

1403
01:33:45,786 --> 01:33:48,418
the filter, and we ran into some issues.

1404
01:33:48,418 --> 01:33:51,787
And in this particular case,
we will run into issues,

1405
01:33:51,787 --> 01:33:53,701
but it will be very easy to fix.

1406
01:33:53,701 --> 01:33:57,571
So let's create a component,
we'll just call it wish-filter.

1407
01:33:57,571 --> 01:34:00,395
And let's start with the template.

1408
01:34:00,395 --> 01:34:04,600
So we want to extract
practically everything here,

1409
01:34:04,600 --> 01:34:07,284
except for this containing div.

1410
01:34:07,284 --> 01:34:14,148
That isn't necessarily part of the filter,
that's more for the structure of the page.

1411
01:34:14,148 --> 01:34:17,845
So everything inside of that,
we'll just cut out, and

1412
01:34:17,845 --> 01:34:21,790
let's say that we will have
that wish-filter component.

1413
01:34:21,790 --> 01:34:25,861
And we will listen for an event,
I guess we can just call it filter, and

1414
01:34:25,861 --> 01:34:28,705
then we will do something
whenever that occurs.

1415
01:34:28,705 --> 01:34:32,815
So let's hop on over to our
wish-filters templates.

1416
01:34:32,815 --> 01:34:33,841
Let's open up that file.

1417
01:34:33,841 --> 01:34:35,708
Let's paste this in.

1418
01:34:35,708 --> 01:34:39,198
And for the most part,
everything is going to be the same.

1419
01:34:39,198 --> 01:34:44,052
We still need the ngModel for
our select element because we need

1420
01:34:44,052 --> 01:34:47,725
to know what the value is for
that form control.

1421
01:34:47,725 --> 01:34:53,251
But we are also going to use
ngModelChange, and we can go ahead and

1422
01:34:53,251 --> 01:35:00,201
define a method called changeFilter that
will give us the new value for our model.

1423
01:35:00,201 --> 01:35:03,289
So let's take this method name and

1424
01:35:03,289 --> 01:35:07,662
define that inside of our code so
that we have it.

1425
01:35:07,662 --> 01:35:10,219
And this is going to be useful for

1426
01:35:10,219 --> 01:35:14,587
us because this is where we
will emit our filter event.

1427
01:35:14,587 --> 01:35:15,891
So let's go ahead and write that code.

1428
01:35:15,891 --> 01:35:20,920
Of course, it's not going to work because
we haven't defined that filter event yet.

1429
01:35:20,920 --> 01:35:25,141
And we don't necessarily know what we
want to emit at this particular point.

1430
01:35:25,141 --> 01:35:26,379
Well, in fact, we do.

1431
01:35:26,379 --> 01:35:30,824
We want to emit the callback
function that's used for

1432
01:35:30,824 --> 01:35:33,502
the filter method on the array.

1433
01:35:33,502 --> 01:35:37,847
So there's a few things we need to
port over from the app component.

1434
01:35:37,847 --> 01:35:42,262
First, we need to import wish-filter,
so let's go ahead and do that.

1435
01:35:42,262 --> 01:35:46,405
We also need these filters,
so let's cut that out.

1436
01:35:46,405 --> 01:35:48,728
We don't need that inside of app anymore.

1437
01:35:48,728 --> 01:35:50,740
That's going to be inside of our wish.

1438
01:35:50,740 --> 01:35:53,601
Filter component, so
we'll paste those in there.

1439
01:35:53,601 --> 01:35:56,465
And then we need this list filter.

1440
01:35:56,465 --> 01:36:00,148
We don't need that inside
of our app component, so

1441
01:36:00,148 --> 01:36:04,320
that should be it as far as
what we need to port over.

1442
01:36:04,320 --> 01:36:07,810
Let's change the name of the component
to just simply wish-filter.

1443
01:36:07,810 --> 01:36:15,110
And we need to import the output
decorator, as well as the event emitter.

1444
01:36:15,110 --> 01:36:19,771
So that we can define our output,
which we called filter, and

1445
01:36:19,771 --> 01:36:23,130
we will new up the event emitter class.

1446
01:36:23,130 --> 01:36:27,266
As far as the event object,
let's just use type any.

1447
01:36:27,266 --> 01:36:31,476
That way we can pass anything
to it like a function and

1448
01:36:31,476 --> 01:36:36,929
that should be good there, so
that whenever the filter is changed,

1449
01:36:36,929 --> 01:36:40,680
we will just simply emit the given filter.

1450
01:36:40,680 --> 01:36:44,020
And that should do it for
this file, at least for right now.

1451
01:36:44,020 --> 01:36:46,230
So let's go to our app component.

1452
01:36:46,230 --> 01:36:50,996
Now, one thing we do need to keep track
of is the filter that's going to be

1453
01:36:50,996 --> 01:36:53,250
applied for the visible items.

1454
01:36:53,250 --> 01:36:56,310
So we can go ahead and
we can define that property.

1455
01:36:56,310 --> 01:37:01,362
We can have it set as type any, and
we can initialize it as a function so

1456
01:37:01,362 --> 01:37:06,418
that we could go ahead and
we could pass that filter to VisibleItems,

1457
01:37:06,418 --> 01:37:10,120
or not pass it but
use it inside a visible item.

1458
01:37:10,120 --> 01:37:13,260
Now I don't think we
need the title property.

1459
01:37:13,260 --> 01:37:14,370
Let's get rid of it.

1460
01:37:14,370 --> 01:37:16,190
We should have done that a long time ago.

1461
01:37:16,190 --> 01:37:20,230
And we do need to change
the value of filter, but

1462
01:37:20,230 --> 01:37:23,471
we can do that inside of our template.

1463
01:37:23,471 --> 01:37:28,227
So that whenever we bind this filter
event, we could just go ahead and

1464
01:37:28,227 --> 01:37:31,179
say filter, is equal to the event object.

1465
01:37:31,179 --> 01:37:35,707
So it's declarative, as we are reading
the template we know, well,

1466
01:37:35,707 --> 01:37:37,876
we mostly know what's going on.

1467
01:37:37,876 --> 01:37:40,329
And it should work, but not exactly.

1468
01:37:40,329 --> 01:37:45,292
So here we are, we get the message that
there are no wishes to display and

1469
01:37:45,292 --> 01:37:48,205
we know that there are wishes to display.

1470
01:37:48,205 --> 01:37:52,573
And we also know that
the all filter is selected.

1471
01:37:52,573 --> 01:37:56,971
So we should be seeing something here but
whenever we change the value of

1472
01:37:56,971 --> 01:38:00,510
the filter,
we can see that it's working just fine.

1473
01:38:00,510 --> 01:38:02,900
So this is the problem that
we are going to run into.

1474
01:38:02,900 --> 01:38:06,940
And the reason why we
are experiencing it is very simple.

1475
01:38:06,940 --> 01:38:08,840
It's because of this.

1476
01:38:08,840 --> 01:38:14,400
Line 19, we initialize the filter
as just an empty function.

1477
01:38:14,400 --> 01:38:19,445
And so when that is passed to
the filter method on the items array,

1478
01:38:19,445 --> 01:38:22,260
it's returning undefined.

1479
01:38:22,260 --> 01:38:27,280
Therefore, none of the items
are being selected for visible items.

1480
01:38:27,280 --> 01:38:30,070
So we can get around this in
a couple of different ways.

1481
01:38:30,070 --> 01:38:33,778
We could just return true for
the filter and

1482
01:38:33,778 --> 01:38:37,620
that is going to be
a very quick fix there.

1483
01:38:37,620 --> 01:38:40,660
However, I don't necessarily
like that approach.

1484
01:38:40,660 --> 01:38:45,663
Instead, I would prefer to rely
upon the filter component to

1485
01:38:45,663 --> 01:38:50,990
automatically provide a value
to the filter inside of app.

1486
01:38:50,990 --> 01:38:56,030
And the way that we can do that is
by going to the components code.

1487
01:38:56,030 --> 01:39:00,241
Now, if you'll notice, for
every component that we've created,

1488
01:39:00,241 --> 01:39:02,460
it has implemented OnInit.

1489
01:39:02,460 --> 01:39:07,180
And it has provided this
ngOnInit callback method.

1490
01:39:07,180 --> 01:39:11,370
And you can think of this essentially
as this is the initialization for

1491
01:39:11,370 --> 01:39:13,340
this particular component.

1492
01:39:13,340 --> 01:39:19,660
So what we could do here is call change
filter, and then pass in the string of 0.

1493
01:39:19,660 --> 01:39:26,230
Or we could emit the filter event,
passing in the first filter.

1494
01:39:26,230 --> 01:39:30,015
Either way, it's going to get the job
done, so that whenever we save this,

1495
01:39:30,015 --> 01:39:31,570
we go back to the browser.

1496
01:39:31,570 --> 01:39:33,706
Let's do a hard refresh in the browser,
and

1497
01:39:33,706 --> 01:39:36,370
we can see that it's working as it should.

1498
01:39:36,370 --> 01:39:40,939
The all filter is being applied to
the list of items automatically,

1499
01:39:40,939 --> 01:39:44,640
and of course the filter
is still going to change.

1500
01:39:44,640 --> 01:39:47,228
If we modify any one of these items,

1501
01:39:47,228 --> 01:39:51,900
we can see that the item list is
still working as it did before.

1502
01:39:51,900 --> 01:39:56,475
The same is true for whenever we add
a new item, so we want that, okay,

1503
01:39:56,475 --> 01:40:02,650
I'll take $1,200, so we'll add that wish,
it's automatically added to the list.

1504
01:40:02,650 --> 01:40:06,830
Now one other thing,
let's go to the app component.

1505
01:40:06,830 --> 01:40:11,340
We could get away without defining
this visible items whatsoever.

1506
01:40:11,340 --> 01:40:16,295
It's useful to have it here, but
one of the things that we have been doing

1507
01:40:16,295 --> 01:40:21,087
as we have created these other
components is to simplify everything so

1508
01:40:21,087 --> 01:40:25,475
that a lot of the functionality
is defined declaratively here in

1509
01:40:25,475 --> 01:40:28,748
the template as opposed
to programmatically.

1510
01:40:28,748 --> 01:40:31,687
So instead of using visible items here,

1511
01:40:31,687 --> 01:40:35,750
we could simply filter the items
based upon our filter,

1512
01:40:35,750 --> 01:40:41,196
which means that we will be able to
completely get rid of the visible items so

1513
01:40:41,196 --> 01:40:45,862
that the code for our app component
is now I'm not gonna say it's

1514
01:40:45,862 --> 01:40:50,360
the cleanest that it could be,
but it's pretty darn close.

1515
01:40:50,360 --> 01:40:53,970
And just to prove that this works,
let's hop on over back to the browser.

1516
01:40:53,970 --> 01:40:58,760
Let's do a hard refresh and we can see
that the filter is automatically applied.

1517
01:40:58,760 --> 01:41:03,033
If we change the filter at all,
we get the results that we would expect.

1518
01:41:03,033 --> 01:41:06,284
Over the past few lessons,
we have discussed inputs and

1519
01:41:06,284 --> 01:41:07,945
outputs on our components,

1520
01:41:07,945 --> 01:41:12,750
but we haven't necessarily talked about
how data flows from one to the other.

1521
01:41:12,750 --> 01:41:18,440
And even though it is very simple, it's
also important to understand this concept,

1522
01:41:18,440 --> 01:41:21,770
so let's take a look at
the app component markup.

1523
01:41:21,770 --> 01:41:25,560
And I want to focus on where we
use the wish list component.

1524
01:41:25,560 --> 01:41:30,850
So in this case app is the parent,
wish list is the child.

1525
01:41:30,850 --> 01:41:34,240
And wish list has a property,
it's the input.

1526
01:41:34,240 --> 01:41:38,320
And we are binding the items
from the app component,

1527
01:41:38,320 --> 01:41:41,390
the parent, to that wishes property.

1528
01:41:41,390 --> 01:41:46,638
So in this particular case the flow of
data goes from the parent to the child,

1529
01:41:46,638 --> 01:41:52,120
and there is no limit as to how far down
we can keep passing that information.

1530
01:41:52,120 --> 01:41:57,056
Like for example later on we are going
to create another component,

1531
01:41:57,056 --> 01:42:00,259
one that represents
an individual list item

1532
01:42:00,259 --> 01:42:05,022
element inside of the unordered
list in our wish list component,

1533
01:42:05,022 --> 01:42:09,783
where we will take the individual
item that we are working with and

1534
01:42:09,783 --> 01:42:13,860
then pass that data on down
to that child component.

1535
01:42:13,860 --> 01:42:17,158
So you can keep passing data
down as far as you need to for

1536
01:42:17,158 --> 01:42:21,680
as long as you need components that
need to work with that information.

1537
01:42:21,680 --> 01:42:24,557
So let's go back to the app component and

1538
01:42:24,557 --> 01:42:28,570
let's look at the add wish form and
the wish filter.

1539
01:42:28,570 --> 01:42:35,010
Now we created events that emit
data whenever those events occur.

1540
01:42:35,010 --> 01:42:39,340
And that is setting up the child
to parent communication.

1541
01:42:39,340 --> 01:42:43,744
So with inputs, the information
flows from parent to child, for

1542
01:42:43,744 --> 01:42:47,550
output, the information
flows from child to parent.

1543
01:42:47,550 --> 01:42:52,180
But let's open up the filter and
let's look at NG model.

1544
01:42:52,180 --> 01:42:55,943
Now, of course,
we've used NG model in other places, but

1545
01:42:55,943 --> 01:43:00,761
we are going to focus on the wish filter
component in this lesson once again,

1546
01:43:00,761 --> 01:43:03,650
because ng-model is a little different.

1547
01:43:03,650 --> 01:43:08,438
Even the syntax suggests that it is,
because it uses both

1548
01:43:08,438 --> 01:43:13,400
the property binding as well
as the event binding syntax.

1549
01:43:13,400 --> 01:43:18,330
So that seems to imply that this
is a two-way binding, and it is.

1550
01:43:18,330 --> 01:43:20,010
We have seen that happen.

1551
01:43:20,010 --> 01:43:24,401
So what I want to do is
modify our wish filter so

1552
01:43:24,401 --> 01:43:28,160
that it too has a two-way binding.

1553
01:43:28,160 --> 01:43:33,003
And the reason why I want to do it
here is primarily because of what we

1554
01:43:33,003 --> 01:43:35,600
do when this filter event occurs.

1555
01:43:35,600 --> 01:43:40,033
All we are doing here is setting
the app components filter property

1556
01:43:40,033 --> 01:43:43,847
equal to the filter that was
provided through the event.

1557
01:43:43,847 --> 01:43:48,887
It's very simple, so in this
particular case it would make a lot of

1558
01:43:48,887 --> 01:43:53,837
sense to set up some kind of two-way
binding And we can do that very

1559
01:43:53,837 --> 01:43:58,801
easily by just using both input and
output within our component.

1560
01:43:58,801 --> 01:44:01,490
So the result is going to look like this.

1561
01:44:01,490 --> 01:44:05,089
Not only is it going to
simplify our template, but

1562
01:44:05,089 --> 01:44:09,020
it can also simplify the code
in our component class.

1563
01:44:09,020 --> 01:44:12,864
So that all that we really need to do
is just define the filter property,

1564
01:44:12,864 --> 01:44:16,470
say that it's going to be of any type,
and we're good to go there.

1565
01:44:16,470 --> 01:44:21,530
So we can actually close app component and
its templates.

1566
01:44:21,530 --> 01:44:24,800
And then we will focus on
the wish filter component.

1567
01:44:24,800 --> 01:44:27,712
In fact,
let's open up the class because that is

1568
01:44:27,712 --> 01:44:30,510
where we are going to
spend most of our time.

1569
01:44:30,510 --> 01:44:34,830
So in order to create or
to set up a two-way binding for

1570
01:44:34,830 --> 01:44:40,720
our own components, we need both
the input and the output decorators.

1571
01:44:40,720 --> 01:44:44,530
The input is going to
be the property name.

1572
01:44:44,530 --> 01:44:49,211
So in this particular case, it would make
sense that we call our property, filter.

1573
01:44:49,211 --> 01:44:52,900
I'm going to go ahead and
say that this is of type any.

1574
01:44:52,900 --> 01:44:56,108
We don't have to initialize
this if we don't want to.

1575
01:44:56,108 --> 01:45:00,160
We can, but in our particular
case there's really no need to.

1576
01:45:00,160 --> 01:45:03,950
Now, of course, setting up two-way binding
means that we have an input and an output.

1577
01:45:03,950 --> 01:45:07,376
So we need to change
the name of our outputs, but

1578
01:45:07,376 --> 01:45:10,116
there is a rule that we have to follow so

1579
01:45:10,116 --> 01:45:16,420
that the Angular will recognize that the
input and the output are linked together.

1580
01:45:16,420 --> 01:45:21,854
And that is, the output has to be
called the same name as our input,

1581
01:45:21,854 --> 01:45:23,807
followed by, Change.

1582
01:45:23,807 --> 01:45:25,767
And whenever we do this and save this,

1583
01:45:25,767 --> 01:45:28,538
the error inside of the app
component should go away.

1584
01:45:28,538 --> 01:45:34,060
Because Angular should now recognize
that this is a two-way binding.

1585
01:45:34,060 --> 01:45:38,730
There is the input and the output,
but that error is not going away.

1586
01:45:38,730 --> 01:45:41,151
So let's take a look and
see what this says.

1587
01:45:41,151 --> 01:45:42,469
It did go away.

1588
01:45:42,469 --> 01:45:43,980
I just wasn't patient enough.

1589
01:45:43,980 --> 01:45:47,634
Now, of course,
because we changed the name of this event,

1590
01:45:47,634 --> 01:45:50,320
we're going to have to adjust our code.

1591
01:45:50,320 --> 01:45:55,028
And I'm not so necessarily sure that
I want a filterChange event and

1592
01:45:55,028 --> 01:45:57,600
then a method called changeFilter.

1593
01:45:57,600 --> 01:45:59,900
So let's call this updateFilter.

1594
01:45:59,900 --> 01:46:03,760
And whenever we update the filter,
we essentially want to do two things.

1595
01:46:03,760 --> 01:46:09,210
We want to set the filter property equal
to the new value that it should be.

1596
01:46:09,210 --> 01:46:15,390
So in this particular case, it's going to
be the given filter at the given index.

1597
01:46:15,390 --> 01:46:19,180
And then we will emit
the filterChange event.

1598
01:46:19,180 --> 01:46:23,910
We will pass in the filter
property as the event object, and

1599
01:46:23,910 --> 01:46:26,472
that is going to make this work.

1600
01:46:26,472 --> 01:46:32,098
Now we do have this OnInit, and
instead of emitting the filterChange,

1601
01:46:32,098 --> 01:46:35,770
what I want to do is
call the updateFilter.

1602
01:46:35,770 --> 01:46:38,209
I'm going to pass in the string of 0,

1603
01:46:38,209 --> 01:46:41,502
that is the default filter
that we want to display.

1604
01:46:41,502 --> 01:46:45,725
And then we need to update
the template for our WishFilter so

1605
01:46:45,725 --> 01:46:50,882
that it will call this updateFilter
method on the ngModelChange event.

1606
01:46:50,882 --> 01:46:55,714
But with that in place, we will have the
same functionality as we did before, but

1607
01:46:55,714 --> 01:46:58,530
our code is going to be
a little bit cleaner.

1608
01:46:58,530 --> 01:47:01,070
So, here, of course, we have our UI.

1609
01:47:01,070 --> 01:47:03,910
The default is the All filter.

1610
01:47:03,910 --> 01:47:05,520
Let's change it to Unfulfilled.

1611
01:47:05,520 --> 01:47:07,850
Once again, we see the unfulfilled items.

1612
01:47:07,850 --> 01:47:11,220
And if we change any one
of these check boxes,

1613
01:47:11,220 --> 01:47:14,670
that list is going to
automatically update.

1614
01:47:14,670 --> 01:47:19,420
If we add a new wish, then that
will of course update the wishlist.

1615
01:47:19,420 --> 01:47:22,361
So let's briefly talk
about how this works.

1616
01:47:22,361 --> 01:47:25,351
So let's go back to our app component, and

1617
01:47:25,351 --> 01:47:28,766
here we define this filter
property of type any.

1618
01:47:28,766 --> 01:47:34,990
And we are binding this to the filter
property on the wish-filter.

1619
01:47:34,990 --> 01:47:37,711
So when our application first runs,

1620
01:47:37,711 --> 01:47:42,011
it's going to take the value
of this filter property, and

1621
01:47:42,011 --> 01:47:46,687
it's going to pass that down to
the child's filter property.

1622
01:47:46,687 --> 01:47:53,328
So initially, the input filter on
the WishFilterComponent is undefined.

1623
01:47:53,328 --> 01:47:58,330
Not necessarily because we don't
define anything here, but because it

1624
01:47:58,330 --> 01:48:03,583
is bound to that filter property in
the app component, which is undefined.

1625
01:48:03,583 --> 01:48:08,826
However, when ngOnInit executes,
we update the filter.

1626
01:48:08,826 --> 01:48:14,680
And when we do, we change the filter
property to the given filter.

1627
01:48:14,680 --> 01:48:19,499
We emit the filterChange
event with that new filter,

1628
01:48:19,499 --> 01:48:25,480
that in turn updates the filter
property on the app component.

1629
01:48:25,480 --> 01:48:30,316
Now, of course, we don't want to set
up two-way binding on anything and

1630
01:48:30,316 --> 01:48:33,890
everything, only where
it makes sense to do so.

1631
01:48:33,890 --> 01:48:38,078
Earlier, I mentioned that I want
to extract the functionality for

1632
01:48:38,078 --> 01:48:43,050
the individual items in the wishlist
component into its own component.

1633
01:48:43,050 --> 01:48:45,760
Now this is not a requirement.

1634
01:48:45,760 --> 01:48:48,120
There's nothing that says
that we need to do this.

1635
01:48:48,120 --> 01:48:50,955
However, from my own personal preference,

1636
01:48:50,955 --> 01:48:54,833
if I can extract something into
a component, I typically do so

1637
01:48:54,833 --> 01:48:59,660
just because that makes my application
a little bit easier to maintain.

1638
01:48:59,660 --> 01:49:04,455
And a lot of times, I end up wanting that
functionality because I will need to add

1639
01:49:04,455 --> 01:49:06,170
features or something.

1640
01:49:06,170 --> 01:49:11,920
Now, I am a firm believer in not writing
code that I don't need to write.

1641
01:49:11,920 --> 01:49:15,404
But there's just something
about extracting functionality

1642
01:49:15,404 --> 01:49:18,218
into components that I
just can't get away from.

1643
01:49:18,218 --> 01:49:20,849
So, what I want to do is this.

1644
01:49:20,849 --> 01:49:25,902
So that instead of using the li
elements here Inside of our list,

1645
01:49:25,902 --> 01:49:28,627
we'll have a wish-list-item.

1646
01:49:28,627 --> 01:49:32,940
And the first thing that
we need is a for-loop here.

1647
01:49:32,940 --> 01:49:36,080
So we won't need this for the li element.

1648
01:49:36,080 --> 01:49:39,766
So let's just lift out
that ngFor directive.

1649
01:49:39,766 --> 01:49:42,869
And really we don't need the index either.

1650
01:49:42,869 --> 01:49:46,537
That was primarily for
demonstration purposes so

1651
01:49:46,537 --> 01:49:52,050
that we could have something to bind
to the custom data-index attribute.

1652
01:49:52,050 --> 01:49:54,240
So let's just get rid of that.

1653
01:49:54,240 --> 01:49:57,477
We can also change this
item variable to wish,

1654
01:49:57,477 --> 01:50:02,280
just to keep things consistent
from a terminology standpoint.

1655
01:50:02,280 --> 01:50:06,603
But then we need to supply the information
that we want this wish-list-item

1656
01:50:06,603 --> 01:50:07,407
to work with.

1657
01:50:07,407 --> 01:50:09,265
And we can take one of two ways.

1658
01:50:09,265 --> 01:50:15,672
We could have a property called wish
that we bind the individual wish to,

1659
01:50:15,672 --> 01:50:20,200
or we can provide the different
pieces of the wish.

1660
01:50:20,200 --> 01:50:23,582
For example, we could have a wishText,

1661
01:50:23,582 --> 01:50:27,440
which we would bind to
the wish's wishText.

1662
01:50:27,440 --> 01:50:32,677
But then we can set up a two-way
binding for the isComplete property,

1663
01:50:32,677 --> 01:50:37,313
and we can call that fulfilled,
and that will be isComplete.

1664
01:50:37,313 --> 01:50:40,920
And let's take this approach because
this gives us another opportunity to

1665
01:50:40,920 --> 01:50:42,360
practice two-way binding.

1666
01:50:42,360 --> 01:50:46,895
And when it comes to determining
how to pass data to a child,

1667
01:50:46,895 --> 01:50:49,450
there are no hard and fast rules.

1668
01:50:49,450 --> 01:50:54,290
It really just depends upon what your
particular needs are at that given time.

1669
01:50:54,290 --> 01:50:58,110
And so I think that this
is a worthy goal to attain.

1670
01:50:58,110 --> 01:51:03,360
So let's create that component
with ng generate component.

1671
01:51:03,360 --> 01:51:05,581
We'll call it wish-list-item.

1672
01:51:05,581 --> 01:51:09,732
And let's go ahead and
let's cut out this li element.

1673
01:51:09,732 --> 01:51:13,646
And that's going to be the template for
this component.

1674
01:51:13,646 --> 01:51:18,659
Now, of course, we are going to need to
massage this template just a little bit,

1675
01:51:18,659 --> 01:51:21,413
just to be able to work
with the properties.

1676
01:51:21,413 --> 01:51:26,325
Because we don't have the individual wish
object anymore, we have just the pieces.

1677
01:51:26,325 --> 01:51:30,900
So we will have the wish text there, and
we'll leave everything else temporarily

1678
01:51:30,900 --> 01:51:35,424
because I'm not exactly sure how we are
going to implement this on the code side.

1679
01:51:35,424 --> 01:51:40,532
But we do need to first of all
import the WishItem class.

1680
01:51:40,532 --> 01:51:42,792
So let's pull that in.

1681
01:51:42,792 --> 01:51:46,465
Let's also change the name
Of this selector, so

1682
01:51:46,465 --> 01:51:49,073
we will get rid of that app prefix.

1683
01:51:49,073 --> 01:51:52,021
We also need to port over the toggleItem,

1684
01:51:52,021 --> 01:51:56,162
although we are going to need
to make some changes to that.

1685
01:51:56,162 --> 01:51:59,628
But then inside of our WishListItem,
we can go ahead and

1686
01:51:59,628 --> 01:52:01,854
we can define our input and output.

1687
01:52:01,854 --> 01:52:05,590
We, of course,
need to import those decorators.

1688
01:52:05,590 --> 01:52:06,261
So we will have that.

1689
01:52:06,261 --> 01:52:11,240
We also need to import
the EventEmitter for our output.

1690
01:52:11,240 --> 01:52:16,278
So for the Inputs property,
we first of all need the wishText.

1691
01:52:16,278 --> 01:52:21,169
Now, I'm not going to initialize this with
any particular value, primarily because

1692
01:52:21,169 --> 01:52:25,570
there's no need to, because it's
going to be supplied by the parent.

1693
01:52:25,570 --> 01:52:29,288
So I'm going to use the bang or
the exclamation point, or

1694
01:52:29,288 --> 01:52:33,092
the technical term is
the non-null assertion operator.

1695
01:52:33,092 --> 01:52:40,075
But basically, this is saying that this
wishText property is a non-null property.

1696
01:52:40,075 --> 01:52:44,466
It's primarily a trick for the compiler,
because if we omit this and

1697
01:52:44,466 --> 01:52:49,026
we don't initialize a value,
the compiler is going to complain at us.

1698
01:52:49,026 --> 01:52:52,638
But we know that this is not going to be
null because it's going to be supplied by

1699
01:52:52,638 --> 01:52:53,260
the parent.

1700
01:52:53,260 --> 01:52:56,045
So that's why we're using the bang.

1701
01:52:56,045 --> 01:52:59,890
Then let's define the fullfilled property.

1702
01:52:59,890 --> 01:53:02,693
This is what we're going to use for
our two way binding.

1703
01:53:02,693 --> 01:53:08,336
And we can essentially do the same thing
by using the non-null assertion operator,

1704
01:53:08,336 --> 01:53:10,970
but this is going to be a Boolean value.

1705
01:53:10,970 --> 01:53:17,817
But then we also need the output and
its name will be fullfilledChange.

1706
01:53:17,817 --> 01:53:23,420
And this is a new
EventEmitter of type Boolean.

1707
01:53:23,420 --> 01:53:29,392
Now, whenever we click on the checkbox, we
want to reverse the value of isComplete.

1708
01:53:29,392 --> 01:53:32,705
So what we'll do here is
essentially the same thing, but

1709
01:53:32,705 --> 01:53:35,580
we are going to use
the fullfilled property.

1710
01:53:35,580 --> 01:53:39,760
So we will set fullfilled
equal to its opposite.

1711
01:53:39,760 --> 01:53:44,544
And then we will emit
the fullfilledChange event, and

1712
01:53:44,544 --> 01:53:48,680
we'll pass in the new value for
fullfilled.

1713
01:53:48,680 --> 01:53:52,730
This means that we no longer
need the item parameter because

1714
01:53:52,730 --> 01:53:56,215
this is working strictly
with class information.

1715
01:53:56,215 --> 01:54:02,740
And let's change this, instead of
toggleItem, it'll be toggleFullfilled.

1716
01:54:02,740 --> 01:54:06,689
And so now that we know how we
are going to make this work,

1717
01:54:06,689 --> 01:54:10,978
we can go to our Components template,
and let's change will

1718
01:54:10,978 --> 01:54:15,796
be called toggleItem we want to
call the toggleFullfilled method.

1719
01:54:15,796 --> 01:54:21,000
And the checked value is going to
come from the fullfilled property.

1720
01:54:21,000 --> 01:54:23,204
And I think that's gonna be it.

1721
01:54:23,204 --> 01:54:24,900
We should be able to do everything else.

1722
01:54:24,900 --> 01:54:29,000
Let's make sure that our
wish list template is okay.

1723
01:54:29,000 --> 01:54:31,230
We look like that we are good to go.

1724
01:54:31,230 --> 01:54:32,906
So let's hop on over to the browser.

1725
01:54:32,906 --> 01:54:36,510
Let's do a hard refresh to
make sure everything's loaded.

1726
01:54:36,510 --> 01:54:40,280
And hopefully, we are going to
see the same functionality.

1727
01:54:40,280 --> 01:54:45,329
So at least as far as our All filter,
everything is looking okay.

1728
01:54:45,329 --> 01:54:50,701
Let's go to Unfulfilled, we see only one
item, which that is what we would expect.

1729
01:54:50,701 --> 01:54:52,350
Let's click on that.

1730
01:54:52,350 --> 01:54:53,019
It goes away.

1731
01:54:53,019 --> 01:54:56,279
So it looks like we
haven't broken anything,

1732
01:54:56,279 --> 01:54:59,799
which that's always a worthy
goal to strive for.

1733
01:54:59,799 --> 01:55:05,204
And now that we have extracted all of that
functionality into its own component,

1734
01:55:05,204 --> 01:55:07,598
I want to do some things with style.

1735
01:55:07,598 --> 01:55:12,691
Because, yes, it's nice that we have
this check box, and that is a very

1736
01:55:12,691 --> 01:55:18,000
useful visual cue to tell the user,
hey, this item has been fulfilled.

1737
01:55:18,000 --> 01:55:19,489
But I want to do a little bit more.

1738
01:55:19,489 --> 01:55:21,621
I want to add some styling so

1739
01:55:21,621 --> 01:55:26,985
that it's very clear that an item
is fulfilled or not fulfilled.

1740
01:55:26,985 --> 01:55:30,212
So in the next lesson,
we will look at manipulating style.

1741
01:55:30,212 --> 01:55:33,345
One of the great things about
graphical applications is

1742
01:55:33,345 --> 01:55:37,945
that we can convey information to the user
without using any text whatsoever.

1743
01:55:37,945 --> 01:55:43,335
Like for example, we have a checkbox to
denote whether or not a wish is fulfilled.

1744
01:55:43,335 --> 01:55:47,348
If it's checked, of course,
it is fulfilled, if not,

1745
01:55:47,348 --> 01:55:49,199
then it is not fulfilled.

1746
01:55:49,199 --> 01:55:51,755
And it can't get any clearer than that.

1747
01:55:51,755 --> 01:55:56,820
However, I want to add some extra
styling for fulfilled items.

1748
01:55:56,820 --> 01:56:01,578
I want to strike out the text and make
the color of the text just a little bit

1749
01:56:01,578 --> 01:56:06,901
different, just so that there's even
more difference between the two states.

1750
01:56:06,901 --> 01:56:11,221
Now, when it comes to manipulating style,
we as an industry, and

1751
01:56:11,221 --> 01:56:16,704
I just mean in JavaScript and client-side
development in general, we have decided

1752
01:56:16,704 --> 01:56:21,745
that manipulating classes is typically
the best way of manipulating style.

1753
01:56:21,745 --> 01:56:23,514
It's not just an angular thing.

1754
01:56:23,514 --> 01:56:25,840
It is an industry-wide thing.

1755
01:56:25,840 --> 01:56:29,665
So let's define a class called strikeout.

1756
01:56:29,665 --> 01:56:32,840
This will have
the text-decoration property.

1757
01:56:32,840 --> 01:56:35,029
We will set it to line-through.

1758
01:56:35,029 --> 01:56:38,484
And now we just need to
apply this class for

1759
01:56:38,484 --> 01:56:42,053
the label elements for fullfilled items.

1760
01:56:42,053 --> 01:56:46,721
And the way that we do that is
with a directive called ngClass.

1761
01:56:46,721 --> 01:56:49,992
Now, this uses the square bracket syntax.

1762
01:56:49,992 --> 01:56:54,183
So this implies that we
are binding something to

1763
01:56:54,183 --> 01:56:57,443
a property called ngClass on label.

1764
01:56:57,443 --> 01:56:59,192
And that is exactly what we are doing.

1765
01:56:59,192 --> 01:57:03,175
So that means that whatever
we use as the value for

1766
01:57:03,175 --> 01:57:08,049
this ngClass attribute has to
be a JavaScript expression.

1767
01:57:08,049 --> 01:57:12,172
So that means if we want to
assign a single CSS class,

1768
01:57:12,172 --> 01:57:14,434
it would need to be a string.

1769
01:57:14,434 --> 01:57:17,114
So we surround it with a pair of quotes.

1770
01:57:17,114 --> 01:57:18,153
Let's save that.

1771
01:57:18,153 --> 01:57:19,555
Let's go to the browser, and

1772
01:57:19,555 --> 01:57:22,200
we're going to see that all
of the items are struck out.

1773
01:57:22,200 --> 01:57:24,761
That's great,
except that that's not what we want.

1774
01:57:24,761 --> 01:57:28,150
We want only the items that are fulfilled.

1775
01:57:28,150 --> 01:57:30,611
So we can accomplish this in
a couple of different ways.

1776
01:57:30,611 --> 01:57:35,878
The first thing that we could do is use
a ternary statement, because remember,

1777
01:57:35,878 --> 01:57:41,002
this is a JavaScript expression, so
we could check the value of fullfilled.

1778
01:57:41,002 --> 01:57:45,520
And if it is fullfilled,
then we will apply the strikeout class.

1779
01:57:45,520 --> 01:57:48,164
Otherwise, we won't apply any class.

1780
01:57:48,164 --> 01:57:52,930
If we go back to the browser, we are going
to see that that is indeed what we get.

1781
01:57:52,930 --> 01:57:57,293
And whenever we change the state
of any one of these items,

1782
01:57:57,293 --> 01:58:02,563
the strikeout class is either applied or
it is removed from the label.

1783
01:58:02,563 --> 01:58:07,570
And that's great, but
this is also slightly difficult to read.

1784
01:58:07,570 --> 01:58:11,559
There is something to say about
defining CSS declaratively.

1785
01:58:11,559 --> 01:58:16,788
But when it comes to the template
of a component, I prefer concise,

1786
01:58:16,788 --> 01:58:22,760
easy to read templates as opposed to
using a lot of JavaScript expressions.

1787
01:58:22,760 --> 01:58:27,517
So what we could do is define
a property in our component.

1788
01:58:27,517 --> 01:58:29,715
Let's define a getter.

1789
01:58:29,715 --> 01:58:32,610
And let's just call it cssClasses.

1790
01:58:32,610 --> 01:58:37,524
And for right now, we are going
to return the result of checking

1791
01:58:37,524 --> 01:58:42,810
the fullfilled property and
returning the appropriate string.

1792
01:58:42,810 --> 01:58:47,822
So now we have this cssClasses property
that we could use to bind to ngClass.

1793
01:58:47,822 --> 01:58:54,093
And whenever we view this in the browser,
we are going to get the same result.

1794
01:58:54,093 --> 01:58:58,311
Whenever we change the state
of any one of these wishes,

1795
01:58:58,311 --> 01:59:03,632
that strikeout class is applied or
it is removed, and that's great.

1796
01:59:03,632 --> 01:59:04,810
That's phenomenal.

1797
01:59:04,810 --> 01:59:07,507
We can also add in the text-muted class.

1798
01:59:07,507 --> 01:59:10,348
That's coming from Bootstrap, and

1799
01:59:10,348 --> 01:59:14,936
that's going to give us slightly
different colored text.

1800
01:59:14,936 --> 01:59:21,507
So you can see that the Get Coffee wish is
muted as opposed to just the normal text.

1801
01:59:21,507 --> 01:59:26,400
But when it comes to applying multiple
classes, we have multiple options.

1802
01:59:26,400 --> 01:59:29,076
Yes, we can take this route and
use a ternary.

1803
01:59:29,076 --> 01:59:33,561
But we can also define our
classes using array so

1804
01:59:33,561 --> 01:59:40,753
that each element in the array is a class
that we want to apply to the element.

1805
01:59:40,753 --> 01:59:44,990
Now let's be good developers here,
and let's return the same type.

1806
01:59:44,990 --> 01:59:49,053
So we will return an array for cssClasses.

1807
01:59:49,053 --> 01:59:53,326
One will be empty, one will have the
classes that we want for fulfilled items,

1808
01:59:53,326 --> 01:59:55,746
and here we can see we
have the same results.

1809
01:59:55,746 --> 01:59:57,680
That's fantastic as well.

1810
01:59:57,680 --> 01:59:59,840
But we can also do this.

1811
01:59:59,840 --> 02:00:01,830
We can return an object.

1812
02:00:01,830 --> 02:00:06,932
And this is very useful because instead
of using a ternary expression, this

1813
02:00:06,932 --> 02:00:12,640
allows us to just return an object where
the property names are the CSS classes.

1814
02:00:12,640 --> 02:00:14,450
That we want to apply.

1815
02:00:14,450 --> 02:00:19,378
So we could have strike out, and then
the value is a conditional statement that

1816
02:00:19,378 --> 02:00:23,948
determines whether or not that CSS
class will be applied to the element.

1817
02:00:23,948 --> 02:00:27,706
So we'll say that we want to
apply the strikeout class based

1818
02:00:27,706 --> 02:00:30,637
upon the value of the fulfilled property,
and

1819
02:00:30,637 --> 02:00:35,430
then we could essentially do the same
thing for text muted if we wanted to.

1820
02:00:35,430 --> 02:00:38,136
So let's go ahead and get that set up, so

1821
02:00:38,136 --> 02:00:43,070
that whenever we view this in the browser,
we will see the same results.

1822
02:00:43,070 --> 02:00:48,283
But we can also make that approach just
a little bit easier, because we could

1823
02:00:48,283 --> 02:00:54,180
use both or all of the CSS classes that we
wanted to apply based upon that condition.

1824
02:00:54,180 --> 02:00:59,552
So now our code is just a little bit
easier to read, at least In my opinion,

1825
02:00:59,552 --> 02:01:05,890
that we want to apply these classes based
upon the value of the fulfilled property.

1826
02:01:05,890 --> 02:01:10,290
So once again, sanity check, let's make
sure everything works, and it does.

1827
02:01:10,290 --> 02:01:13,080
So when it comes to
manipulating CSS classes,

1828
02:01:13,080 --> 02:01:16,020
There are many different
ways that you can do it.

1829
02:01:16,020 --> 02:01:20,570
You can use just simple strings, you
can use arrays, or you can use objects.

1830
02:01:20,570 --> 02:01:23,301
I think I say this a lot,
but there are no hard and

1831
02:01:23,301 --> 02:01:26,930
fast rules as to which is more
appropriate than the other.

1832
02:01:26,930 --> 02:01:30,130
It really just depends upon your use case.

1833
02:01:30,130 --> 02:01:35,010
I want to add the functionality to remove
individual wishes from the wish list.

1834
02:01:35,010 --> 02:01:38,606
So this means that we need to add
a button for each item in the list, and

1835
02:01:38,606 --> 02:01:41,120
then whenever we click on that button,.

1836
02:01:41,120 --> 02:01:42,550
We issue an event.

1837
02:01:42,550 --> 02:01:47,488
Now, the issue here is that we
have the wish list item component

1838
02:01:47,488 --> 02:01:52,720
which contains the functionality for
the individual wish items.

1839
02:01:52,720 --> 02:01:54,310
That's how I wanted it.

1840
02:01:54,310 --> 02:01:59,252
But if we need to manipulate the array
of wishes we have to do that inside of

1841
02:01:59,252 --> 02:02:03,460
the app component because
that's where it is defined.

1842
02:02:03,460 --> 02:02:07,130
So these two components
are not directly related so

1843
02:02:07,130 --> 02:02:13,189
we can't necessarily define an event here
inside of the wishlist item component and

1844
02:02:13,189 --> 02:02:16,370
then listen for
that in the app components.

1845
02:02:16,370 --> 02:02:21,517
Now we can accomplish this in two
different ways, the first would be to

1846
02:02:21,517 --> 02:02:26,578
define a remove item event inside
of the wish list Item component, so

1847
02:02:26,578 --> 02:02:31,740
that we can issue that event and
listen for it inside of the wish list.

1848
02:02:31,740 --> 02:02:36,064
But the wish list itself really doesn't
care about that event because it gets its

1849
02:02:36,064 --> 02:02:37,790
wishes from the app component.

1850
02:02:37,790 --> 02:02:40,470
So there's really nothing
that we can do here except.

1851
02:02:40,470 --> 02:02:45,280
A remove Wish event and then just
forward that on to the app component.

1852
02:02:45,280 --> 02:02:50,577
So we would need to define that remove
wish event on the wish list item, and then

1853
02:02:50,577 --> 02:02:55,732
on the wish list so that the app component
could listen to it on the wish list.

1854
02:02:55,732 --> 02:03:00,960
That's not scalable at all,
that would be a nightmare, especially for

1855
02:03:00,960 --> 02:03:06,891
very large applications when the event
occurs way, way down the component tree.

1856
02:03:06,891 --> 02:03:10,410
So the more feasible option than is
to essentially create what's called

1857
02:03:10,410 --> 02:03:11,107
an event bus.

1858
02:03:11,107 --> 02:03:15,838
It's a global object that basically lets
you issue events from anywhere within

1859
02:03:15,838 --> 02:03:20,723
the application, and listen for those
events anywhere within the application.

1860
02:03:20,723 --> 02:03:25,027
And the way that we can do that
is by using observable objects.

1861
02:03:25,027 --> 02:03:30,678
Now if you're not familiar with
the observer pattern that's very simple,

1862
02:03:30,678 --> 02:03:35,279
you have an object that needs
to supply data to other objects.

1863
02:03:35,279 --> 02:03:39,363
So those other objects subscribe
to the observer object, and

1864
02:03:39,363 --> 02:03:43,370
then when those changes occur
it notifies the subscribers,

1865
02:03:43,370 --> 02:03:46,570
if that sounds like
an event Guess what it is.

1866
02:03:46,570 --> 02:03:50,507
In fact,
every time we have used the event emitter,

1867
02:03:50,507 --> 02:03:53,380
we have used an observable object.

1868
02:03:53,380 --> 02:03:58,230
Except that in this lesson we are going
to use the observable type directly.

1869
02:03:58,230 --> 02:04:00,530
So let's go to the shared directory.

1870
02:04:00,530 --> 02:04:04,846
Let's create a new folder there
we'll call it services, and

1871
02:04:04,846 --> 02:04:10,240
then inside of that services we will
create a new file called event service.

1872
02:04:10,240 --> 02:04:15,255
Now before we do anything here, let's go
back to the wishlist item component and

1873
02:04:15,255 --> 02:04:19,401
let's modify our template here so
that we have our delete button.

1874
02:04:19,401 --> 02:04:24,390
I'm gonna put this inside of another div
element and it's simply just going to

1875
02:04:24,390 --> 02:04:28,257
be a button that uses the button
close class from bootstrap.

1876
02:04:28,257 --> 02:04:31,920
This is going to automatically add that x,
let's go ahead and

1877
02:04:31,920 --> 02:04:35,443
define the type attribute,
we'll set that to button, but

1878
02:04:35,443 --> 02:04:38,550
remember that these divs
are block level elements.

1879
02:04:38,550 --> 02:04:42,300
So if we look at this in the browser,
well, let's just go ahead and do that.

1880
02:04:42,300 --> 02:04:46,054
We will see that the buttons are on
their own lines and we don't want that.

1881
02:04:46,054 --> 02:04:47,165
We want everything together.

1882
02:04:47,165 --> 02:04:52,162
So let's use Flexbox, so
we'll add the deflex class and

1883
02:04:52,162 --> 02:04:56,221
then we will use the justify
content between,

1884
02:04:56,221 --> 02:05:02,797
that's going to put as much white space
in between those two div elements.

1885
02:05:02,797 --> 02:05:08,460
And you can see, there we go, but
the close buttons are way over there.

1886
02:05:08,460 --> 02:05:11,630
So let's open up the app
components templates.

1887
02:05:11,630 --> 02:05:14,325
Let's add another div element here, but

1888
02:05:14,325 --> 02:05:17,330
we're going to use one
of the column classes.

1889
02:05:17,330 --> 02:05:21,610
Let's say that for
the small size screen and above,

1890
02:05:21,610 --> 02:05:24,890
we'll use the four column width.

1891
02:05:24,890 --> 02:05:28,227
That should make this a little
bit easier on the eyes so

1892
02:05:28,227 --> 02:05:32,050
that we could see which close
button goes with which item.

1893
02:05:32,050 --> 02:05:33,640
That's a lot better.

1894
02:05:33,640 --> 02:05:38,330
So with that in place,
we should be able to go ahead and

1895
02:05:38,330 --> 02:05:41,788
define the click event on this button.

1896
02:05:41,788 --> 02:05:46,026
Let's say that we'll have
a method called remove wish, and

1897
02:05:46,026 --> 02:05:51,011
let's go ahead and define that,
because what I'm trying to get to is,

1898
02:05:51,011 --> 02:05:53,691
writing the code that I want to write.

1899
02:05:53,691 --> 02:05:57,535
Because when I do that, I find that and
I end up with much cleaner code.

1900
02:05:57,535 --> 02:05:59,294
So inside of this remove wish,

1901
02:05:59,294 --> 02:06:03,972
let's say that we're gonna have an event
service out just called simply events.

1902
02:06:03,972 --> 02:06:06,748
And we'll have a method called emit,

1903
02:06:06,748 --> 02:06:11,704
because that's typically what
we've been using to emit an event.

1904
02:06:11,704 --> 02:06:16,534
And we will emit an event called remove
wish, but then we need to specify

1905
02:06:16,534 --> 02:06:20,800
something identifying for
the wish that we want to remove.

1906
02:06:20,800 --> 02:06:25,713
So in hindsight, going with the option
of providing the wish text and

1907
02:06:25,713 --> 02:06:30,130
the value for fulfilled probably
wasn't the best approach.

1908
02:06:30,130 --> 02:06:34,639
We should probably just use the wish
object itself as input we'll do

1909
02:06:34,639 --> 02:06:36,310
that in the next lesson.

1910
02:06:36,310 --> 02:06:41,005
For right now let's just get this
event bus working, so that we can have

1911
02:06:41,005 --> 02:06:46,020
something to work with, so for
the remove wish event for right now.

1912
02:06:46,020 --> 02:06:50,913
Let's just pass in the wish
text as our event object,

1913
02:06:50,913 --> 02:06:54,190
so to speak, for this remove wish.

1914
02:06:54,190 --> 02:06:57,422
Ideally, it would be the wish that we
want to remove, but we'll get to that.

1915
02:06:57,422 --> 02:07:02,232
So the concept here is going to be very
similar to what we have with just normal

1916
02:07:02,232 --> 02:07:06,379
events, in that we are going to
emit an event called remove wish.

1917
02:07:06,379 --> 02:07:11,968
And then we are providing the information
involved with that remove wish event,

1918
02:07:11,968 --> 02:07:15,183
which in this case is
going to be the wish text.

1919
02:07:15,183 --> 02:07:18,210
And then let's go to the app component,
and let's go ahead and

1920
02:07:18,210 --> 02:07:21,257
write the code that we will want for
listening for that events.

1921
02:07:21,257 --> 02:07:24,244
So we can do this inside
of the constructor, so

1922
02:07:24,244 --> 02:07:26,241
that we would have our events.

1923
02:07:26,241 --> 02:07:30,749
And we would listen for the remove wish
event, and then we would have a callback

1924
02:07:30,749 --> 02:07:34,042
function because that's
typically what we would have.

1925
02:07:34,042 --> 02:07:36,557
We could define a method to do this, or

1926
02:07:36,557 --> 02:07:40,255
we could just provide
the callback function inline, so

1927
02:07:40,255 --> 02:07:45,448
that eventually we'll get the wish, and
then we will remove Wish from items,

1928
02:07:45,448 --> 02:07:50,089
but for right now we'll just write
out the wish to the console, just so

1929
02:07:50,089 --> 02:07:54,607
that we can see what that is,
let's go ahead and define wish as any.

1930
02:07:54,607 --> 02:07:57,712
So that's the API that I want to use, so

1931
02:07:57,712 --> 02:08:03,091
now we just need to implement that
inside of the EventService file.

1932
02:08:03,091 --> 02:08:06,544
So the first thing we need to
do here is import two things.

1933
02:08:06,544 --> 02:08:10,363
The first is called Observable,
the second is called Subject.

1934
02:08:10,363 --> 02:08:14,249
Now you'll notice that this
is being imported from RxJS.

1935
02:08:14,249 --> 02:08:17,344
This is the Reactive Extensions for
JavaScript,

1936
02:08:17,344 --> 02:08:19,486
which Angular uses extensively.

1937
02:08:19,486 --> 02:08:23,680
And in fact, it uses Observable
extensively, not just for events.

1938
02:08:23,680 --> 02:08:26,072
Whenever we talk about HTTP requests,

1939
02:08:26,072 --> 02:08:29,849
it uses Observable then It is
used throughout the framework.

1940
02:08:29,849 --> 02:08:34,336
Now, Subject is a special
type of Observable object.

1941
02:08:34,336 --> 02:08:39,646
This is essentially going to allow
us to emulate typical events,

1942
02:08:39,646 --> 02:08:46,026
so that we can have multiple objects
that subscribe to our Observable object.

1943
02:08:46,026 --> 02:08:48,514
Meaning that we can
issue a single event and

1944
02:08:48,514 --> 02:08:52,049
then multiple objects can be listening for
that same event.

1945
02:08:52,049 --> 02:08:57,300
So let's start by defining our class,
we'll call it simply EventService.

1946
02:08:57,300 --> 02:09:00,249
We don't need to inherit anything, but

1947
02:09:00,249 --> 02:09:03,815
we do need the Subject,
this is very important.

1948
02:09:03,815 --> 02:09:09,094
We need the Subject which is going
to allow us to essentially pass

1949
02:09:09,094 --> 02:09:14,492
messages from the Observable Object
to the subscriber objects.

1950
02:09:14,492 --> 02:09:19,631
Now I use that term messages because
that's essentially what an event is,

1951
02:09:19,631 --> 02:09:21,189
an event is a message.

1952
02:09:21,189 --> 02:09:25,392
In fact, we use messages for
every piece of software that we write,

1953
02:09:25,392 --> 02:09:28,732
we just might not see them
working behind the scenes.

1954
02:09:28,732 --> 02:09:34,570
All right, so we have the Emit method
where we would have the eventName.

1955
02:09:34,570 --> 02:09:38,188
We'll set that as a string and
then we would have the payload for

1956
02:09:38,188 --> 02:09:40,449
that event, which will be of type any.

1957
02:09:40,449 --> 02:09:44,471
And then we also have the Listen
method that has the eventsName,

1958
02:09:44,471 --> 02:09:45,886
which is a string, but

1959
02:09:45,886 --> 02:09:50,990
then we have the callback function
which we'll just call back function.

1960
02:09:50,990 --> 02:09:55,361
And then we will define this
function as having an event,

1961
02:09:55,361 --> 02:09:58,102
arguments and it will return void.

1962
02:09:58,102 --> 02:10:02,418
Now emitting an event is going
to be very straightforward,

1963
02:10:02,418 --> 02:10:05,008
we're going to use this subject and

1964
02:10:05,008 --> 02:10:09,778
then anytime we want to emit an event
we call a method called next.

1965
02:10:09,778 --> 02:10:14,809
We pass in the object that we want
the subscribers to work with.

1966
02:10:14,809 --> 02:10:18,145
So in this particular case,
we'll have the eventName and

1967
02:10:18,145 --> 02:10:19,925
then we will have the payload.

1968
02:10:19,925 --> 02:10:24,586
So whatever object is going to
subscribe to an event is going to get

1969
02:10:24,586 --> 02:10:27,312
an object with these two properties.

1970
02:10:27,312 --> 02:10:32,799
But we're going to simplify it for
those subscribers because inside of listen

1971
02:10:32,799 --> 02:10:38,049
we are going to use our subject and
there's a method called AsObservable.

1972
02:10:38,049 --> 02:10:42,092
And this is going to give us
access to a subscribe method.

1973
02:10:42,092 --> 02:10:46,877
And this subscribe method by
default accepts a callback

1974
02:10:46,877 --> 02:10:52,281
function that will accept whatever
we pass to the next method.

1975
02:10:52,281 --> 02:10:56,652
So whenever we emit any event
this next method, we'll execute,

1976
02:10:56,652 --> 02:11:01,220
it will pass in this object that
has the EventsName and payload.

1977
02:11:01,220 --> 02:11:07,010
That object will be passed to the callback
function for the subscribe method.

1978
02:11:07,010 --> 02:11:12,779
So here we will have a callback that gets,
let's call this nextObj.

1979
02:11:12,779 --> 02:11:15,281
It's a little bit more
telling as to what it is,

1980
02:11:15,281 --> 02:11:17,795
and then inside of this callback for
function.

1981
02:11:17,795 --> 02:11:21,522
We are going to check if
the given events name

1982
02:11:21,522 --> 02:11:26,265
is equal to the events name
that comes from the nextObj.

1983
02:11:26,265 --> 02:11:31,232
Because if those are equal,
then we want to call the provided callback

1984
02:11:31,232 --> 02:11:36,046
function where we will simply pass
in the payload from the nextObj.

1985
02:11:36,046 --> 02:11:39,199
It's a little bit convoluted, but
if we sit and think about this,

1986
02:11:39,199 --> 02:11:40,619
then it makes perfect sense.

1987
02:11:40,619 --> 02:11:47,280
So the object that is going to emit
the event calls the subjects next method.

1988
02:11:47,280 --> 02:11:50,610
And it passes in the event object,
so to speak,

1989
02:11:50,610 --> 02:11:54,455
that event object has the EventsName and
the payload.

1990
02:11:54,455 --> 02:11:59,747
The object that is going to listen for
that event is going to use the subjects

1991
02:11:59,747 --> 02:12:05,301
as Observable method, because this gives
us access to the subscribe method.

1992
02:12:05,301 --> 02:12:08,130
So an object that is going to subscribe,

1993
02:12:08,130 --> 02:12:12,888
we'll receive this event object
with the EventsName and payload.

1994
02:12:12,888 --> 02:12:17,249
So we simply check if
the EventsName is the same as was

1995
02:12:17,249 --> 02:12:19,935
provided to the Listen method.

1996
02:12:19,935 --> 02:12:24,321
And if it is, then we execute
the provided callback function and

1997
02:12:24,321 --> 02:12:26,526
then pass in the event payload.

1998
02:12:26,526 --> 02:12:30,745
Now all we need to do is add
a reference to that service.

1999
02:12:30,745 --> 02:12:36,955
So inside of the @ component,
that should be inside of the parents and

2000
02:12:36,955 --> 02:12:41,920
then shared, then services,
and then EventService.

2001
02:12:41,920 --> 02:12:47,023
Although, we need our events domain,
so let's go back to EventService,

2002
02:12:47,023 --> 02:12:50,350
and we want to export
default new EventService.

2003
02:12:50,350 --> 02:12:56,115
So there we go, that should fix the error
there inside of the app component.

2004
02:12:56,115 --> 02:13:01,217
So let's copy that line, let's paste it
inside of the WishList item component.

2005
02:13:01,217 --> 02:13:05,309
We do need to change this import path
because we are deeper in the directory

2006
02:13:05,309 --> 02:13:09,470
structure, but with that in place,
we should be able to go to the browser.

2007
02:13:09,470 --> 02:13:11,495
Let's open up the console and

2008
02:13:11,495 --> 02:13:17,200
we have an error expression has changed
after it was checked, blah, blah, blah.

2009
02:13:17,200 --> 02:13:19,981
That's okay for now,
that doesn't really affect us right now.

2010
02:13:19,981 --> 02:13:24,420
So whenever we click on any one
of these buttons, we should see.

2011
02:13:24,420 --> 02:13:26,911
Well we,
at least see something in the console.

2012
02:13:26,911 --> 02:13:32,137
We see undefined, but
we don't see necessarily what we expected,

2013
02:13:32,137 --> 02:13:35,253
I expected to see the text of the wish, so

2014
02:13:35,253 --> 02:13:39,395
something somewhere is not
being passed correctly.

2015
02:13:39,395 --> 02:13:44,189
So the first thing I'm going to
do is add Debugger for emits,

2016
02:13:44,189 --> 02:13:49,171
and then we can do that inside of
the callback for subscribe, so

2017
02:13:49,171 --> 02:13:51,432
we will add debugger there.

2018
02:13:51,432 --> 02:13:57,713
So let's go back, and let's clear this out
whenever we click on one of these buttons.

2019
02:13:57,713 --> 02:14:02,060
All right, so let's inspect here, we can
see that the payload is Learn Angular, so

2020
02:14:02,060 --> 02:14:03,049
that makes sense.

2021
02:14:03,049 --> 02:14:06,820
Let's continue on so
that we will hit the next debugger.

2022
02:14:06,820 --> 02:14:09,855
We see that the eventName is removeWish.

2023
02:14:09,855 --> 02:14:13,720
The payload is Learn Angular,
okay, so that's great.

2024
02:14:13,720 --> 02:14:15,876
Let's start stepping through here.

2025
02:14:15,876 --> 02:14:20,420
So we will step,
the eventName should be the same as

2026
02:14:20,420 --> 02:14:25,083
the New Object's eventName,
so let's step over.

2027
02:14:25,083 --> 02:14:29,000
Once again, we see Next Object
has eventName as removeWish.

2028
02:14:29,000 --> 02:14:32,267
Payload is Learn Angular,
so, that is okay.

2029
02:14:32,267 --> 02:14:36,223
Let's step into this,
the wish is type any.

2030
02:14:36,223 --> 02:14:39,680
We can see that that is Learn Angular,
let's step over.

2031
02:14:39,680 --> 02:14:42,142
So all of that should be fine.

2032
02:14:42,142 --> 02:14:43,402
Why?

2033
02:14:43,402 --> 02:14:44,967
Well, now we see Learn Angular.

2034
02:14:44,967 --> 02:14:49,177
Maybe I just wasn't patient enough and
needed to restart, I don't know.

2035
02:14:49,177 --> 02:14:51,742
It's working now, so
let's get rid of the debuggers.

2036
02:14:51,742 --> 02:14:53,810
Let's save it,
let's go back to the browser.

2037
02:14:53,810 --> 02:14:58,836
Let's do a hard refresh to make
sure everything is loaded, okay?

2038
02:14:58,836 --> 02:15:02,698
Looks like it is, let's clear this out,
so whenever we click OK.

2039
02:15:02,698 --> 02:15:07,764
I don't know why we were seeing undefined
before, but it is clearly working now.

2040
02:15:07,764 --> 02:15:12,622
So we have our event bus, and this is
fantastic because now we can issue events

2041
02:15:12,622 --> 02:15:15,180
from anywhere within our application.

2042
02:15:15,180 --> 02:15:19,200
And we can listen for those events also
anywhere throughout our application.

2043
02:15:19,200 --> 02:15:24,502
The only thing that we need to do now
is modify our WishList item component,

2044
02:15:24,502 --> 02:15:29,469
so that we work with the wish object
instead of the individual pieces of

2045
02:15:29,469 --> 02:15:30,750
the wish object.

2046
02:15:30,750 --> 02:15:35,395
In order to complete the remove wish
functionality we need some way to

2047
02:15:35,395 --> 02:15:40,600
identify the wish that we want to remove
because as it is right now the wishlist

2048
02:15:40,600 --> 02:15:45,085
item component only works with
the Individual pieces of a wish, so

2049
02:15:45,085 --> 02:15:48,716
we can accomplish this in
a couple of different ways.

2050
02:15:48,716 --> 02:15:54,126
The first would be to supply some kind
of unique identifier for each Wish.

2051
02:15:54,126 --> 02:15:56,955
Which in a real application,
that's what we would have,

2052
02:15:56,955 --> 02:16:00,780
because the wish information would be
coming from some kinda data store.

2053
02:16:00,780 --> 02:16:06,377
However, I think it would be just fine
if we forego the individual pieces and

2054
02:16:06,377 --> 02:16:08,220
then just provide.

2055
02:16:08,220 --> 02:16:11,980
The actual Wish object
to the Wishlist Item.

2056
02:16:11,980 --> 02:16:16,022
That way we can do whatever it is that
we need to inside of the WishListItem

2057
02:16:16,022 --> 02:16:19,330
component, which is really
what I wanted to begin with.

2058
02:16:19,330 --> 02:16:23,988
So I'm going to modify this so
that we no longer have that Wish Text

2059
02:16:23,988 --> 02:16:28,490
property we won't have the two
way binding for the fulfilled.

2060
02:16:28,490 --> 02:16:33,704
I mean yes, refactoring kinda seems like
that we are undoing the work that we've

2061
02:16:33,704 --> 02:16:39,180
done but it was also good practice just as
this is also good practice for us as well.

2062
02:16:39,180 --> 02:16:41,951
So as far as the CSS
classes are concerned,

2063
02:16:41,951 --> 02:16:46,379
we're gonna base that upon
the wishes is complete property.

2064
02:16:46,379 --> 02:16:47,639
That's gonna be fine.

2065
02:16:47,639 --> 02:16:54,039
Then for the remove wish, now we can pass
in the wish object that we will get.

2066
02:16:54,040 --> 02:16:58,410
Then when it comes to toggling the
fulfilled, we can leave this method here.

2067
02:16:58,410 --> 02:17:01,530
There's nothing that says that
we have to get rid of this.

2068
02:17:01,530 --> 02:17:06,421
I mean I think ideally what I would
wanna do is remove the Toggle Fulfilled

2069
02:17:06,421 --> 02:17:11,394
method altogether so that we could
declaratively have that right here for

2070
02:17:11,394 --> 02:17:14,879
the click event, but
this is gonna be just fine.

2071
02:17:14,879 --> 02:17:18,662
So for the text we'll have
the Wish that wish.txt for

2072
02:17:18,663 --> 02:17:22,279
the fulfilled we'll set
that to the is complete and

2073
02:17:22,279 --> 02:17:27,240
that should be fine as far as this
component is concerned we need to go to

2074
02:17:27,240 --> 02:17:32,906
the wishlist components because we are no
longer going to pass the wish.text.

2075
02:17:32,906 --> 02:17:38,281
And this fulfilled property instead we
will just have the wish property and

2076
02:17:38,281 --> 02:17:42,799
that should work there so
now all we need to do is inside of the app

2077
02:17:42,799 --> 02:17:47,748
component we need to modify this so
that instead of writing something

2078
02:17:47,749 --> 02:17:51,629
to the console We will simply
modify the items array.

2079
02:17:51,629 --> 02:17:56,129
We will use splice so
that we can have the index.

2080
02:17:56,129 --> 02:17:57,679
So let's first of all do this.

2081
02:17:57,680 --> 02:18:01,190
We'll get the index of the item
that we want to remove.

2082
02:18:01,190 --> 02:18:03,035
That'll be easier enough to do.

2083
02:18:03,035 --> 02:18:07,205
And then we will remove that
with the splice method.

2084
02:18:07,205 --> 02:18:10,705
We'll pass an index and
we only want to remove that one item.

2085
02:18:10,705 --> 02:18:12,445
So that should work.

2086
02:18:12,445 --> 02:18:16,030
Now Visual Studio Code is saying that
there's still an error inside of

2087
02:18:16,030 --> 02:18:16,915
the wish list.

2088
02:18:16,915 --> 02:18:18,745
However everything compiled okay.

2089
02:18:18,745 --> 02:18:20,295
So let's go to the browser.

2090
02:18:20,295 --> 02:18:21,405
Everything looks okay.

2091
02:18:21,405 --> 02:18:24,559
So if we Click on the Delete for
Get Coffee.

2092
02:18:24,559 --> 02:18:25,964
That should remove it.

2093
02:18:25,965 --> 02:18:27,750
[LAUGH] And it does.

2094
02:18:27,750 --> 02:18:31,610
That worked the first
time that's incredible.

2095
02:18:31,610 --> 02:18:33,660
How many times has that ever happened?

2096
02:18:33,660 --> 02:18:34,240
Not very often.

2097
02:18:34,240 --> 02:18:37,490
So if we remove everything
everything's gone.

2098
02:18:37,490 --> 02:18:41,931
So okay, I want $100,000.

2099
02:18:41,931 --> 02:18:43,680
Let's add that.

2100
02:18:43,680 --> 02:18:45,459
Let's change our filter.

2101
02:18:45,459 --> 02:18:48,529
And if we remove that, there we go.

2102
02:18:48,530 --> 02:18:53,123
We have the functionality now
to remove individual wishes and

2103
02:18:53,123 --> 02:18:58,421
we accomplish that by writing our own
event bus now, the only thing that

2104
02:18:58,421 --> 02:19:03,717
I wanna change now, this is how we get
access to that event bus because as

2105
02:19:03,717 --> 02:19:09,013
it is we have created that event object or
that event service objects and

2106
02:19:09,013 --> 02:19:14,629
we are exporting that And we're using
that object wherever we need to.

2107
02:19:14,629 --> 02:19:17,912
Wouldn't it be nice if
we could automatically

2108
02:19:17,913 --> 02:19:22,110
inject that into the classes
that we want to use it in?

2109
02:19:22,110 --> 02:19:25,230
Well, we can and
we will look at that in the next lesson.

2110
02:19:25,230 --> 02:19:29,090
Dependency Injection has become the norm
in modern software development.

2111
02:19:29,090 --> 02:19:32,000
It doesn't matter if it's server-side or
client-side.

2112
02:19:32,000 --> 02:19:36,406
It doesn't even matter what client-side
framework you use because all modern

2113
02:19:36,406 --> 02:19:40,022
frameworks have some kind of
dependency injection service, and

2114
02:19:40,022 --> 02:19:41,910
angular is no different.

2115
02:19:41,910 --> 02:19:46,133
Now, if you're not familiar with
the concept of dependency injection,

2116
02:19:46,133 --> 02:19:49,730
it's actually very simple
it injects dependencies.

2117
02:19:49,730 --> 02:19:51,570
So, first of all, what is a dependency?

2118
02:19:51,570 --> 02:19:54,080
Well, Let's take a look
at our event service.

2119
02:19:54,080 --> 02:19:57,933
We, of course,
have this event service class, and

2120
02:19:57,933 --> 02:20:01,140
then we export an object that we create.

2121
02:20:01,140 --> 02:20:05,806
So we are creating an actual object
that we are then importing inside of

2122
02:20:05,806 --> 02:20:08,300
the wish list item component.

2123
02:20:08,300 --> 02:20:10,350
And then the app component.

2124
02:20:10,350 --> 02:20:14,048
We are using that object to listen for

2125
02:20:14,048 --> 02:20:20,200
the remove wish event and
to emit that remove wish event.

2126
02:20:20,200 --> 02:20:25,060
This event's object,
this actual object that we created,

2127
02:20:25,060 --> 02:20:29,910
is a dependency in the app and
wishlist item components.

2128
02:20:29,910 --> 02:20:32,613
And we could say that it
is a hard dependency,

2129
02:20:32,613 --> 02:20:35,673
because we have actually
created that object, and

2130
02:20:35,673 --> 02:20:39,710
we are actually using that object
inside of those components.

2131
02:20:39,710 --> 02:20:42,356
Well, hard dependencies can
be a little problematic,

2132
02:20:42,356 --> 02:20:46,390
because it can make your code a little bit
more difficult to maintain and update.

2133
02:20:46,390 --> 02:20:51,190
But it can also cause some issues whenever
you need to test your components.

2134
02:20:51,190 --> 02:20:54,652
So, we want to use
the Dependency Injection service so

2135
02:20:54,652 --> 02:20:58,700
that we don't have to create
our dependencies ourselves.

2136
02:20:58,700 --> 02:21:03,980
All we have to do is tell Angular
what it is that we want to use.

2137
02:21:03,980 --> 02:21:07,860
And then it will automatically
inject our dependencies.

2138
02:21:07,860 --> 02:21:10,602
So for our wishlist item component,

2139
02:21:10,602 --> 02:21:15,220
we'll say that we wanna import
that event service class.

2140
02:21:15,220 --> 02:21:18,660
Now, of course, this isn't going to work
now because we aren't exporting that.

2141
02:21:18,660 --> 02:21:21,770
But let's first of all,
imagine that that's what we are doing.

2142
02:21:21,770 --> 02:21:23,990
We are exporting the class.

2143
02:21:23,990 --> 02:21:29,372
So that in the constructor, we say
that we want an object called events,

2144
02:21:29,372 --> 02:21:32,860
and we want it to be
of type event service.

2145
02:21:32,860 --> 02:21:37,506
We're going to say that it's private
events, so that it will automatically

2146
02:21:37,506 --> 02:21:42,460
create that property for us, so
that we don't have to create that object.

2147
02:21:42,460 --> 02:21:48,069
All we have to say is I want this wishlist
component to rely upon this dependency and

2148
02:21:48,069 --> 02:21:52,868
then Angular will provide that object for
us automatically we could do

2149
02:21:52,868 --> 02:21:58,073
the same thing inside of the app component
to where we would once again Import

2150
02:21:58,073 --> 02:22:03,034
the EventService class, and
then in the constructor, we would say that

2151
02:22:03,034 --> 02:22:08,220
we want an object called Events and
it needs to be of type EventService.

2152
02:22:08,220 --> 02:22:11,383
Now, in this particular case,
we don't need to create a property

2153
02:22:11,383 --> 02:22:15,450
because we are using events right here
directly inside of the constructor.

2154
02:22:15,450 --> 02:22:17,430
But that's the idea.

2155
02:22:17,430 --> 02:22:21,740
We don't create our dependencies,
Angular would do it for us.

2156
02:22:21,740 --> 02:22:24,520
The first thing we need to do
is go to our event service.

2157
02:22:24,520 --> 02:22:28,827
We need to get rid of this export
statements to where we create that actual

2158
02:22:28,827 --> 02:22:29,850
object.

2159
02:22:29,850 --> 02:22:33,050
And we are gonna export the class itself.

2160
02:22:33,050 --> 02:22:34,040
But that's not enough.

2161
02:22:34,040 --> 02:22:37,570
As you'll see,
there is a compilation error.

2162
02:22:37,570 --> 02:22:40,250
If we take a look at the browser,
well, we are going to see an error.

2163
02:22:40,250 --> 02:22:43,270
It says, no suitable injection token for

2164
02:22:43,270 --> 02:22:48,449
Parameter events have class app
component that basically says that's

2165
02:22:48,449 --> 02:22:54,170
it can't inject the event service
because it doesn't know that it can.

2166
02:22:54,170 --> 02:23:00,068
It's not an automatic thing even though
we want it to be an automatic thing so

2167
02:23:00,068 --> 02:23:04,309
what we need to do is mark
this class with the injectable

2168
02:23:04,309 --> 02:23:09,105
decorator this is essentially
going to tell Angular that this

2169
02:23:09,105 --> 02:23:14,020
class can be injected into other classes,
so we'll add that.

2170
02:23:14,020 --> 02:23:16,450
Now, there's a little issue here.

2171
02:23:16,450 --> 02:23:19,389
We're gonna have to go
to the other files and

2172
02:23:19,389 --> 02:23:24,237
we're gonna have to save these again so
that the compiler Will recompile

2173
02:23:24,237 --> 02:23:28,546
everything, but now we can see
that it compiled successfully.

2174
02:23:28,546 --> 02:23:32,235
Fantastic let's go to the browser and
we don't see anything.

2175
02:23:32,235 --> 02:23:37,535
Let's do a refresh here.once again,
we don't see anything and we kind of get

2176
02:23:37,535 --> 02:23:42,860
the same error that there's this injector
error for at module event service.

2177
02:23:42,860 --> 02:23:44,303
Blabbity blah, blah, blah, blah.

2178
02:23:44,303 --> 02:23:50,393
Well, here's the thing, it's great that
we used the injectable decorator here,

2179
02:23:50,393 --> 02:23:52,900
but that by itself isn't enough.

2180
02:23:52,900 --> 02:23:55,740
So we can do one of two things here.

2181
02:23:55,740 --> 02:24:01,367
We can go to our AppModule and
we could import that event service,

2182
02:24:01,367 --> 02:24:08,552
and then we could add that event service
to the providers array, so let's do that.

2183
02:24:08,552 --> 02:24:11,400
We'll go back to the browser, and voila,

2184
02:24:11,400 --> 02:24:14,496
we have that error of
expression has changed.

2185
02:24:14,496 --> 02:24:15,428
We'll ignore that.

2186
02:24:15,428 --> 02:24:19,024
And as you can see,
our code works just fine.

2187
02:24:19,024 --> 02:24:21,606
So that's one way of doing it.

2188
02:24:21,606 --> 02:24:25,595
However, whenever we use
the injectable decorator,

2189
02:24:25,595 --> 02:24:30,895
we can essentially specify where we
want to be able to inject that class.

2190
02:24:30,895 --> 02:24:36,695
So all we have to do is pass an object
that has a property called providedIn,

2191
02:24:36,695 --> 02:24:40,745
and then this gives us
the ability to essentially say

2192
02:24:40,745 --> 02:24:44,260
where we want to provide
this event service.

2193
02:24:44,260 --> 02:24:46,029
So we have a few options.

2194
02:24:46,029 --> 02:24:50,945
If we wanted it to be inside of
the AppModule and only the AppModule,

2195
02:24:50,945 --> 02:24:54,224
then we could essentially
do the same thing,

2196
02:24:54,224 --> 02:24:58,041
except we could say that
it would be AppModule here.

2197
02:24:58,041 --> 02:25:03,562
We would, of course, need to import that
here, but that would give us the same

2198
02:25:03,562 --> 02:25:09,016
functionality that we just had by using
the event service as a provider here.

2199
02:25:09,016 --> 02:25:10,064
I don't want to do that.

2200
02:25:10,064 --> 02:25:11,564
We could, but I don't want to.

2201
02:25:11,564 --> 02:25:14,964
We could also provide
a string called root.

2202
02:25:14,964 --> 02:25:19,892
Now this is an application-level injector,
so this essentially means that

2203
02:25:19,892 --> 02:25:24,691
the event service would be available
throughout the entire application.

2204
02:25:24,691 --> 02:25:28,438
I don't have any data to back this up,
but I would think for the most part,

2205
02:25:28,438 --> 02:25:30,137
that's what we would want to do.

2206
02:25:30,137 --> 02:25:32,557
However, there are other options.

2207
02:25:32,557 --> 02:25:36,627
There's one called platform,
because it would be possible

2208
02:25:36,627 --> 02:25:41,028
to have multiple Angular applications
running in the same page.

2209
02:25:41,028 --> 02:25:46,195
And it could be possible that you would
want that class to be injected or

2210
02:25:46,195 --> 02:25:50,470
injectable throughout all
of those applications.

2211
02:25:50,470 --> 02:25:53,618
In that case,
you would want to use platform.

2212
02:25:53,618 --> 02:25:57,245
And then there's an any which,
well, it's any.

2213
02:25:57,245 --> 02:26:00,849
For our case,
root is going to be just fine.

2214
02:26:00,849 --> 02:26:04,210
So with that change,
we'll be able to go back to the browser.

2215
02:26:04,210 --> 02:26:06,824
Our code is going to
work as it did before, so

2216
02:26:06,824 --> 02:26:09,239
we can clear out all of the other things.

2217
02:26:09,239 --> 02:26:13,906
Let's add the wish for
$100,000, there it is.

2218
02:26:13,906 --> 02:26:16,048
We completed it, which would be nice.

2219
02:26:16,048 --> 02:26:17,450
And let's get rid of it.

2220
02:26:17,450 --> 02:26:21,532
One of the most common things that we do
within our client applications is interact

2221
02:26:21,532 --> 02:26:22,430
with the server.

2222
02:26:22,430 --> 02:26:27,150
We issue HTTP requests to fetch data or
manipulate that data.

2223
02:26:27,150 --> 02:26:33,020
And Angular is a little bit different
than other UI frameworks like React and

2224
02:26:33,020 --> 02:26:36,424
Vue because it has a built-in HTTP client.

2225
02:26:36,424 --> 02:26:41,189
Now, yes, you can technically say that
every framework has a built-in HTTP

2226
02:26:41,189 --> 02:26:46,040
client because, well, we have the Fetch
API that's built into the browser.

2227
02:26:46,040 --> 02:26:48,540
And yes, that is absolutely true.

2228
02:26:48,540 --> 02:26:51,456
But if you've built applications before,

2229
02:26:51,456 --> 02:26:55,000
you know the benefit of using
an HTTP client library,

2230
02:26:55,000 --> 02:26:59,672
something that makes it a little bit
easier to work with the Fetch API.

2231
02:26:59,672 --> 02:27:04,515
So React and
Vue do not have a built-in HTTP client.

2232
02:27:04,515 --> 02:27:09,749
You have to use a third-party client,
or you can just use the Fetch API.

2233
02:27:09,749 --> 02:27:14,789
For Angular,
we can import the HTTP client module.

2234
02:27:14,789 --> 02:27:16,411
As I mentioned, it's built-in.

2235
02:27:16,411 --> 02:27:21,804
We just need to import it
from @angular/common/http.

2236
02:27:21,804 --> 02:27:27,114
And after we import that, we can add
it as an element to the imports array.

2237
02:27:27,114 --> 02:27:29,907
I am inside of the AppModule file.

2238
02:27:29,907 --> 02:27:35,042
So we are adding this as an import
just like we did with the FormsModule.

2239
02:27:35,042 --> 02:27:39,940
And by doing this, we make
the HttpClientModule available throughout

2240
02:27:39,940 --> 02:27:44,834
our application, so that then we can
write a service that will interact

2241
02:27:44,834 --> 02:27:47,952
with whatever data that
we need to work with.

2242
02:27:47,952 --> 02:27:51,620
Like for example,
we are working with our wishes, and

2243
02:27:51,620 --> 02:27:55,868
currently we have the items array
inside of our app component.

2244
02:27:55,868 --> 02:27:59,292
This is hard coded to
have individual wishes.

2245
02:27:59,292 --> 02:28:03,833
Instead, I would like to fetch
this information from a JSON file.

2246
02:28:03,833 --> 02:28:08,693
Ideally, we would have some web service so
that we can make GET, POST,

2247
02:28:08,693 --> 02:28:11,044
DELETE requests, but we don't.

2248
02:28:11,044 --> 02:28:15,343
So for right now, we will just have a JSON
file that has that same information.

2249
02:28:15,343 --> 02:28:20,381
We will fetch that information and
then use that to populate the items array.

2250
02:28:20,381 --> 02:28:24,552
So let's go to our assets folder,
and let's create a new file.

2251
02:28:24,552 --> 02:28:26,802
Let's just call it wishes.json.

2252
02:28:26,802 --> 02:28:28,854
And then let's paste in that array.

2253
02:28:28,854 --> 02:28:31,272
Now, of course, this is not valid JSON.

2254
02:28:31,272 --> 02:28:33,744
So we need to make a few changes.

2255
02:28:33,744 --> 02:28:35,361
First of all, each and

2256
02:28:35,361 --> 02:28:40,216
individual element is going to be
an object that will have a property

2257
02:28:40,216 --> 02:28:45,341
called wishText that is going to be
set to the string value that we have.

2258
02:28:45,341 --> 02:28:47,900
In this particular case,
it's Learn Angular.

2259
02:28:47,900 --> 02:28:51,733
But then we also have
that isComplete property.

2260
02:28:51,733 --> 02:28:54,359
And we can go ahead and set that as false.

2261
02:28:54,359 --> 02:28:58,712
But of course, the property name
needs to be a string as well.

2262
02:28:58,712 --> 02:29:03,225
So this gives us something that we can
easily just copy and paste a few times and

2263
02:29:03,225 --> 02:29:05,246
then make the necessary changes.

2264
02:29:05,246 --> 02:29:10,147
So we have a wish to get coffee,
that is always true, because,

2265
02:29:10,147 --> 02:29:12,462
well, I always have coffee.

2266
02:29:12,462 --> 02:29:17,710
And we have that other wish for
finding grass that cuts itself.

2267
02:29:17,710 --> 02:29:21,363
That has been a dream of mine for
so many years.

2268
02:29:21,363 --> 02:29:26,459
All right, so we have this wishes file,
and we want to be able to fetch this

2269
02:29:26,459 --> 02:29:32,155
information, parse it into an actual array
of objects that we can then work with.

2270
02:29:32,155 --> 02:29:37,511
But in a real application, we would want
to abstract this out into its own service,

2271
02:29:37,511 --> 02:29:41,966
so that we could have a service
responsible for working with wishes.

2272
02:29:41,966 --> 02:29:47,356
So we would fetch the wishes, we would add
a wish, we would delete a wish, things

2273
02:29:47,356 --> 02:29:53,086
like that, because that service would then
issue those HTTP requests to the server.

2274
02:29:53,086 --> 02:29:54,896
So let's create a service.

2275
02:29:54,896 --> 02:29:57,583
Now we can do this in
a couple of different ways.

2276
02:29:57,583 --> 02:30:04,593
In a couple of lessons ago, we created
our own service for our event bus.

2277
02:30:04,593 --> 02:30:06,232
And that was perfectly fine.

2278
02:30:06,232 --> 02:30:10,520
We can also turn to the CLI
to create a service.

2279
02:30:10,520 --> 02:30:12,360
So let's look at that.

2280
02:30:12,360 --> 02:30:16,900
So the command is, ng generate service.

2281
02:30:16,900 --> 02:30:19,986
And then we provide
the name of the service.

2282
02:30:19,986 --> 02:30:24,746
But we don't want to have the term
service at the end, because what

2283
02:30:24,746 --> 02:30:30,110
this would do [LAUGH] is create
a class that says WishServiceService.

2284
02:30:30,110 --> 02:30:34,852
So basically, we just want to define
the name of the service that we want

2285
02:30:34,852 --> 02:30:39,530
without the word service, and
then this is going to create two files.

2286
02:30:39,530 --> 02:30:42,250
The first is going to be the code file.

2287
02:30:42,250 --> 02:30:46,769
That is, of course,
going to be our class for our service, and

2288
02:30:46,769 --> 02:30:49,517
then there's the spec for the tests.

2289
02:30:49,517 --> 02:30:54,800
So we have that file now,
let's open up wish.service.ts.

2290
02:30:54,800 --> 02:30:57,614
This is inside of the app folder.

2291
02:30:57,614 --> 02:31:02,372
And you can see that it automatically
makes this service injectable.

2292
02:31:02,372 --> 02:31:08,244
So we will be able to turn around and use
the service inside of the app component.

2293
02:31:08,244 --> 02:31:10,094
So let's go ahead and do that.

2294
02:31:10,094 --> 02:31:14,864
We will import the WishService
from wish-service,

2295
02:31:14,864 --> 02:31:19,319
and then we can inject
that into the constructor.

2296
02:31:19,319 --> 02:31:24,219
So let's make this a property,
we'll call it wishService, and

2297
02:31:24,219 --> 02:31:26,187
the type is WishService.

2298
02:31:26,187 --> 02:31:30,548
So this gives us that wishService that
we can use inside of the app component.

2299
02:31:30,548 --> 02:31:32,070
That's great, but

2300
02:31:32,070 --> 02:31:36,733
we need to write the code that is
going to fetch that JSON file.

2301
02:31:36,733 --> 02:31:42,310
So inside of this service,
we need to import the HTTP client,

2302
02:31:42,310 --> 02:31:45,328
and we do this from the same file.

2303
02:31:45,328 --> 02:31:49,719
So that would be @angular/common/http.

2304
02:31:49,719 --> 02:31:55,211
And this is injectable, so we can
inject that into our constructor here.

2305
02:31:55,211 --> 02:32:00,800
So let's make this a property
called http of type Http client.

2306
02:32:00,800 --> 02:32:03,520
And then we will have
a method called getWishes, or

2307
02:32:03,520 --> 02:32:05,360
we could call it whatever we want.

2308
02:32:05,360 --> 02:32:09,532
But the idea is that we know
that this is the method that

2309
02:32:09,532 --> 02:32:12,550
we would use to fetch our wishes.

2310
02:32:12,550 --> 02:32:17,580
So we would use our Http object,
this has a variety of methods.

2311
02:32:17,580 --> 02:32:23,400
You can see right here there's delete,
get, head, JSONP, options, patch, post.

2312
02:32:23,400 --> 02:32:27,305
So basically, any type of request that
we would want to make, we could do that.

2313
02:32:27,305 --> 02:32:32,445
In this case, we want to make a get
request and then we simply specify

2314
02:32:32,445 --> 02:32:38,686
the URL that we want to make a request for
that is our assets and then wishes.json.

2315
02:32:38,686 --> 02:32:42,940
Now there are other options that we can
add here which we will talk about at

2316
02:32:42,940 --> 02:32:47,080
a later time, but for right now,
I just want to make this work.

2317
02:32:47,080 --> 02:32:53,180
So what we are going to do then is return
the result of calling the get method.

2318
02:32:53,180 --> 02:32:57,143
Now the get method returns an observable,
and

2319
02:32:57,143 --> 02:33:03,043
by calling the get method,
the actual request has not been sent yet.

2320
02:33:03,043 --> 02:33:08,480
Since this is an observable object,
there is a subscribe method that

2321
02:33:08,480 --> 02:33:15,020
we can use whenever you call the subscribe
method, then the request is sent.

2322
02:33:15,020 --> 02:33:18,888
So just because we call the get method or
the post method or

2323
02:33:18,888 --> 02:33:23,490
any one of the other methods,
that request has not yet been set.

2324
02:33:23,490 --> 02:33:26,510
So let's hop on back to the app component.

2325
02:33:26,510 --> 02:33:34,020
And what I want to do is make our
http request with the OnInit method.

2326
02:33:34,020 --> 02:33:40,209
Now remember whenever we created our other
components using the command line that

2327
02:33:40,209 --> 02:33:46,130
tool gave us our component, but
it also made them implement the OnInit.

2328
02:33:46,130 --> 02:33:48,431
This was a method that executes so

2329
02:33:48,431 --> 02:33:52,740
that we can perform other
initialization processes.

2330
02:33:52,740 --> 02:33:57,320
One of those things could
be making an HTTP request.

2331
02:33:57,320 --> 02:34:03,158
So, we want to implement this
OnInit inside of our add component,

2332
02:34:03,158 --> 02:34:07,080
so let's add that implements OnInit.

2333
02:34:07,080 --> 02:34:11,014
We of course need to update
the import statement so

2334
02:34:11,014 --> 02:34:16,730
that we aren't just importing components,
we also import OnInit.

2335
02:34:16,730 --> 02:34:20,820
And then we can define that ng OnInit.

2336
02:34:20,820 --> 02:34:26,579
So here, we would use our wish service,
we would call the method getWishes, and

2337
02:34:26,579 --> 02:34:32,200
remember that this returns an observable,
so we would call subscribe.

2338
02:34:32,200 --> 02:34:35,642
So right at this point,
whenever we call subscribe,

2339
02:34:35,642 --> 02:34:40,461
that is going to make that http request,
and so we need to provide a callback

2340
02:34:40,461 --> 02:34:45,050
function that will execute when
that request has been completed.

2341
02:34:45,050 --> 02:34:47,300
So we are going to get some data back.

2342
02:34:47,300 --> 02:34:54,170
And all we really want to do is set our
items equal to the data that we received.

2343
02:34:54,170 --> 02:34:59,233
Now let's do specify that data is any but
with that change, we can hop on over to

2344
02:34:59,233 --> 02:35:04,430
the browser, and we are going to see
that our code still looks like it works.

2345
02:35:04,430 --> 02:35:07,579
Let's make a quick little
change to our JSON file just so

2346
02:35:07,579 --> 02:35:11,180
that we can prove that we
are now pulling data from there.

2347
02:35:11,180 --> 02:35:14,713
Let's just add an exclamation
point to learn angular, and

2348
02:35:14,713 --> 02:35:16,930
we will go back to the browser.

2349
02:35:16,930 --> 02:35:20,650
Let's refresh because it needs
to load that data again.

2350
02:35:20,650 --> 02:35:21,990
But there we go.

2351
02:35:21,990 --> 02:35:27,130
We now have that exclamation point
at the end of that learn angular.

2352
02:35:27,130 --> 02:35:31,992
So we are successfully retrieving
that information from the JSON file,

2353
02:35:31,992 --> 02:35:34,940
it's being parsed into Wishitem objects so

2354
02:35:34,940 --> 02:35:39,140
that we can display them here
inside of our application.

2355
02:35:39,140 --> 02:35:41,540
We can filter them however we need to.

2356
02:35:41,540 --> 02:35:44,845
And of course, we can change their status,
and of course,

2357
02:35:44,845 --> 02:35:49,920
deleting them works as well because we
haven't changed any of that functionality.

2358
02:35:49,920 --> 02:35:54,250
So making basic http
requests is very simple.

2359
02:35:54,250 --> 02:35:58,331
In the next lesson we will look
at some of the options available,

2360
02:35:58,331 --> 02:36:03,017
such as setting headers,
specifying URL parameters, and eventually,

2361
02:36:03,017 --> 02:36:06,100
we will also talk about handling errors.

2362
02:36:06,100 --> 02:36:10,972
When it comes to HTTP requests,
we very rarely just issue a simple get

2363
02:36:10,972 --> 02:36:14,430
request like we did in
the previous lesson.

2364
02:36:14,430 --> 02:36:18,091
Instead, we usually have to
supply some options involved,

2365
02:36:18,091 --> 02:36:21,580
such as special headers or
an authorization token.

2366
02:36:21,580 --> 02:36:26,690
Of course, it varies depending upon our
server application and what it needs.

2367
02:36:26,690 --> 02:36:30,680
But a lot of the time, we are supplying
some other information here.

2368
02:36:30,680 --> 02:36:34,308
So because we don't have
an actual server-side application,

2369
02:36:34,308 --> 02:36:38,754
everything that we are going to be dealing
with is a get request in this lesson.

2370
02:36:38,754 --> 02:36:39,854
But of course,

2371
02:36:39,854 --> 02:36:45,170
the things we talked about can be
applied to any of the request types.

2372
02:36:45,170 --> 02:36:49,286
In fact,
the only real difference between a get and

2373
02:36:49,286 --> 02:36:54,266
a post request programmatically
using the Http client is that

2374
02:36:54,266 --> 02:36:58,070
you provide the body as
the second argument.

2375
02:36:58,070 --> 02:36:59,963
So the first argument is the URL,

2376
02:36:59,963 --> 02:37:04,557
the second is the body that you want to
send with that request, and then finally,

2377
02:37:04,557 --> 02:37:08,410
the third are the options that you may or
may not want to provide, and

2378
02:37:08,410 --> 02:37:12,720
it's the options that we are going
to be talking about in this lesson.

2379
02:37:12,720 --> 02:37:17,823
So, when it comes to my own applications,
I typically have a method that will

2380
02:37:17,823 --> 02:37:23,030
generate just the standard options
that I would need for every request.

2381
02:37:23,030 --> 02:37:24,110
So, let's do this.

2382
02:37:24,110 --> 02:37:28,780
I'm gonna make it private, and
I'm gonna call it GetStandardOptions.

2383
02:37:28,780 --> 02:37:33,560
And this just needs to return an object.

2384
02:37:33,560 --> 02:37:38,218
This object is, of course, going to have
several different options that may or

2385
02:37:38,218 --> 02:37:41,610
may not be needed for
the request to be successful.

2386
02:37:41,610 --> 02:37:44,930
One of those things is
typically the headers.

2387
02:37:44,930 --> 02:37:50,330
If we don't have the correct headers,
sometimes our request is going to fail.

2388
02:37:50,330 --> 02:37:55,710
It all depends upon how the server is
going to Process that incoming request.

2389
02:37:55,710 --> 02:37:59,169
So we have a class called HTTP headers,
and

2390
02:37:59,169 --> 02:38:04,080
if we are going to use that,
we of course need to import that.

2391
02:38:04,080 --> 02:38:09,945
So Visual Studio code is prompting us
here to update the import statement,

2392
02:38:09,945 --> 02:38:13,930
this is imported from Angular common HTTP.

2393
02:38:13,930 --> 02:38:18,699
And this constructor simply accepts
an object where the property names

2394
02:38:18,699 --> 02:38:23,990
are the names of the headers and
their values are, of course, the values.

2395
02:38:23,990 --> 02:38:28,867
So if we wanna set the content type for
this particular request,

2396
02:38:28,867 --> 02:38:34,286
we could do so application/jsom or
if we had some kind of authorization

2397
02:38:34,286 --> 02:38:39,400
token that we needed to provide,
we could also do that as well.

2398
02:38:39,400 --> 02:38:42,539
But we don't in this particular case, so

2399
02:38:42,539 --> 02:38:46,934
we will leave that alone so
that whenever I make a request so

2400
02:38:46,934 --> 02:38:53,140
what I will do is get those options by
calling that method, getStandardOptions.

2401
02:38:53,140 --> 02:38:55,083
And then for our get request,

2402
02:38:55,083 --> 02:38:59,610
all we have to do is supply these
options as the second argument.

2403
02:38:59,610 --> 02:39:05,340
Well, let's go ahead and
let's add a fake method for adding a wish.

2404
02:39:05,340 --> 02:39:10,840
So we'll call it AddWish to where
we will accept the wish object.

2405
02:39:10,840 --> 02:39:15,430
This will be a wish item
which we need to import.

2406
02:39:15,430 --> 02:39:19,530
But this is where we would
typically use a post request.

2407
02:39:19,530 --> 02:39:21,520
So let's take this code out.

2408
02:39:21,520 --> 02:39:23,010
Let's paste it in here.

2409
02:39:23,010 --> 02:39:28,330
And in this particular case, we would
definitely need that authorization header.

2410
02:39:28,330 --> 02:39:33,149
So what we could do is go ahead and
get our standard options.

2411
02:39:33,149 --> 02:39:37,331
We could say that retrieving
the wishes doesn't require

2412
02:39:37,331 --> 02:39:41,947
the authorization header but
adding a wish does because well,

2413
02:39:41,947 --> 02:39:47,433
we are changing data on the server so
it only makes sense that yes of course,

2414
02:39:47,433 --> 02:39:51,027
we definitely want some
kind of authorization.

2415
02:39:51,027 --> 02:39:58,094
So in this case, what we could do Is use
our headers object, it has a set method.

2416
02:39:58,094 --> 02:40:02,770
Now one thing about the headers object,
it is primarily immutable.

2417
02:40:02,770 --> 02:40:05,255
So if we want to add a new header,

2418
02:40:05,255 --> 02:40:09,440
we essentially have to
replace the old headers.

2419
02:40:09,440 --> 02:40:14,482
So by calling this set method,
we are essentially creating a copy

2420
02:40:14,482 --> 02:40:19,340
of our headers and then adding
a new one called Authorization,

2421
02:40:19,340 --> 02:40:23,870
and then whatever value is needed for
authorization.

2422
02:40:23,870 --> 02:40:29,101
So that updates our headers,
which of course updates our options,

2423
02:40:29,101 --> 02:40:32,965
that we can pass on to
the post method in this case.

2424
02:40:32,965 --> 02:40:35,915
So, let's get rid of these syntax errors,

2425
02:40:35,915 --> 02:40:39,655
even though that request
will definitely not work.

2426
02:40:39,655 --> 02:40:42,220
In fact, let's do this,
let's make it private so,

2427
02:40:42,220 --> 02:40:45,320
that we can't call this method
from outside of the class.

2428
02:40:45,320 --> 02:40:49,802
Now another common option that we
would use are URL parameters and

2429
02:40:49,802 --> 02:40:53,110
this is especially true for GET requests.

2430
02:40:53,110 --> 02:40:57,331
So for example if we weren't
actually fetching a JSON file,

2431
02:40:57,331 --> 02:41:00,310
we were hitting some
kind of Web service but

2432
02:41:00,310 --> 02:41:04,552
we were able to specify the format
that we wanted the data in.

2433
02:41:04,552 --> 02:41:10,785
We could have a format URL parameter and
then we could set that to JSON or

2434
02:41:10,785 --> 02:41:15,656
for whatever reason, XML or
any other type of format.

2435
02:41:15,656 --> 02:41:21,329
We could easily do that by
just adding that to the URL or

2436
02:41:21,329 --> 02:41:25,743
we could modify our options because it has

2437
02:41:25,743 --> 02:41:30,800
a params object and
this is of type HttpParams.

2438
02:41:30,800 --> 02:41:34,648
And just like the HTTP
headers that we used,

2439
02:41:34,648 --> 02:41:39,400
this is imported from
the Angular common HTTP.

2440
02:41:39,400 --> 02:41:44,416
Now whenever you new up this constructor,
you can pass in an object that

2441
02:41:44,416 --> 02:41:49,696
has various options, probably the most
used would be called fromObject.

2442
02:41:49,696 --> 02:41:56,309
So basically, this fromObject says that
we want to create our URL parameters

2443
02:41:56,309 --> 02:42:02,920
from this object where the property
names are the URL parameter names.

2444
02:42:02,920 --> 02:42:06,022
And then their values are of course,
their values.

2445
02:42:06,022 --> 02:42:10,540
So by setting this
HttpParams using fromObject,

2446
02:42:10,540 --> 02:42:15,497
I want a parameter called format and
its value as JSON.

2447
02:42:15,497 --> 02:42:20,550
So that is essentially going to
send a request using this URL,

2448
02:42:20,550 --> 02:42:26,100
except that we don't have to specify
the query portion of that URL.

2449
02:42:26,100 --> 02:42:31,450
It will automatically be generated for
us, thanks to this params option.

2450
02:42:31,450 --> 02:42:34,730
So we can save that,
we can actually see this in action.

2451
02:42:34,730 --> 02:42:38,150
We can go back to the browser,
let's pull up the Developer Console.

2452
02:42:38,150 --> 02:42:43,550
And let's go to the Network tab, and
we will probably need to refresh here.

2453
02:42:43,550 --> 02:42:47,090
Now there's going to be several requests,
but

2454
02:42:47,090 --> 02:42:50,610
what we want is this
right here wishes.json.

2455
02:42:50,610 --> 02:42:54,940
We can see that the URL
includes the query portion.

2456
02:42:54,940 --> 02:43:00,360
We have a query parameter called
format and its value is JSON.

2457
02:43:00,360 --> 02:43:04,308
And just to prove that that is
coming from this options object,

2458
02:43:04,308 --> 02:43:06,190
let's change it to XML.

2459
02:43:06,190 --> 02:43:10,295
So that once again,
when that request is issued,

2460
02:43:10,295 --> 02:43:13,440
we can see right here, format = xml.

2461
02:43:13,440 --> 02:43:17,116
Now probably the most
important thing when it

2462
02:43:17,116 --> 02:43:21,283
comes to making HTTP
requests is handling errors.

2463
02:43:21,283 --> 02:43:26,141
And the way that we handle errors using
the HTPP client in Angular is a little bit

2464
02:43:26,141 --> 02:43:30,790
different than other clients, and
we will look at that in the next lesson.

2465
02:43:30,790 --> 02:43:35,600
Handling errors is an important part
of software development because

2466
02:43:35,600 --> 02:43:37,071
errors will happen.

2467
02:43:37,071 --> 02:43:38,256
Things will go wrong.

2468
02:43:38,256 --> 02:43:40,652
It might be our fault,
it might not be our fault.

2469
02:43:40,652 --> 02:43:43,144
It can just be something that happens.

2470
02:43:43,144 --> 02:43:46,949
This is especially true with HTTP
requests because there are so

2471
02:43:46,949 --> 02:43:48,830
many things that can go wrong.

2472
02:43:48,830 --> 02:43:49,990
It could be a client issue.

2473
02:43:49,990 --> 02:43:51,310
It could be a network issue.

2474
02:43:51,310 --> 02:43:52,840
It could be a server issue.

2475
02:43:52,840 --> 02:43:57,670
So when it comes to handling errors, we
should at least provide some information

2476
02:43:57,670 --> 02:44:01,589
to the user that, hey,
whatever you tried to do it didn't work.

2477
02:44:01,589 --> 02:44:02,802
And here's why.

2478
02:44:02,802 --> 02:44:04,702
And really in the best cases,

2479
02:44:04,702 --> 02:44:09,490
we can sweep it under the rug if we
don't have to tell the user anything.

2480
02:44:09,490 --> 02:44:10,594
But in most cases,

2481
02:44:10,594 --> 02:44:14,980
we want to provide the user with at
least a little bit of information.

2482
02:44:14,980 --> 02:44:18,294
Now, the first thing
that we can do is provide

2483
02:44:18,294 --> 02:44:22,680
a second callback function
to the subscribe method.

2484
02:44:22,680 --> 02:44:25,230
So here,
we are inside of the app components.

2485
02:44:25,230 --> 02:44:29,800
We're using our wishService to get our
wishes and then we're calling subscribe.

2486
02:44:29,800 --> 02:44:34,343
Now, the first callback function is
handling the response on a successful

2487
02:44:34,343 --> 02:44:36,780
request, and we have seen that work.

2488
02:44:36,780 --> 02:44:38,380
We know what it does.

2489
02:44:38,380 --> 02:44:44,610
However, if there is something that goes
wrong, we need to handle that error.

2490
02:44:44,610 --> 02:44:47,950
And we can do that by
providing a second argument.

2491
02:44:47,950 --> 02:44:53,190
It is another callback function
that receives the error object.

2492
02:44:53,190 --> 02:44:55,340
And then we can do whatever
it is that we need to do.

2493
02:44:55,340 --> 02:44:58,880
We can tell the user
that an error occurred.

2494
02:44:58,880 --> 02:45:03,190
And this has a message property
that we could provide them.

2495
02:45:03,190 --> 02:45:07,920
So let's do that,
let's alert(error.message).

2496
02:45:07,920 --> 02:45:10,660
And as it is right now
we don't have an error.

2497
02:45:10,660 --> 02:45:14,618
So let's go to our wish service and
let's make a request for

2498
02:45:14,618 --> 02:45:16,610
a file that does not exist.

2499
02:45:16,610 --> 02:45:22,460
So let's just change the name of the file
from wishes.json to wishes1.json.

2500
02:45:22,460 --> 02:45:26,745
And whenever we save this,
let's go to the browser,

2501
02:45:26,745 --> 02:45:30,410
we will see the result
of that HTTP request.

2502
02:45:30,410 --> 02:45:35,830
There is an HTTP failure response for
the URL 404 not found.

2503
02:45:35,830 --> 02:45:39,100
Now, for technical people,
I think that that's perfectly fine.

2504
02:45:39,100 --> 02:45:43,500
If I were to get that error message,
I would know what the problem is.

2505
02:45:43,500 --> 02:45:47,797
However, the vast majority of people
in the world are not technical, so

2506
02:45:47,797 --> 02:45:51,720
we need to provide a message
that means something to them.

2507
02:45:51,720 --> 02:45:54,660
Now, I am noticing some other errors.

2508
02:45:54,660 --> 02:45:58,360
Cannot read properties of undefined,
reading filter.

2509
02:45:58,360 --> 02:46:01,310
We could fix that very easily.

2510
02:46:01,310 --> 02:46:03,586
Let's go to our app component.

2511
02:46:03,586 --> 02:46:06,906
I want to minimize as
many errors as we get so

2512
02:46:06,906 --> 02:46:10,320
that we don't clutter up the console.

2513
02:46:10,320 --> 02:46:15,525
So what I'm going to do is simply define
items as an empty string to begin with and

2514
02:46:15,525 --> 02:46:18,440
that should fix that particular error.

2515
02:46:18,440 --> 02:46:20,387
At the very basic level,

2516
02:46:20,387 --> 02:46:26,160
all we need to do is provide a second
argument to the subscribe method.

2517
02:46:26,160 --> 02:46:30,699
This argument is a callback
function that works with an error

2518
02:46:30,699 --> 02:46:33,160
object when an error occurs.

2519
02:46:33,160 --> 02:46:35,854
But of course, we as developers want and

2520
02:46:35,854 --> 02:46:39,400
really need more information
when an error occurs.

2521
02:46:39,400 --> 02:46:42,153
So a lot of times,
we would log that error and

2522
02:46:42,153 --> 02:46:45,733
we would try to provide as
much information as possible.

2523
02:46:45,733 --> 02:46:48,770
So let's go to our wish service.

2524
02:46:48,770 --> 02:46:51,468
And the first thing that we are going to

2525
02:46:51,468 --> 02:46:54,960
do is Import an operator
called catchError.

2526
02:46:54,960 --> 02:46:59,169
Now this is called an operator because
well, you'll see how we will use it.

2527
02:46:59,169 --> 02:47:03,982
This is coming from
the Reactive JavaScript library,

2528
02:47:03,982 --> 02:47:06,830
so it's rxjs/operators.

2529
02:47:06,830 --> 02:47:11,818
And we are going to use this catchError
in order to essentially catch the error

2530
02:47:11,818 --> 02:47:13,250
as it occurs.

2531
02:47:13,250 --> 02:47:17,114
Then we can inspect that error,
try to find out what went wrong, so

2532
02:47:17,114 --> 02:47:20,950
that we can log the appropriate
message into our system.

2533
02:47:20,950 --> 02:47:25,067
And then we can also provide the user
with something that's meaningful for

2534
02:47:25,067 --> 02:47:26,330
them as well.

2535
02:47:26,330 --> 02:47:31,419
And the way that we do that
is by essentially piping in

2536
02:47:31,419 --> 02:47:37,280
a process to our request that
is going to handle the error.

2537
02:47:37,280 --> 02:47:39,400
But that's not really
what we need to do here.

2538
02:47:39,400 --> 02:47:41,381
We need to pipe in catchError,

2539
02:47:41,381 --> 02:47:45,590
and then we specify something
that is going to handle that.

2540
02:47:45,590 --> 02:47:47,939
So, I am inside of the getWishes method.

2541
02:47:47,939 --> 02:47:52,400
We are making our request,
and then we are calling pipe.

2542
02:47:52,400 --> 02:47:55,956
We are piping in a process
that will process, And

2543
02:47:55,956 --> 02:48:00,380
error in case if that occurs and
we're going to write a method

2544
02:48:00,380 --> 02:48:05,348
called handleError that is going
to handle and process that error.

2545
02:48:05,348 --> 02:48:08,917
So let's do that,
we can make it private and

2546
02:48:08,917 --> 02:48:12,782
this method is going to
accept an error object.

2547
02:48:12,782 --> 02:48:17,519
And this is an httpErrorResponse.

2548
02:48:17,519 --> 02:48:20,494
This classes from
the angular common HTTP and

2549
02:48:20,494 --> 02:48:25,200
Visual Studio code automatically
added that import statement for me.

2550
02:48:25,200 --> 02:48:30,338
If not, then you would need to do
that where you import httpClient and

2551
02:48:30,338 --> 02:48:32,200
headers and params.

2552
02:48:32,200 --> 02:48:37,760
So we want to know what's happened
with this particular request.

2553
02:48:37,760 --> 02:48:41,261
So the first thing that we
can do is check the status.

2554
02:48:41,261 --> 02:48:45,789
And if the status is equal to 0,
then it's not a server error,

2555
02:48:45,789 --> 02:48:48,430
it is a client or a network error.

2556
02:48:48,430 --> 02:48:52,805
So we can write something to the console
or if we had a logging service,

2557
02:48:52,805 --> 02:48:55,194
this is where we would want to do that.

2558
02:48:55,194 --> 02:49:00,757
To where we can say that,
there is an issue with the client or

2559
02:49:00,757 --> 02:49:06,375
network and then we could
supply the error information.

2560
02:49:06,375 --> 02:49:10,724
Now again, this would be for our purposes,
this isn't necessarily for the user.

2561
02:49:10,724 --> 02:49:15,385
But then we can add an else,
because if the status is not 0,

2562
02:49:15,385 --> 02:49:21,556
then it is an HTTP response status,
we are getting something from the server.

2563
02:49:21,556 --> 02:49:28,086
So, in which case, we would want to
signify that we have a Server-side error,

2564
02:49:28,086 --> 02:49:33,552
and then we would want to be able
to inspect that particular error.

2565
02:49:33,552 --> 02:49:37,611
And let me go back and
change the code for the client or network.

2566
02:49:37,611 --> 02:49:41,288
I don't want to output a string,
well, I do, but

2567
02:49:41,288 --> 02:49:47,080
I also want to output the error as well,
so we need to do that correctly.

2568
02:49:47,080 --> 02:49:51,995
And so we will have an error message and
it will display information

2569
02:49:51,995 --> 02:49:56,558
about the error that occurred,
but then we also want to supply

2570
02:49:56,558 --> 02:50:01,685
the user a readable message,
something that is meaningful to them.

2571
02:50:01,685 --> 02:50:06,663
So, we can return an error and
really, what we are doing,

2572
02:50:06,663 --> 02:50:10,024
we are essentially throwing an error.

2573
02:50:10,024 --> 02:50:11,981
But by calling throwError,

2574
02:50:11,981 --> 02:50:16,883
this essentially gives us an observable
that wraps around that error.

2575
02:50:16,883 --> 02:50:20,333
And we simply want to create a new error,
and

2576
02:50:20,333 --> 02:50:23,978
then we'll have our message, cannot fetch.

2577
02:50:23,978 --> 02:50:29,436
Or let's do this, retrieve wishes
from the server please try again.

2578
02:50:29,436 --> 02:50:34,271
And so now, if we save this,
let's take a look at the browser,

2579
02:50:34,271 --> 02:50:36,752
we are going to see some errors.

2580
02:50:36,752 --> 02:50:41,299
First we see this failure to get,
now this is coming from the browser,

2581
02:50:41,299 --> 02:50:44,397
this isn't necessarily
coming from our code.

2582
02:50:44,397 --> 02:50:49,012
Whenever the browser attempts to
retrieve a resource, if that's a 404,

2583
02:50:49,012 --> 02:50:50,865
it logs it within the console.

2584
02:50:50,865 --> 02:50:53,287
So we can ignore this error here,

2585
02:50:53,287 --> 02:50:57,624
because that is not from our code but
this one certainly is.

2586
02:50:57,624 --> 02:51:02,698
Server-side error and
then it gives us the markup for

2587
02:51:02,698 --> 02:51:07,667
that error,
cannot get assets/wishes1.json.

2588
02:51:07,667 --> 02:51:11,293
Then if we take a look at the alert box,
what the user sees,

2589
02:51:11,293 --> 02:51:15,070
cannot retrieve wishes from the server,
please try again.

2590
02:51:15,070 --> 02:51:19,698
So for the most part, handling
errors is pretty straightforward and

2591
02:51:19,698 --> 02:51:24,405
it can be as simple as simply providing
a second callback function when

2592
02:51:24,405 --> 02:51:26,581
you call the subscribe method.

2593
02:51:26,581 --> 02:51:31,460
However, I would imagine for most
applications, you would want to at least

2594
02:51:31,460 --> 02:51:35,881
process that error so that you can log
it or provide it in the console so

2595
02:51:35,881 --> 02:51:39,482
that you can inspect that error and
see what went wrong.

2596
02:51:39,482 --> 02:51:43,210
And most of all, you can provide
a meaningful message to the user.

2597
02:51:43,210 --> 02:51:46,625
So far in this course,
we've very briefly talked about modules.

2598
02:51:46,625 --> 02:51:49,136
And when it comes to
building applications,

2599
02:51:49,136 --> 02:51:53,760
modules are one of those things that,
well, we don't necessarily need them, but

2600
02:51:53,760 --> 02:51:56,947
they are extremely useful for
very large applications.

2601
02:51:56,947 --> 02:52:01,952
Because it allows us to
essentially create a container for

2602
02:52:01,952 --> 02:52:07,770
like minded or closely related
components and functionality.

2603
02:52:07,770 --> 02:52:13,164
For example, so far in this application,
we've been focusing on the wish list and

2604
02:52:13,164 --> 02:52:17,262
displaying the wishes,
manipulating them, and all of that.

2605
02:52:17,262 --> 02:52:20,489
If we were going to build
more functionality for

2606
02:52:20,489 --> 02:52:26,139
this application that doesn't necessarily
work with wishes like a contact form,

2607
02:52:26,139 --> 02:52:30,977
well, then it would make sense for
us to first of all create a module that

2608
02:52:30,977 --> 02:52:34,876
serves as a container for
all of the wish oriented stuff.

2609
02:52:34,876 --> 02:52:39,255
So All of the components,
all of the services, everything that

2610
02:52:39,255 --> 02:52:44,201
we have done as far as working with
wishes would be inside of a module, and

2611
02:52:44,201 --> 02:52:49,290
then we could create another module for
all of the contact form stuff.

2612
02:52:49,290 --> 02:52:54,169
So guess what we are going to do in this
lesson, we are going to create a module.

2613
02:52:54,169 --> 02:52:59,926
And we can do that from the command
line using ng generate module,

2614
02:52:59,926 --> 02:53:04,333
and then we simply specify
the name of the module.

2615
02:53:04,333 --> 02:53:08,787
Now this is going to be a little bit
difficult because I've use the term

2616
02:53:08,787 --> 02:53:10,911
wishList in a variety of places.

2617
02:53:10,911 --> 02:53:13,403
So let's just call this the wishModule.

2618
02:53:13,403 --> 02:53:20,281
And this is going to create a directory
inside of our app directory called Wish.

2619
02:53:20,281 --> 02:53:23,315
And by default,
it's just going to give us one file, and

2620
02:53:23,315 --> 02:53:25,221
it's going to be that module file.

2621
02:53:25,221 --> 02:53:29,747
You can see right here, it tells us
what exactly it created this file.

2622
02:53:29,747 --> 02:53:33,083
And it did so
inside of a directory called Wish.

2623
02:53:33,083 --> 02:53:37,607
So now we have this wish directory,
and really we want to put

2624
02:53:37,607 --> 02:53:42,602
everything that we have worked on
thus far inside of this folder.

2625
02:53:42,602 --> 02:53:45,961
Now, of course that has nothing
to do with the AppComponent, but

2626
02:53:45,961 --> 02:53:47,378
everything Wish related.

2627
02:53:47,378 --> 02:53:51,972
So, the WishFilter,
the list, the WishListItem,

2628
02:53:51,972 --> 02:53:56,169
AddWishForm, even
the stuff inside of shared.

2629
02:53:56,169 --> 02:54:00,010
And putting it inside of
the shared folder is questionable,

2630
02:54:00,010 --> 02:54:04,467
because really this stuff should have
been inside of a module as well.

2631
02:54:04,467 --> 02:54:08,293
So let's see what happens,
let's just start dragging and

2632
02:54:08,293 --> 02:54:11,135
dropping things into this Wish directory.

2633
02:54:11,135 --> 02:54:15,821
Now Visual Studio code is going to
try to fix some of these paths.

2634
02:54:15,821 --> 02:54:19,279
So we'll see what happens
whenever I click on Move.

2635
02:54:19,279 --> 02:54:23,737
If I'm prompted with anything,
well, it doesn't look like it, but

2636
02:54:23,737 --> 02:54:28,197
definitely we can see that there is
a compilation error because some of

2637
02:54:28,197 --> 02:54:31,165
the paths cannot be found,
but that's okay.

2638
02:54:31,165 --> 02:54:35,763
Let's just go ahead and
grab the wish-filter, wish-list, and

2639
02:54:35,763 --> 02:54:37,825
wish-list-item folders.

2640
02:54:37,825 --> 02:54:41,376
Let's drag those into
the wish directory as well.

2641
02:54:41,376 --> 02:54:43,336
Yes, we want to move those.

2642
02:54:43,336 --> 02:54:49,008
Now of course, we are going to need to
modify not just the app module, because,

2643
02:54:49,008 --> 02:54:54,091
remember, this is where we had specified
that we had some components to

2644
02:54:54,091 --> 02:54:59,539
work with such as WishListComponent,
AddWishFormComponent, and so on.

2645
02:54:59,539 --> 02:55:04,192
And so essentially what we want to do is
take these import statements where we

2646
02:55:04,192 --> 02:55:06,311
are importing those components.

2647
02:55:06,311 --> 02:55:11,053
We'll cut them out, and we will put
them inside of this new Wish module.

2648
02:55:11,053 --> 02:55:15,722
And we will want to add them
to the declarations, so

2649
02:55:15,722 --> 02:55:19,423
we can also cut those declarations out.

2650
02:55:19,423 --> 02:55:25,549
So that's inside of the app module, all
we will really have is the AppComponent.

2651
02:55:25,549 --> 02:55:28,621
And we won't necessarily
need the FormsModule or

2652
02:55:28,621 --> 02:55:33,303
the httpClient module because those
things are being used by the components

2653
02:55:33,303 --> 02:55:35,880
inside of our newly created Wish module.

2654
02:55:35,880 --> 02:55:38,610
So let's also bring those in.

2655
02:55:38,610 --> 02:55:43,740
Now, I'm noticing that there were some
changes to the pas of those files.

2656
02:55:43,740 --> 02:55:47,959
Here we can see that WishListComponent
was still set to WishList,

2657
02:55:47,959 --> 02:55:50,005
so there's not an issue there.

2658
02:55:50,005 --> 02:55:56,135
But if we look at AddWishFormComponent and
the filter It added the wish there.

2659
02:55:56,135 --> 02:56:00,502
So that's interesting that
Visual Studio Code modified the paths for

2660
02:56:00,502 --> 02:56:05,324
some of these and didn't for the others,
but that's an easy enough change.

2661
02:56:05,324 --> 02:56:11,010
Now, let's also grab those other import
statements for the HttpClientModule.

2662
02:56:11,010 --> 02:56:16,770
And the FormsModule because we need
those inside of our WishModule.

2663
02:56:16,770 --> 02:56:20,480
So let's just cut those out,
paste them in.

2664
02:56:20,480 --> 02:56:23,532
We also want to import those.

2665
02:56:23,532 --> 02:56:28,410
So once again, we will cut them
out of the imports in AppModule.

2666
02:56:28,410 --> 02:56:33,370
We will paste them inside of
the imports for the WishModule.

2667
02:56:33,370 --> 02:56:39,310
Now we are still seeing some errors in
our output, well, I need to scroll down.

2668
02:56:39,310 --> 02:56:41,810
But yes, we still see some errors.

2669
02:56:41,810 --> 02:56:44,210
And that is inside of the AppComponent.

2670
02:56:44,210 --> 02:56:46,840
Now, this makes total sense.

2671
02:56:46,840 --> 02:56:49,698
Because we've just lifted out
all of those components and

2672
02:56:49,698 --> 02:56:51,220
put them inside of the module.

2673
02:56:51,220 --> 02:56:56,830
So as it is right now, our application
has really no idea where those are.

2674
02:56:56,830 --> 02:57:02,302
So what we need to do inside of our
wish module is it's not good enough

2675
02:57:02,302 --> 02:57:08,780
to just import these and declare them
here, but we also need to export them.

2676
02:57:08,780 --> 02:57:11,930
So there's an option called exports.

2677
02:57:11,930 --> 02:57:17,239
It's an array and we want to export
each one of these components so

2678
02:57:17,239 --> 02:57:22,452
that whenever we set up our
application to use this WishModule,

2679
02:57:22,452 --> 02:57:24,880
which we probably should do.

2680
02:57:24,880 --> 02:57:26,400
Let's go ahead and do that.

2681
02:57:26,400 --> 02:57:30,228
Everything that can be exported
from the WishModule is going

2682
02:57:30,228 --> 02:57:33,520
to be available to use
within our application.

2683
02:57:33,520 --> 02:57:38,233
So here inside of the AppModule,
we've cleaned this up quite a bit, but

2684
02:57:38,233 --> 02:57:40,642
we do want to import the WishModule.

2685
02:57:40,642 --> 02:57:42,830
So let's go ahead and do that.

2686
02:57:42,830 --> 02:57:46,534
We will add that to the imports array.

2687
02:57:46,534 --> 02:57:48,205
Let's save everything and

2688
02:57:48,205 --> 02:57:51,700
let's see what we get as far
as the output in the console.

2689
02:57:51,700 --> 02:57:52,590
Console.

2690
02:57:52,590 --> 02:57:56,630
Looks like there's an error inside
of the wish-list-item component.

2691
02:57:56,630 --> 02:57:58,680
So let's open that up.

2692
02:57:58,680 --> 02:58:02,326
And I can't imagine what
we are missing here.

2693
02:58:02,326 --> 02:58:04,770
Right here, the EventService.

2694
02:58:04,770 --> 02:58:10,130
Now our EventService is something that
should be shared across our application.

2695
02:58:10,130 --> 02:58:12,640
So we have a couple of
different options here.

2696
02:58:12,640 --> 02:58:16,554
We could break this out
into a shared module or

2697
02:58:16,554 --> 02:58:22,331
we can leave it as it is and I think for
right now we will opt for that.

2698
02:58:22,331 --> 02:58:26,280
Let's get one module working first and
then we'll go from there.

2699
02:58:26,280 --> 02:58:30,810
All right, so I don't see any red
in the file explorer over here.

2700
02:58:30,810 --> 02:58:37,101
But we do still have an error inside
of our, let's see that is AppModule.

2701
02:58:37,101 --> 02:58:39,839
So let's take a look at that file.

2702
02:58:39,839 --> 02:58:41,158
Well, there's WishModule.

2703
02:58:41,158 --> 02:58:42,871
Let's take a look at the WishModule.

2704
02:58:42,871 --> 02:58:44,192
Let's see what we have.

2705
02:58:44,192 --> 02:58:47,010
I don't see any errors.

2706
02:58:47,010 --> 02:58:50,810
So it could be that we need
to stop our application.

2707
02:58:50,810 --> 02:58:53,024
We'll run ng serve once again,

2708
02:58:53,024 --> 02:58:57,617
because sometimes we just have to
stop the process, restart it and

2709
02:58:57,617 --> 02:59:01,900
then see if it will build or
if there will still be an error.

2710
02:59:01,900 --> 02:59:04,130
And here we can see that
it compiled successfully.

2711
02:59:04,130 --> 02:59:06,850
So it looks like that was just an issue.

2712
02:59:06,850 --> 02:59:08,966
Cannot retrieve, yes,

2713
02:59:08,966 --> 02:59:14,360
because we are attempting to
retrieve a file that doesn't exist.

2714
02:59:14,360 --> 02:59:16,330
So let's go to our WishService.

2715
02:59:16,330 --> 02:59:20,380
Let's change the URL to wishes.json.

2716
02:59:20,380 --> 02:59:23,680
Let's go back and let's see if it loads.

2717
02:59:23,680 --> 02:59:24,590
It does.

2718
02:59:24,590 --> 02:59:28,720
So looks like everything's
working if we add a wish.

2719
02:59:28,720 --> 02:59:32,630
Okay, so
our application looks all well and good.

2720
02:59:32,630 --> 02:59:36,680
Now I do think that
the WishService should probably

2721
02:59:36,680 --> 02:59:39,940
be inside of our WishModule as well.

2722
02:59:39,940 --> 02:59:42,250
So we have working code, let's break it.

2723
02:59:42,250 --> 02:59:47,375
Let's move that WishService and
we do need to change the paths.

2724
02:59:47,375 --> 02:59:52,025
But Visual Studio Code is prompting me,
update the imports.

2725
02:59:52,025 --> 02:59:57,845
Yes, let's update the imports and
that should make that work just fine.

2726
02:59:57,845 --> 03:00:01,475
However, once again,
it's saying that we have an issue.

2727
03:00:01,475 --> 03:00:05,287
So let's take a look at the browser
because that's going to give us a better

2728
03:00:05,287 --> 03:00:07,415
understanding of where we have an error.

2729
03:00:07,415 --> 03:00:11,073
And it looks like right here,
cannot find module wish service or

2730
03:00:11,073 --> 03:00:15,510
its corresponding type declarations
that is inside of AppComponent.

2731
03:00:15,510 --> 03:00:17,715
So let's go to AppComponent, and

2732
03:00:17,715 --> 03:00:22,720
let's see what we have there as far
as that WishService is concerned.

2733
03:00:22,720 --> 03:00:24,690
That is being injected.

2734
03:00:24,690 --> 03:00:26,780
And the path is correct.

2735
03:00:26,780 --> 03:00:28,810
So let's do this.

2736
03:00:28,810 --> 03:00:31,000
Let's copy that import.

2737
03:00:31,000 --> 03:00:34,690
Let's go to our WishModule and
let's paste this in.

2738
03:00:34,690 --> 03:00:37,480
We, of course, will need to modify this,

2739
03:00:37,480 --> 03:00:41,010
because this is directly
inside of this directory.

2740
03:00:41,010 --> 03:00:45,120
And then we will export this module.

2741
03:00:45,120 --> 03:00:49,010
But just saving the file
again makes that compile.

2742
03:00:49,010 --> 03:00:51,640
So it's crazy how this works sometimes.

2743
03:00:51,640 --> 03:00:56,050
All right, so it looks like everything
is once again working as it did before.

2744
03:00:56,050 --> 03:01:00,640
In the next lesson we are going to create
another component, one for our WishModule.

2745
03:01:00,640 --> 03:01:05,180
And in fact it's going to serve
as the wish list application.

2746
03:01:05,180 --> 03:01:08,934
So we will essentially
move all of the code from

2747
03:01:08,934 --> 03:01:13,620
our AppComponent into that
new WishAppComponent.

2748
03:01:13,620 --> 03:01:17,706
This will essentially allow us
to drop in our wish application

2749
03:01:17,706 --> 03:01:20,040
anywhere within our project.

2750
03:01:20,040 --> 03:01:24,487
I want to extract just about everything
about our wish list application into

2751
03:01:24,487 --> 03:01:25,538
the WishModule.

2752
03:01:25,538 --> 03:01:30,401
Even going so far as to taking what we
currently have inside of the AppComponent,

2753
03:01:30,401 --> 03:01:35,620
and putting that inside of a new component
called Wish inside of the WishModule.

2754
03:01:35,620 --> 03:01:40,328
That way, all we have to do is drop that
component into the app components so

2755
03:01:40,328 --> 03:01:45,263
that we would essentially have something
like this to where we would have a wish

2756
03:01:45,263 --> 03:01:47,610
app or something along those lines.

2757
03:01:47,610 --> 03:01:51,430
And then voila,
we have our wish list application.

2758
03:01:51,430 --> 03:01:54,620
I'm probably taking this
a little bit too far.

2759
03:01:54,620 --> 03:02:00,300
But my goal here is to transition
into talking more about forms.

2760
03:02:00,300 --> 03:02:05,695
And so I want to keep all of our wish
list stuff intact and all together so

2761
03:02:05,695 --> 03:02:10,280
that if we ever do need to talk
about it again, it's there.

2762
03:02:10,280 --> 03:02:13,440
We just need to drop that component in and
we're good to go.

2763
03:02:13,440 --> 03:02:19,240
So let's go to the command line and
let's generate a new component.

2764
03:02:19,240 --> 03:02:24,024
We'll call it simply wish and we want
to put this inside of the WishModule.

2765
03:02:24,024 --> 03:02:28,779
Now the reason why I'm calling this
component just simply wish is because

2766
03:02:28,779 --> 03:02:33,763
that's following the pattern that we
have as far as the app component because

2767
03:02:33,763 --> 03:02:37,770
we have an app module and
then we also have an app component.

2768
03:02:37,770 --> 03:02:43,330
So in this way, we will have a wish module
and then we will have a wish component.

2769
03:02:43,330 --> 03:02:48,640
And really all we need to do is take
the markup from our app component.

2770
03:02:48,640 --> 03:02:54,140
Let's cut that out, place it inside of
the template for our wish component.

2771
03:02:54,140 --> 03:02:57,727
Now of course,
not everything is going to work because,

2772
03:02:57,727 --> 03:03:00,130
we do need to address the code as well.

2773
03:03:00,130 --> 03:03:03,240
So let's open up the code for
our wish component.

2774
03:03:03,240 --> 03:03:05,068
We'll do the same thing for
the app component.

2775
03:03:05,068 --> 03:03:09,484
And for the most parts,
we want the import statements for

2776
03:03:09,484 --> 03:03:13,815
the WishItem, the EventService and
the WishService.

2777
03:03:13,815 --> 03:03:20,154
Let's cut those out of app and we will
paste those inside of the WishComponent.

2778
03:03:20,154 --> 03:03:26,451
And then we need to do a few more cut and
pastes such as the items property,

2779
03:03:26,451 --> 03:03:31,418
the constructor and ng on init and
we need filter as well.

2780
03:03:31,418 --> 03:03:35,650
Basically everything inside
of the AppComponent class.

2781
03:03:35,650 --> 03:03:40,551
Let's cut that out and let's paste
it inside of our WishComponent.

2782
03:03:40,551 --> 03:03:44,536
Now let's do go ahead and
cut out what was generated for

2783
03:03:44,536 --> 03:03:49,995
our WishComponent because we can paste
that inside of our app component and

2784
03:03:49,995 --> 03:03:53,129
that should make the errors go away there.

2785
03:03:53,129 --> 03:03:57,015
We do however have an error inside
of the WishComponent so let's.

2786
03:03:57,015 --> 03:04:02,864
Take a look, it looks like it's mainly
pathing, so let's modify the paths for

2787
03:04:02,864 --> 03:04:07,427
importing the EventService,
the same for the WishService.

2788
03:04:07,427 --> 03:04:10,037
Let's save that, it should compile now.

2789
03:04:10,037 --> 03:04:13,013
And so let's close those files.

2790
03:04:13,013 --> 03:04:17,133
Let's sum it up the WishModule,
because we want to modify this.

2791
03:04:17,133 --> 03:04:21,667
Because now, whatever is going to
be using this WishModule doesn't

2792
03:04:21,667 --> 03:04:24,951
necessarily care about
the WishListComponent,

2793
03:04:24,951 --> 03:04:28,401
the AddWishFormComponent,
and all of that stuff.

2794
03:04:28,401 --> 03:04:33,975
Instead, all we really need to export
is the WishComponent, because anything

2795
03:04:33,975 --> 03:04:39,816
that is going to use this module is going
to primarily just use this WishComponent.

2796
03:04:39,816 --> 03:04:41,802
So, we can export that.

2797
03:04:41,802 --> 03:04:47,100
And then inside of the AppModule, well, we
don't really need to do anything at all.

2798
03:04:47,100 --> 03:04:50,900
Because in the previous lesson,
we added the import for WishModule.

2799
03:04:50,900 --> 03:04:57,420
So inside of AppComponent, all we really
need to use is that app-wish element.

2800
03:04:57,420 --> 03:04:59,776
Now, I'm going to leave this named as is,

2801
03:04:59,776 --> 03:05:04,270
because I kind of like the idea that
this is an application for the WishList.

2802
03:05:04,270 --> 03:05:08,578
Although I say that out loud, and
now it makes a little more sense for

2803
03:05:08,578 --> 03:05:12,450
us to change that because I
would want app-wish-list.

2804
03:05:12,450 --> 03:05:16,769
But no, let's just leave it as it is cuz
that could be a little bit confusing with

2805
03:05:16,769 --> 03:05:19,425
the WishListComponent
that we currently have.

2806
03:05:19,425 --> 03:05:22,802
And so now that we have extracted that
stuff, let's go to the browser, and

2807
03:05:22,802 --> 03:05:24,691
everything should work as it did before.

2808
03:05:24,691 --> 03:05:30,822
We can see that we are properly
loading the wishes from our JSON file.

2809
03:05:30,822 --> 03:05:34,160
Let's make sure all of
the functionality works so

2810
03:05:34,160 --> 03:05:39,255
that if we fulfill one of these,
the filtered list updates appropriately.

2811
03:05:39,255 --> 03:05:41,969
If we remove an item,
that should remove it.

2812
03:05:41,969 --> 03:05:45,804
And if we add a wish, then,
of course, that is there as well.

2813
03:05:45,804 --> 03:05:46,900
So, fantastic.

2814
03:05:46,900 --> 03:05:50,359
We now have extracted all
of the functionality for

2815
03:05:50,359 --> 03:05:53,994
our wish-list application
into this WishModule.

2816
03:05:53,994 --> 03:05:58,544
So in the next lesson,
we can get started writing another module,

2817
03:05:58,544 --> 03:06:02,381
one for a contact form, so
that we can talk about forms.

2818
03:06:02,381 --> 03:06:03,970
We need to talk about forms.

2819
03:06:03,970 --> 03:06:08,660
Now yes, we have very briefly talked about
forms using the template driven approach.

2820
03:06:08,660 --> 03:06:13,513
If you'll remember whenever we
created the AddWishFormComponent,

2821
03:06:13,513 --> 03:06:16,400
we used the template-driven approach.

2822
03:06:16,400 --> 03:06:19,715
Basically, we used the NgModule directive,

2823
03:06:19,715 --> 03:06:25,070
assigned that to a property on our
components class, and then that created

2824
03:06:25,070 --> 03:06:30,688
a two-way binding between the form field
and the property behind the scenes.

2825
03:06:30,688 --> 03:06:32,990
And it worked rather well.

2826
03:06:32,990 --> 03:06:38,188
And I dare say that the way that we
used it for this very simple form

2827
03:06:38,188 --> 03:06:45,260
is exactly what the template-driven form
approach is for, it is for simple forms.

2828
03:06:45,260 --> 03:06:50,870
And while it works well for simple forms,
we typically don't want to use it for

2829
03:06:50,870 --> 03:06:55,981
larger forms, and especially if our
application is very forms heavy.

2830
03:06:55,981 --> 03:06:58,215
Well, a variety of reasons, for one,

2831
03:06:58,215 --> 03:07:02,296
there is a performance hit with
using the template-driven approach.

2832
03:07:02,296 --> 03:07:06,285
There's a lot of overhead to manage
the things that are going on behind

2833
03:07:06,285 --> 03:07:07,037
the scenes.

2834
03:07:07,037 --> 03:07:10,902
And for now that we can't really be
guaranteed that the data that we

2835
03:07:10,902 --> 03:07:14,574
are working with is actually
the data that we want to work with.

2836
03:07:14,574 --> 03:07:18,874
I know that that sounds weird, but
due to the asynchronous and two,

2837
03:07:18,874 --> 03:07:23,854
a binding nature of using NgModule, the
data that we are working with inside of

2838
03:07:23,854 --> 03:07:28,015
our component might not necessarily
be what we need to work with.

2839
03:07:28,015 --> 03:07:32,801
So instead, we are going to start
looking at the reactive form.

2840
03:07:32,801 --> 03:07:36,534
But I want to do this
inside of another module so

2841
03:07:36,534 --> 03:07:40,455
that we can swap out these
modules as we need to.

2842
03:07:40,455 --> 03:07:42,360
So let's generate a module.

2843
03:07:42,360 --> 03:07:45,992
Let's just call it contact,
and we'll also go ahead and

2844
03:07:45,992 --> 03:07:49,180
create a component inside
of the ContactModule.

2845
03:07:49,180 --> 03:07:50,960
And we can just call it contact.

2846
03:07:50,960 --> 03:07:55,549
The idea is going to be that it is
a contact form, so let's go ahead and

2847
03:07:55,549 --> 03:07:57,382
generate that component.

2848
03:07:57,382 --> 03:08:02,390
We do want to make sure that
it is in the ContactModule.

2849
03:08:02,390 --> 03:08:05,511
And while the CLI is
generating those things,

2850
03:08:05,511 --> 03:08:10,280
let's go to our ContactModule and
let's open up the module file.

2851
03:08:10,280 --> 03:08:15,321
Now, if you'll remember,
whenever we used the NgModule directive,

2852
03:08:15,321 --> 03:08:20,879
we had to include the FormsModule, but
we don't do that with reactive forms.

2853
03:08:20,879 --> 03:08:25,504
Instead, we use the ReactiveRormsModule.

2854
03:08:25,504 --> 03:08:29,892
So we want to import that
into our ContactModule.

2855
03:08:29,892 --> 03:08:33,970
And now that we have that
ContactComponent, let's go ahead and

2856
03:08:33,970 --> 03:08:36,461
let's add that to the exports array and

2857
03:08:36,461 --> 03:08:41,010
then we can close this particular
file whenever we're done with that.

2858
03:08:41,010 --> 03:08:42,188
So let's do that.

2859
03:08:42,188 --> 03:08:48,629
Let's go to the AppComponents
template as well as the AppModule,

2860
03:08:48,629 --> 03:08:54,970
because we do want to be sure that
we import that ContactModule.

2861
03:08:54,970 --> 03:08:57,410
So let's go ahead and do that.

2862
03:08:57,410 --> 03:09:02,610
And that will give us the ability
to use our new ContactComponent.

2863
03:09:02,610 --> 03:09:09,380
So inside of the apps template, let's just
use app-contact and that should fix that.

2864
03:09:09,380 --> 03:09:13,116
So let's look at the browser just to
make sure that we are displaying our

2865
03:09:13,116 --> 03:09:14,436
information and we are.

2866
03:09:14,436 --> 03:09:15,240
So, great.

2867
03:09:15,240 --> 03:09:20,070
Let's go to the template now for
our contact form.

2868
03:09:20,070 --> 03:09:22,506
I'm going to paste in the markup because,
well,

2869
03:09:22,506 --> 03:09:24,540
you don't want to see me type all of this.

2870
03:09:24,540 --> 03:09:27,080
But it's a very simple form.

2871
03:09:27,080 --> 03:09:31,784
It's a contact form, we have a field for
the person's name, their email address and

2872
03:09:31,784 --> 03:09:35,981
their message and then of course,
a button so that they can submit the form.

2873
03:09:35,981 --> 03:09:39,000
And let's be sure that
that's going to look okay.

2874
03:09:39,000 --> 03:09:40,660
I think it should, it does, great.

2875
03:09:40,660 --> 03:09:44,458
All right, so
now let's go to the component.

2876
03:09:44,458 --> 03:09:47,139
And we want to use reactive forms.

2877
03:09:47,139 --> 03:09:53,650
And the primary way that we do that is
by importing a class called FormControl.

2878
03:09:53,650 --> 03:09:57,531
Basically what we are going to
do is create FormControls and

2879
03:09:57,531 --> 03:10:00,952
then bind that to the individual
fields in our form.

2880
03:10:00,952 --> 03:10:04,367
We need to import this from angular/forms.

2881
03:10:04,367 --> 03:10:08,718
And then we just define our properties
that are going to represent those

2882
03:10:08,718 --> 03:10:10,130
FormControls.

2883
03:10:10,130 --> 03:10:13,951
So we have three,
we have the senderNameControl, and

2884
03:10:13,951 --> 03:10:17,575
we want to new up
the FormControlConstructor.

2885
03:10:17,575 --> 03:10:21,125
Now, we can pass in an initial
value if we wanted to.

2886
03:10:21,125 --> 03:10:25,086
And I think initializing as an empty
string is going to be fine,

2887
03:10:25,086 --> 03:10:29,877
because these are after all form
controls and empty strings make sense.

2888
03:10:29,877 --> 03:10:34,358
So we will also have a senderEmailControl,
which once again,

2889
03:10:34,358 --> 03:10:37,579
we will new up the FormControlConstructor.

2890
03:10:37,579 --> 03:10:42,160
And then finally,
we will have the senderMessageControl.

2891
03:10:42,160 --> 03:10:44,327
So we have these FormControls, and

2892
03:10:44,327 --> 03:10:48,010
now we just need to bind them
to the actual form fields.

2893
03:10:48,010 --> 03:10:50,950
So we are going to do that
inside of our template.

2894
03:10:50,950 --> 03:10:55,440
We're going to add a directive,
simply called FormControl.

2895
03:10:55,440 --> 03:10:59,392
And then the value of this directive is
going to be the properties that we just

2896
03:10:59,392 --> 03:10:59,960
created.

2897
03:10:59,960 --> 03:11:01,510
So this is the sender name.

2898
03:11:01,510 --> 03:11:04,469
So this will be senderNameControl.

2899
03:11:04,469 --> 03:11:09,541
For the email address, once again,
we'll use the FormControl directive,

2900
03:11:09,541 --> 03:11:12,827
but we'll bind this to
the senderEmailControl.

2901
03:11:12,827 --> 03:11:15,955
And then finally for
the text area for the message,

2902
03:11:15,955 --> 03:11:18,800
that will be the senderMessageControl.

2903
03:11:18,800 --> 03:11:24,100
So from a setup perspective, it feels
a lot like the template-driven approach.

2904
03:11:24,100 --> 03:11:28,867
We had to create a property that
we are now binding to a particular

2905
03:11:28,867 --> 03:11:30,570
field in the form.

2906
03:11:30,570 --> 03:11:35,423
The only difference is that,
we created those properties explicitly as

2907
03:11:35,423 --> 03:11:40,760
FormControl objects and we are binding
those objects to these form fields.

2908
03:11:40,760 --> 03:11:42,662
So then the question becomes,

2909
03:11:42,662 --> 03:11:48,100
why use reactive forms especially since it
appears that the setup is mostly the same.

2910
03:11:48,100 --> 03:11:51,860
We create properties,
we bind them to the form fields.

2911
03:11:51,860 --> 03:11:55,903
Well, the key is I used the term objects.

2912
03:11:55,903 --> 03:12:00,552
We created these FormControl objects and
as such,

2913
03:12:00,552 --> 03:12:07,698
this gives us an API that we can tap, Into
to make our forms a lot more flexible.

2914
03:12:07,698 --> 03:12:10,667
For example, we're going to have
a method called SubmitForms.

2915
03:12:10,667 --> 03:12:12,840
So let's just go ahead and define this.

2916
03:12:12,840 --> 03:12:16,728
But if we take a look at just one of
these, like the SenderEmailControl,

2917
03:12:16,728 --> 03:12:19,555
let's look at what IntelliSense
is going to pop up.

2918
03:12:19,555 --> 03:12:24,703
And you can see right off the bat that
there are a lot of properties and methods.

2919
03:12:24,703 --> 03:12:28,132
Some of these are extremely useful.

2920
03:12:28,132 --> 03:12:31,376
Like for example,
there's a dirty property.

2921
03:12:31,376 --> 03:12:36,315
Now I've always thought that the term
dirty sounds rather awful within this

2922
03:12:36,315 --> 03:12:39,026
context, but that is exactly what it is.

2923
03:12:39,026 --> 03:12:41,560
If the dirty property is true,

2924
03:12:41,560 --> 03:12:47,321
then the value in that form field
has changed from its original value.

2925
03:12:47,321 --> 03:12:52,400
And that is extremely valuable to
know as you are processing the form.

2926
03:12:52,400 --> 03:12:56,654
There's also a pristine property,
which is essentially the opposite.

2927
03:12:56,654 --> 03:13:00,314
Has the value of this particular
form control changed?

2928
03:13:00,314 --> 03:13:02,646
If not, then pristine is going to be true.

2929
03:13:02,646 --> 03:13:08,200
But it also gives you the ability
to mark a form field as pristine.

2930
03:13:08,200 --> 03:13:12,946
Or there's also a term of touched,
meaning that the user has

2931
03:13:12,946 --> 03:13:17,523
given focus to the form field and
then took the focus away.

2932
03:13:17,523 --> 03:13:20,313
So there's a lot of functionality here,

2933
03:13:20,313 --> 03:13:25,270
especially the ability to use very
expressive and flexible validators.

2934
03:13:25,270 --> 03:13:27,756
So let's do this, let's do a check.

2935
03:13:27,756 --> 03:13:32,472
And we will check if
the senderNameControl is dirty.

2936
03:13:32,472 --> 03:13:37,462
Well, then we will simply alert a message
that says, you changed the name field.

2937
03:13:37,462 --> 03:13:41,284
Of course, that's not going
to be very useful overall for

2938
03:13:41,284 --> 03:13:45,970
this contact form, but for
example purposes, it's going to be fine.

2939
03:13:45,970 --> 03:13:50,056
So let's go to our button,
let's handle the click event.

2940
03:13:50,056 --> 03:13:54,355
The first thing we really need to do
is prevent the default from occurring,

2941
03:13:54,355 --> 03:13:57,026
so let's call event.preventDefault().

2942
03:13:57,026 --> 03:14:00,206
And then we can call the submitForm.

2943
03:14:00,206 --> 03:14:05,168
So let's go to the browser, and
whenever we click on Submit Message,

2944
03:14:05,168 --> 03:14:09,807
we should not see the alert box,
because the name field is clean.

2945
03:14:09,807 --> 03:14:11,909
There has been no change to it, but

2946
03:14:11,909 --> 03:14:16,188
whenever we change the value to
something other than an empty string,

2947
03:14:16,188 --> 03:14:20,555
clicking the Send Message button,
we get the behavior that we expect.

2948
03:14:20,555 --> 03:14:22,239
We get the alert box with our message.

2949
03:14:22,239 --> 03:14:24,065
You changed the name field.

2950
03:14:24,065 --> 03:14:27,665
Now, in the next lesson, we are going
to look at creating a FormGroup.

2951
03:14:27,665 --> 03:14:33,159
Because, yes, as you've seen,
as it's possible to simply create a form,

2952
03:14:33,159 --> 03:14:38,922
bind fields to form controls, we can
group those controls into logical pieces.

2953
03:14:38,922 --> 03:14:42,337
In the previous lesson,
we created a contact form, and

2954
03:14:42,337 --> 03:14:46,344
we used reactive forms to set up
the ability to process this form.

2955
03:14:46,344 --> 03:14:49,401
We, of course,
haven't done any processing, but

2956
03:14:49,401 --> 03:14:53,779
we also briefly talked about the benefits
of using reactive form as opposed

2957
03:14:53,779 --> 03:14:55,945
to the template-driven approach.

2958
03:14:55,945 --> 03:14:58,408
One of those is that we get this API,

2959
03:14:58,408 --> 03:15:02,610
which gives us a much more
flexible way of processing a form.

2960
03:15:02,610 --> 03:15:08,066
And that's a wonderful thing, but it also
gives us the sense of data integrity.

2961
03:15:08,066 --> 03:15:11,126
Because as the user submits a form,

2962
03:15:11,126 --> 03:15:17,049
we get a snapshot of the data of that
form at the time it was submitted.

2963
03:15:17,049 --> 03:15:20,383
So we don't have to worry
about data being changed on us

2964
03:15:20,383 --> 03:15:23,364
like we do with
the template-driven approach.

2965
03:15:23,364 --> 03:15:29,091
So what I want to do in this lesson is
take this just slightly a step further and

2966
03:15:29,091 --> 03:15:33,486
use a group, because our form
has just three form fields.

2967
03:15:33,486 --> 03:15:36,302
These fields are related to one another,
so

2968
03:15:36,302 --> 03:15:40,880
it just kind of makes sense to use
a group to group all of these together.

2969
03:15:40,880 --> 03:15:45,536
So, to do that, we need to, first of all,
import the FormGroup class.

2970
03:15:45,536 --> 03:15:48,707
This is, of course,
coming from @angular/forms.

2971
03:15:48,707 --> 03:15:51,541
And then we want to create our FormGroup.

2972
03:15:51,541 --> 03:15:57,094
We'll do that by creating another
property, let's just call it, contactForm.

2973
03:15:57,094 --> 03:16:00,650
And we will new up
the FormGroup constructor.

2974
03:16:00,650 --> 03:16:06,860
This accepts an object that basically
allows us to define our data model.

2975
03:16:06,860 --> 03:16:10,966
So just like we defined our model
with individual properties,

2976
03:16:10,966 --> 03:16:15,930
now we are going to have a model that
is encapsulated within this FormGroup.

2977
03:16:15,930 --> 03:16:20,377
And we can essentially take these
properties that we created in the previous

2978
03:16:20,377 --> 03:16:23,168
lesson, paste them inside
of this FormGroup.

2979
03:16:23,168 --> 03:16:27,464
We, of course, need to change the syntax
because we are dealing with an object

2980
03:16:27,464 --> 03:16:30,341
literal here, but
basically it's the same thing.

2981
03:16:30,341 --> 03:16:32,531
We create our form controls,

2982
03:16:32,531 --> 03:16:36,746
except that now they
are properties on the contactForm.

2983
03:16:36,746 --> 03:16:40,647
I'm going to make these a little
bit easier to deal with as well.

2984
03:16:40,647 --> 03:16:43,900
So I'm going to remove control
from those property names.

2985
03:16:43,900 --> 03:16:47,180
Now, of course, our submitForm method,
it doesn't work.

2986
03:16:47,180 --> 03:16:49,612
So let's comment out that code.

2987
03:16:49,612 --> 03:16:52,464
And then let's go to the templates,

2988
03:16:52,464 --> 03:16:57,344
because this is where we need to
bind our FormGroup to our form.

2989
03:16:57,344 --> 03:17:00,654
We do that at the form element.

2990
03:17:00,654 --> 03:17:05,260
So we are going to use
a directive called formGroup, and

2991
03:17:05,260 --> 03:17:10,463
then we simply assign the contactForm
object that we created.

2992
03:17:10,463 --> 03:17:15,089
And then for the individual fields, we
no longer use the formControl directive.

2993
03:17:15,089 --> 03:17:19,644
Instead, we use an attribute
called formControlName.

2994
03:17:19,644 --> 03:17:23,208
And the value is the name of
the property in our FormGroup.

2995
03:17:23,208 --> 03:17:28,939
So we now have senderName, we have
senderEmail, and we have senderMessage.

2996
03:17:28,939 --> 03:17:33,310
And all we need to do is change
from using the formControl

2997
03:17:33,310 --> 03:17:36,195
directive to the formControlName.

2998
03:17:36,195 --> 03:17:41,477
So now we have that group,
it is properly bound to our form.

2999
03:17:41,477 --> 03:17:45,962
The only other thing that I want
to change is getting rid of

3000
03:17:45,962 --> 03:17:48,400
the click event on our button.

3001
03:17:48,400 --> 03:17:52,264
Because instead of listening for
this event, we want to listen for

3002
03:17:52,264 --> 03:17:53,995
the submit event on the form.

3003
03:17:53,995 --> 03:17:59,097
And we do that by binding
to the ngSubmit event.

3004
03:17:59,097 --> 03:18:04,416
Now, the reason why we want to do
this is because it allows the user

3005
03:18:04,416 --> 03:18:10,412
to submit the form, both by clicking
on a button that has a type of submit,

3006
03:18:10,412 --> 03:18:16,449
which we have, but it also lets the user
use the Enter key on the keyboard.

3007
03:18:16,449 --> 03:18:19,998
Which I certainly appreciate,
because as I'm entering a form,

3008
03:18:19,998 --> 03:18:22,587
my hands typically don't
leave the keyboard.

3009
03:18:22,587 --> 03:18:26,672
And it's very frustrating if I
can't tab between form fields, and

3010
03:18:26,672 --> 03:18:31,345
if I can't submit a form by just pressing
the Enter key, so this will be nice.

3011
03:18:31,345 --> 03:18:36,128
Let's go back to our code, and there's
a few other syntax errors that I need to

3012
03:18:36,128 --> 03:18:39,767
fix, because we are dealing
with an object literal there.

3013
03:18:39,767 --> 03:18:44,386
And now this gives us a slightly
different way of accessing the different

3014
03:18:44,386 --> 03:18:49,174
elements within our form, but also
just working with the form in general.

3015
03:18:49,174 --> 03:18:51,510
So let's write this out.

3016
03:18:51,510 --> 03:18:54,783
We'll say, this.contactForm.value.

3017
03:18:54,783 --> 03:18:57,066
And we'll see what we get.

3018
03:18:57,066 --> 03:19:02,042
So let's go to the browser,
let's pull up the developer console,

3019
03:19:02,042 --> 03:19:05,374
and let's, first of all, submit the form.

3020
03:19:05,374 --> 03:19:09,878
You can see that we get an object
that has three properties,

3021
03:19:09,878 --> 03:19:13,764
senderEmail, senderMessage,
and senderName.

3022
03:19:13,764 --> 03:19:18,196
And, of course, if we change any of
the form field values, well, then we

3023
03:19:18,196 --> 03:19:22,720
are going to see those values represented
whenever the form is submitted.

3024
03:19:22,720 --> 03:19:25,233
So once again, submit the form.

3025
03:19:25,233 --> 03:19:28,687
We now have the email and the name.

3026
03:19:28,687 --> 03:19:33,512
And by using a FormGroup,
we also have the ability to check

3027
03:19:33,512 --> 03:19:37,165
the validity of the entire
form all at once.

3028
03:19:37,165 --> 03:19:40,889
All we need to do is
use the valid property.

3029
03:19:40,889 --> 03:19:45,471
And since we haven't defined any
validators, this is always gonna be true.

3030
03:19:45,471 --> 03:19:49,358
But instead of having to check
each individual property,

3031
03:19:49,358 --> 03:19:52,863
all we have to do is check
if the form itself is valid.

3032
03:19:52,863 --> 03:19:53,935
If it is, then great.

3033
03:19:53,935 --> 03:19:57,346
If not,
then we can provide the user A message.

3034
03:19:57,346 --> 03:20:02,680
And in the next lesson, we will look
at how we can validate our form.

3035
03:20:02,680 --> 03:20:07,542
JavaScript was created for
the explicit purpose of processing forms,

3036
03:20:07,542 --> 03:20:12,575
because before we had JavaScript,
well, it was just very frustrating.

3037
03:20:12,575 --> 03:20:14,662
The user had to, first of all, wait for

3038
03:20:14,662 --> 03:20:17,083
the page to load over
a dial-up connection.

3039
03:20:17,083 --> 03:20:21,971
They had to fill out the form,
submit the form over a dial-up connection,

3040
03:20:21,971 --> 03:20:27,170
then they had to wait for the server to
process it and then respond over a dial-up

3041
03:20:27,170 --> 03:20:32,239
connection, only to find that you missed
a field or you did something wrong.

3042
03:20:32,239 --> 03:20:33,653
It was very frustrating.

3043
03:20:33,653 --> 03:20:38,760
So JavaScript made it so that we could
process forms inside of the browser.

3044
03:20:38,760 --> 03:20:43,110
But even then, it was still
a very cumbersome process, and

3045
03:20:43,110 --> 03:20:47,721
it really wasn't until a few years
ago when the validity API was

3046
03:20:47,721 --> 03:20:52,076
introduced that it really made
it easier to process forms.

3047
03:20:52,076 --> 03:20:56,587
Now, of course, there's always been
third-party libraries, because, well,

3048
03:20:56,587 --> 03:20:57,931
it was never really fun.

3049
03:20:57,931 --> 03:21:03,982
But thankfully, with Angular,
it is extremely easy to validate a form.

3050
03:21:03,982 --> 03:21:08,221
All we have to do is,
first of all, import validators.

3051
03:21:08,221 --> 03:21:11,200
This is, once again,
coming from @angular/forms.

3052
03:21:11,200 --> 03:21:15,811
And then we just need to apply those
validators to whatever form control that

3053
03:21:15,811 --> 03:21:16,397
we need.

3054
03:21:16,397 --> 03:21:20,965
Like for example, we have a contact form,
and we kind of need the name, the email,

3055
03:21:20,965 --> 03:21:21,961
and the message.

3056
03:21:21,961 --> 03:21:25,361
Otherwise, what's the point
of sending a message to us?

3057
03:21:25,361 --> 03:21:28,054
So whenever we create these form controls,

3058
03:21:28,054 --> 03:21:32,990
we can pass in a second argument, that is,
the validator that we want to use.

3059
03:21:32,990 --> 03:21:36,615
So we want all of those
fields to be required.

3060
03:21:36,615 --> 03:21:43,520
So we will simply pass the required
validator to each one of those controls.

3061
03:21:43,520 --> 03:21:48,250
And voila, we now have a form where
all of the fields are required.

3062
03:21:48,250 --> 03:21:54,675
Now, we had that code that output the
value of the valid property on our form.

3063
03:21:54,675 --> 03:21:56,286
And in the previous lesson,

3064
03:21:56,286 --> 03:21:59,810
it returned true because we
didn't have any validators.

3065
03:21:59,810 --> 03:22:04,217
But now, whenever we submit the form,
it's false, because, well,

3066
03:22:04,217 --> 03:22:07,240
of course it is,
all of our fields are required.

3067
03:22:07,240 --> 03:22:11,673
So, if we provide some information and
then submit the form,

3068
03:22:11,673 --> 03:22:13,770
it is now true, so great.

3069
03:22:13,770 --> 03:22:18,312
But of course, we need to apply
more validators, especially for

3070
03:22:18,312 --> 03:22:23,102
the email, because it's not enough
to just check if it is required,

3071
03:22:23,102 --> 03:22:26,836
we also need a syntactically
correct email address.

3072
03:22:26,836 --> 03:22:30,164
So you can also pass
an array of validators.

3073
03:22:30,164 --> 03:22:34,348
So that's exactly what we will do for
senderEmail, and

3074
03:22:34,348 --> 03:22:37,919
there is a validator called,
simply, email.

3075
03:22:37,919 --> 03:22:42,465
And we can do something similar for
the senderMessage,

3076
03:22:42,465 --> 03:22:49,347
because if the message itself isn't more
than ten characters, what's the point?

3077
03:22:49,347 --> 03:22:54,010
So we can use a minLength validator.

3078
03:22:54,010 --> 03:22:58,970
And then we can specify the minLength
of the string that is supplied.

3079
03:22:58,970 --> 03:23:02,030
So we can say that a message
has to be more than 10, or

3080
03:23:02,030 --> 03:23:06,115
at least it has to be at least 10
characters, or else it's not valid.

3081
03:23:06,115 --> 03:23:10,015
So now we can go back to the browser and
we can check this out.

3082
03:23:10,015 --> 03:23:12,040
Of course, every field is required.

3083
03:23:12,040 --> 03:23:16,735
So, once again, by not entering
anything and submitting, it's false.

3084
03:23:16,735 --> 03:23:21,900
But if we supply something to each one
of these, it's still false because we

3085
03:23:21,900 --> 03:23:27,566
need a valid email address, or at least,
a syntactically correct email address.

3086
03:23:27,566 --> 03:23:28,832
So we provide that,

3087
03:23:28,832 --> 03:23:33,377
but it's still false because our
message is only four characters long.

3088
03:23:33,377 --> 03:23:37,981
So, if we add something that's
more than nine characters,

3089
03:23:37,981 --> 03:23:40,069
we submit, it is now true.

3090
03:23:40,069 --> 03:23:42,116
All right, so that's all well and good.

3091
03:23:42,116 --> 03:23:47,398
But we need something visually so that
we can tell the user, this is not valid,

3092
03:23:47,398 --> 03:23:52,123
because there's nothing more
frustrating than clicking a button and

3093
03:23:52,123 --> 03:23:55,010
not knowing what the heck is going on.

3094
03:23:55,010 --> 03:23:59,430
So one thing that we can do is
add a visual cue to the button.

3095
03:23:59,430 --> 03:24:03,391
We can disable the button if
the form is not valid, so

3096
03:24:03,391 --> 03:24:06,281
we can bind to the disabled property.

3097
03:24:06,281 --> 03:24:09,366
And we can do this in a couple of
different ways because we have two

3098
03:24:09,366 --> 03:24:10,290
properties here.

3099
03:24:10,290 --> 03:24:13,950
We can use our contactForm object.

3100
03:24:13,950 --> 03:24:18,035
We have the valid property,
which we have been working with.

3101
03:24:18,035 --> 03:24:23,477
So we could say that this
is disabled if not valid.

3102
03:24:23,477 --> 03:24:28,955
I hate that approach because my brain just
doesn't really process that very well.

3103
03:24:28,955 --> 03:24:31,923
But thankfully,
we can see that it does indeed work.

3104
03:24:31,923 --> 03:24:36,329
The submit button is invalid
if the form is invalid, but

3105
03:24:36,329 --> 03:24:39,066
once it is valid, it's enabled.

3106
03:24:39,066 --> 03:24:43,255
That's great, but thankfully we
don't have to use valid here,

3107
03:24:43,255 --> 03:24:45,322
we do have an invalid property.

3108
03:24:45,322 --> 03:24:49,650
And so I like this a whole lot better,
so that if it is invalid,

3109
03:24:49,650 --> 03:24:51,163
then it is disabled.

3110
03:24:51,163 --> 03:24:52,792
If not, then it's not.

3111
03:24:52,792 --> 03:24:54,294
This reads a whole lot easier.

3112
03:24:54,294 --> 03:24:56,984
So we will get the same
functionality that we did,

3113
03:24:56,984 --> 03:24:59,944
it's just that our code is
a little bit easier to read.

3114
03:24:59,944 --> 03:25:04,706
So that's great, but
it still needs some work because we

3115
03:25:04,706 --> 03:25:09,187
need to tell the user, hey,
this field is required.

3116
03:25:09,187 --> 03:25:14,100
Hey, this field is required, and
it needs to be a valid email address.

3117
03:25:14,100 --> 03:25:16,245
And so far, everything has been easy.

3118
03:25:16,245 --> 03:25:18,118
It hasn't been cumbersome.

3119
03:25:18,118 --> 03:25:22,299
This is gonna get a little verbose,
so let's focus on the email address,

3120
03:25:22,299 --> 03:25:25,412
since we have two things that
we need to check for here.

3121
03:25:25,412 --> 03:25:29,535
And while we could take several
different approaches for this,

3122
03:25:29,535 --> 03:25:34,111
what I want to do is just add a message
to the bottom of the field to display

3123
03:25:34,111 --> 03:25:36,808
the error that the user needs to fix here.

3124
03:25:36,808 --> 03:25:42,248
So we're gonna add a div element after
the input element, but of course,

3125
03:25:42,248 --> 03:25:47,275
we only want to show this div element
if the email field is not valid.

3126
03:25:47,275 --> 03:25:52,925
So we can use ngIf, here, and
we'll use our contactForm.

3127
03:25:52,925 --> 03:25:57,638
But that's not good enough because
we want the individual email field.

3128
03:25:57,638 --> 03:25:59,978
So we have a method called get, and

3129
03:25:59,978 --> 03:26:03,703
then we pass in the name of
the field that we want to get.

3130
03:26:03,703 --> 03:26:07,139
So in this case,
that would be, senderEmail.

3131
03:26:07,139 --> 03:26:10,531
And then we can check if it is invalid.

3132
03:26:10,531 --> 03:26:15,409
Now this is going to display an error,
we have a red squiggly here.

3133
03:26:15,409 --> 03:26:17,689
And if we save this and
if we go to the browser,

3134
03:26:17,689 --> 03:26:20,032
we're going to get
the explanation as to why.

3135
03:26:20,032 --> 03:26:23,217
It says that the object is possibly null.

3136
03:26:23,217 --> 03:26:25,640
Well, that's all well and good, but

3137
03:26:25,640 --> 03:26:28,839
we know that this really
shouldn't ever be null.

3138
03:26:28,839 --> 03:26:33,039
If it is null, then there's
something definitely wrong here.

3139
03:26:33,039 --> 03:26:35,581
But we need to make this
work syntactically, so

3140
03:26:35,581 --> 03:26:38,452
what we can use is the null
null coalescing operator.

3141
03:26:38,452 --> 03:26:42,971
So what we can use is essentially
the null-checking operator.

3142
03:26:42,971 --> 03:26:47,731
I don't really remember what
the actual name of this operator is,

3143
03:26:47,731 --> 03:26:50,792
but it is a question
mark followed by a dot.

3144
03:26:50,792 --> 03:26:56,186
Basically, it says that if what
comes before this operator is null,

3145
03:26:56,186 --> 03:27:00,194
then fine, it's null,
don't do anything else.

3146
03:27:00,194 --> 03:27:03,815
However, if it's not null,
then it's going to go ahead and

3147
03:27:03,815 --> 03:27:05,592
check the invalid property.

3148
03:27:05,592 --> 03:27:07,423
So this is going to fix that.

3149
03:27:07,423 --> 03:27:11,289
And so, if this is not valid,
if it is invalid,

3150
03:27:11,289 --> 03:27:14,308
then we can say that this is invalid.

3151
03:27:14,308 --> 03:27:17,569
And so, let's take a look at
what that's going to look like.

3152
03:27:17,569 --> 03:27:19,003
And there it is.

3153
03:27:19,003 --> 03:27:21,977
Now, I don't particularly want this.

3154
03:27:21,977 --> 03:27:27,144
We are seeing the error message as
the form is loaded into the browser.

3155
03:27:27,144 --> 03:27:31,698
I would like the message to
be hidden until the user does

3156
03:27:31,698 --> 03:27:34,082
something with this field.

3157
03:27:34,082 --> 03:27:36,736
So that let's say that
they give focus to it and

3158
03:27:36,736 --> 03:27:41,312
then they decide to not put anything in
there, so they move on to the next field.

3159
03:27:41,312 --> 03:27:44,691
Well, that would be the perfect
time to display an error message.

3160
03:27:44,691 --> 03:27:45,912
Hey, this is required.

3161
03:27:45,912 --> 03:27:52,451
So we can do that, but it's going
to require a little bit more code.

3162
03:27:52,451 --> 03:27:53,939
So here's what we want to do.

3163
03:27:53,939 --> 03:28:00,171
If this is invalid, And if the field
is dirty or if it has been touched,

3164
03:28:00,171 --> 03:28:04,291
which is the kinda state
that I just went over,

3165
03:28:04,291 --> 03:28:10,655
the user gave focus to it, decided
to give focus to another form field.

3166
03:28:10,655 --> 03:28:16,173
So they touched that field signifying
that they at least interacted with it.

3167
03:28:16,173 --> 03:28:19,136
So if it is dirty or
if it has been touched,

3168
03:28:19,136 --> 03:28:22,291
then we want to display
that error message.

3169
03:28:22,291 --> 03:28:26,507
Now, notice what I've done here,
we've typed out or

3170
03:28:26,507 --> 03:28:32,294
I've used ContactForm.get, passed in
the name of the field, and so on.

3171
03:28:32,294 --> 03:28:35,833
So it does get verbose taking
this particular approach.

3172
03:28:35,833 --> 03:28:39,992
What we could do is create some kind of
helper method, or a helper property, or

3173
03:28:39,992 --> 03:28:42,262
something inside of the component class so

3174
03:28:42,262 --> 03:28:45,242
that we can get to this
information a little bit easier.

3175
03:28:45,242 --> 03:28:47,120
I'm gonna leave this as is.

3176
03:28:47,120 --> 03:28:51,138
But now with that in place,
we can go back to the browser and

3177
03:28:51,138 --> 03:28:53,763
the form is going to load as it should.

3178
03:28:53,763 --> 03:28:57,950
There's no error messages,
because the user hasn't done anything yet,

3179
03:28:57,950 --> 03:28:59,351
which is what we wanted.

3180
03:28:59,351 --> 03:29:02,422
But if we touch the email
address field and

3181
03:29:02,422 --> 03:29:06,913
then give focus to something else,
then we get the message.

3182
03:29:06,913 --> 03:29:10,948
But, of course, the message,
this is invalid, this isn't good enough.

3183
03:29:10,948 --> 03:29:15,553
We want to provide something meaningful to
the user, but we also need to keep in our

3184
03:29:15,553 --> 03:29:19,045
minds that there's actually
two different error messages.

3185
03:29:19,045 --> 03:29:22,516
There's one that's going to tell
the user that this is required.

3186
03:29:22,516 --> 03:29:26,660
There's also one that's going to tell
the user that they need to supply

3187
03:29:26,660 --> 03:29:29,091
a syntactically correct email address.

3188
03:29:29,091 --> 03:29:32,933
So we're going to use
the small elements here.

3189
03:29:32,933 --> 03:29:38,263
We're going to set the class to
text-danger so that it is red.

3190
03:29:38,263 --> 03:29:40,690
And then we are going to use ngIf,

3191
03:29:40,690 --> 03:29:46,089
because we need to check what kind of
error that we are encountering here.

3192
03:29:46,089 --> 03:29:49,077
So let's just copy what we have here for

3193
03:29:49,077 --> 03:29:53,710
the invalid, because we're
going to use that as our basis.

3194
03:29:53,710 --> 03:29:56,660
Because instead of using
this invalid property,

3195
03:29:56,660 --> 03:29:58,908
we have a method called hasError, and

3196
03:29:58,908 --> 03:30:02,996
then we can pass in the name of
the validator that we want to check for.

3197
03:30:02,996 --> 03:30:07,944
So in this case,
we used the required validator.

3198
03:30:07,944 --> 03:30:14,228
And if that is the error, then we
can say that this field is required.

3199
03:30:14,228 --> 03:30:18,368
But then we also need to check
the email error as well,

3200
03:30:18,368 --> 03:30:23,072
because we have that email validator,
so we will use email.

3201
03:30:23,072 --> 03:30:29,166
And then for this message, we can say,
please enter your email address.

3202
03:30:29,166 --> 03:30:33,542
So now, whenever we go back to the browser
once again, there is no error message.

3203
03:30:33,542 --> 03:30:37,455
We touch the field and
we can see that the field is required.

3204
03:30:37,455 --> 03:30:39,576
Okay, so we start entering stuff,

3205
03:30:39,576 --> 03:30:44,397
but now we see that the error message
changed, please enter your email address.

3206
03:30:44,397 --> 03:30:50,273
So if we supply a syntactically correct
email, then the message goes away.

3207
03:30:50,273 --> 03:30:55,710
But the minute that we have an error for
the email address, we get that message.

3208
03:30:55,710 --> 03:31:00,537
And of course, if there is no value,
we once again get the required error.

3209
03:31:00,537 --> 03:31:05,804
Well, let's essentially do the same
thing for the message very quickly.

3210
03:31:05,804 --> 03:31:11,745
So let's just copy what we did for the
email, let's paste it for this text area.

3211
03:31:11,745 --> 03:31:16,496
And of course, instead of using
senderEmail, this is senderMessage.

3212
03:31:16,496 --> 03:31:18,835
We have to change all these.

3213
03:31:18,835 --> 03:31:22,478
Once again, we could set up
some kind of helper method or

3214
03:31:22,478 --> 03:31:26,677
something to make it a little
easier to get to this information.

3215
03:31:26,677 --> 03:31:32,828
Now for the minlength error, all we
would use is the name of that validator.

3216
03:31:32,828 --> 03:31:36,429
So whatever validator we used,
we use that name.

3217
03:31:36,429 --> 03:31:41,492
So that would be minlength,
and I believe the message

3218
03:31:41,492 --> 03:31:46,003
has to be at least 10 characters,
all right?

3219
03:31:46,003 --> 03:31:48,199
So that should be fine.

3220
03:31:48,199 --> 03:31:49,360
Let's go back to the browser.

3221
03:31:49,360 --> 03:31:51,981
Let's enter, well,
let's not enter our name yet.

3222
03:31:51,981 --> 03:31:57,077
We will enter a valid email address,
and then our message.

3223
03:31:57,077 --> 03:32:02,178
And we're not seeing,
it is the name of our validator, but

3224
03:32:02,178 --> 03:32:07,104
it is all lowercase,
that's kind of important, isn't it?

3225
03:32:07,104 --> 03:32:08,316
So let's go back.

3226
03:32:08,316 --> 03:32:13,116
Our valid email address, and then our
message has to be at least 10 characters.

3227
03:32:13,116 --> 03:32:17,302
So once we reach 10 characters,
then that message goes away.

3228
03:32:17,302 --> 03:32:23,280
But, of course, the form itself is not
valid because we need to supply the name.

3229
03:32:23,280 --> 03:32:27,560
And I guess very quickly,
we could add the name validator as well.

3230
03:32:27,560 --> 03:32:31,670
So let's copy what we did for
email or the message.

3231
03:32:31,670 --> 03:32:32,700
It doesn't really matter.

3232
03:32:32,700 --> 03:32:35,839
Let's paste it for the sender name.

3233
03:32:35,839 --> 03:32:39,919
We, of course, need to change
[LAUGH] the field for this, but

3234
03:32:39,919 --> 03:32:43,766
we only have one validator here and
that is the required.

3235
03:32:43,766 --> 03:32:46,923
So we can leave that as it is,
this field is required or

3236
03:32:46,923 --> 03:32:49,805
we can have something
a little bit more custom for

3237
03:32:49,805 --> 03:32:53,403
this field, please enter your name or
something like that.

3238
03:32:53,403 --> 03:32:55,566
I think this field is required is fine.

3239
03:32:55,566 --> 03:32:59,204
So now, if we touch it, error is there.

3240
03:32:59,204 --> 03:33:05,918
If we type something, the error goes away,
and we now have validation for our form.

3241
03:33:05,918 --> 03:33:10,014
Angular has many built-in form
validators and they will work for

3242
03:33:10,014 --> 03:33:11,957
the majority of our use cases.

3243
03:33:11,957 --> 03:33:15,817
However, there will be times when
you want your own validator.

3244
03:33:15,817 --> 03:33:19,595
And thankfully, it's very easy to
write your own custom validator,

3245
03:33:19,595 --> 03:33:21,334
because all it is is a function.

3246
03:33:21,334 --> 03:33:26,362
So I want to add another validator
to the email address field.

3247
03:33:26,362 --> 03:33:29,932
Basically, I want to
prevent people from using

3248
03:33:29,932 --> 03:33:33,688
certain domains like gmail.com or
yahoo.com.

3249
03:33:33,688 --> 03:33:37,105
I know that that doesn't sound
very useful, and in fact,

3250
03:33:37,105 --> 03:33:40,892
it would be very frustrating, but
it gives us an example to use.

3251
03:33:40,892 --> 03:33:45,127
Now, remember that I mentioned
that a validator is a function.

3252
03:33:45,127 --> 03:33:48,746
So we could define that function
here inside of our component,

3253
03:33:48,746 --> 03:33:52,296
but I think it makes more sense
to put it inside of its own file,

3254
03:33:52,296 --> 03:33:55,935
especially after we are done
adding some of the features to it.

3255
03:33:55,935 --> 03:33:59,631
So let's call this invalidEmailDomain, and

3256
03:33:59,631 --> 03:34:04,281
let's first of all talk about
the anatomy of a validator.

3257
03:34:04,281 --> 03:34:06,222
Well, as I mentioned,
it's just a function.

3258
03:34:06,222 --> 03:34:08,574
The function name itself
really doesn't matter.

3259
03:34:08,574 --> 03:34:13,178
So for right now, I'm going to
call it invalidEmailDomain, and

3260
03:34:13,178 --> 03:34:16,201
it accepts the control
that it is bound to.

3261
03:34:16,201 --> 03:34:19,072
It is of type AbstractControl.

3262
03:34:19,072 --> 03:34:21,106
So what exactly does that mean?

3263
03:34:21,106 --> 03:34:25,177
Well, whenever we set up our form
controls instead of our form group,

3264
03:34:25,177 --> 03:34:26,833
we specify the validators.

3265
03:34:26,833 --> 03:34:29,402
And so here for our senderEmail,

3266
03:34:29,402 --> 03:34:33,819
we are going to add that
invalidEmailDomain validator.

3267
03:34:33,819 --> 03:34:38,613
So when Angular validates this
form field or this form control,

3268
03:34:38,613 --> 03:34:44,315
it's going to pass this form control
to our invalidEmailDomain function.

3269
03:34:44,315 --> 03:34:50,245
And then we do our validation and
we return one of two values.

3270
03:34:50,245 --> 03:34:55,797
The first is an object of
type ValidationErrors.

3271
03:34:55,797 --> 03:35:01,355
So if the value of this control is not
valid, it will return an object and

3272
03:35:01,355 --> 03:35:05,165
it will specify the type
of error that occurred.

3273
03:35:05,165 --> 03:35:07,135
The other value is null.

3274
03:35:07,135 --> 03:35:13,452
If our function returns null,
then the value is considered valid.

3275
03:35:13,452 --> 03:35:17,687
Seems kinda weird, especially
whenever we see how we return this

3276
03:35:17,687 --> 03:35:21,466
ValidationErrors object, but
it is still quite simple.

3277
03:35:21,466 --> 03:35:24,966
So let's first of all get
the value of the control.

3278
03:35:24,966 --> 03:35:28,598
So we'll use the control object,
it has a value property.

3279
03:35:28,598 --> 03:35:31,517
But remember that we
are also using strings.

3280
03:35:31,517 --> 03:35:36,537
So if we want to see if the provided
email address has a given hostname,

3281
03:35:36,537 --> 03:35:40,962
it would make sense for
us to just normalize all of the string,

3282
03:35:40,962 --> 03:35:44,728
because email addresses
are not case-sensitive.

3283
03:35:44,728 --> 03:35:50,675
So what we will do is call tolowerCase()
here, but notice what I'm doing.

3284
03:35:50,675 --> 03:35:55,917
I'm using the ?.operator so
that if control.value,

3285
03:35:55,917 --> 03:36:01,715
Has a value, then it's going to
be converted into lowercase.

3286
03:36:01,715 --> 03:36:05,729
If it is null, well, then null is
going to be assigned to value.

3287
03:36:05,729 --> 03:36:10,641
And this is important because the first
thing we are going to do is check if

3288
03:36:10,641 --> 03:36:12,262
we don't have a value.

3289
03:36:12,262 --> 03:36:18,078
Because if we don't have a value, then
technically, our form control is valid.

3290
03:36:18,078 --> 03:36:22,663
It doesn't have a host name
that we want to prevent, so

3291
03:36:22,663 --> 03:36:26,061
we return null if we don't have a value.

3292
03:36:26,061 --> 03:36:29,500
Now, of course, that's just for
this particular validator.

3293
03:36:29,500 --> 03:36:34,268
Other validators might need to
return an error object in that case,

3294
03:36:34,268 --> 03:36:35,950
we don't in this case.

3295
03:36:35,950 --> 03:36:40,736
So the next thing we need is to
check if the provided value has

3296
03:36:40,736 --> 03:36:44,680
any one of the host names
that we want to prevent.

3297
03:36:44,680 --> 03:36:45,735
So let's do this.

3298
03:36:45,735 --> 03:36:49,263
Let's create an array called hosts,

3299
03:36:49,263 --> 03:36:53,784
and we will have gmail.com and
yahoo.com, and

3300
03:36:53,784 --> 03:36:59,865
we could do this very easily by
using the some method on our array.

3301
03:36:59,865 --> 03:37:01,804
So we will call hosts.some, and

3302
03:37:01,804 --> 03:37:05,002
we're going to be working
with each individual host.

3303
03:37:05,002 --> 03:37:11,655
So, basically, if some of the hosts are
substrings in the form control's value,

3304
03:37:11,655 --> 03:37:16,802
then, of course, yes,
we have an error that we need to return.

3305
03:37:16,802 --> 03:37:19,466
So all we are doing here is calling some.

3306
03:37:19,466 --> 03:37:24,022
It returns a Boolean value, so
that if some of the hosts are substrings

3307
03:37:24,022 --> 03:37:28,592
in the value, then matches will be true,
otherwise it will be false.

3308
03:37:28,592 --> 03:37:34,138
So that then we simply need to check
matches whenever we return something.

3309
03:37:34,138 --> 03:37:35,620
If we have a match,

3310
03:37:35,620 --> 03:37:41,385
then we return an object that has
a property called invalidEmailDomain.

3311
03:37:41,385 --> 03:37:44,259
Now this, it's not arbitrary, but

3312
03:37:44,259 --> 03:37:49,000
this property name can be whatever
it is that we want it to be.

3313
03:37:49,000 --> 03:37:52,016
This is the error name itself.

3314
03:37:52,016 --> 03:37:57,031
So if we take a look at the template here,
whenever we check to see what

3315
03:37:57,031 --> 03:38:02,834
error occurred, such as required in this
case, but we want the email address.

3316
03:38:02,834 --> 03:38:06,227
So here we check required,
here we check email.

3317
03:38:06,227 --> 03:38:09,384
We will essentially do the same thing, but

3318
03:38:09,384 --> 03:38:15,008
we will use whatever property name we
specify here inside of our validator.

3319
03:38:15,008 --> 03:38:20,314
So our error name is going to be
invalidEmailDomain, and then we will

3320
03:38:20,314 --> 03:38:25,723
simply change our error message,
the email provider is not allowed.

3321
03:38:25,723 --> 03:38:28,378
But let's go ahead and
let's finish this return statement.

3322
03:38:28,378 --> 03:38:34,035
So if there is a match,
we return the validation error's object,

3323
03:38:34,035 --> 03:38:36,366
otherwise we return null.

3324
03:38:36,366 --> 03:38:39,446
And so now all we need to do is,
well, first of all,

3325
03:38:39,446 --> 03:38:42,039
we need to import this ValidationErrors.

3326
03:38:42,039 --> 03:38:45,091
This also comes from @angular/forms, but

3327
03:38:45,091 --> 03:38:48,471
then we need to import
this invalidEmailDomain.

3328
03:38:48,471 --> 03:38:50,815
So let's, first of all, export that.

3329
03:38:50,815 --> 03:38:51,810
I don't think we did.

3330
03:38:51,810 --> 03:38:52,541
No, we didn't.

3331
03:38:52,541 --> 03:38:58,915
So we will export that function and then
import that here inside of our component.

3332
03:38:58,915 --> 03:39:03,225
And then once we save this and we go
to the browser, everything should work.

3333
03:39:03,225 --> 03:39:05,104
Visual Studio Code, for whatever reason,

3334
03:39:05,104 --> 03:39:07,401
still thinks that there's
an error in the template.

3335
03:39:07,401 --> 03:39:08,612
I don't think that there is.

3336
03:39:08,612 --> 03:39:10,346
Okay, so let's try this out.

3337
03:39:10,346 --> 03:39:14,173
We know that the validation for work.

3338
03:39:14,173 --> 03:39:19,282
So all we are gonna be testing here
is the validation for the host name.

3339
03:39:19,282 --> 03:39:22,456
So if we have something that is permitted,
asdf.com,

3340
03:39:22,456 --> 03:39:24,558
we can see that that works just fine.

3341
03:39:24,558 --> 03:39:28,410
But if we use gmail.com,
the email provider is not allowed.

3342
03:39:28,410 --> 03:39:32,108
If we use yahoo.com,
the email provider is not allowed.

3343
03:39:32,108 --> 03:39:37,989
But if we use outlook.com, well,
then we can see that that is valid.

3344
03:39:37,989 --> 03:39:41,129
So there we go, we have our own validator.

3345
03:39:41,129 --> 03:39:45,441
But I want to take this a step further
because I don't necessarily like

3346
03:39:45,441 --> 03:39:49,109
that the hosts are hard coded
here inside of the validator.

3347
03:39:49,109 --> 03:39:52,752
Instead, I would like to
do something like this so

3348
03:39:52,752 --> 03:39:55,889
that we have a function
that we could call.

3349
03:39:55,889 --> 03:39:58,049
And it would look something like this, so

3350
03:39:58,049 --> 03:40:00,652
that we would have
the invalidEmailDomain here.

3351
03:40:00,652 --> 03:40:06,285
And we would call
createInvalidDomainValidator.

3352
03:40:06,285 --> 03:40:11,468
[LAUGH] That's a mouthful, but it at
least is explicit as to what it does.

3353
03:40:11,468 --> 03:40:16,170
And then we could provide the host
names that we wanted to prevent.

3354
03:40:16,170 --> 03:40:20,260
This way, we could use this function
anytime that we needed to create

3355
03:40:20,260 --> 03:40:25,160
an invalid domain validator, and it
would give us a little more flexibility.

3356
03:40:25,160 --> 03:40:26,760
So let's do that.

3357
03:40:26,760 --> 03:40:31,780
Let me make sure that this is typed
correctly, createInvalidDomainValidator.

3358
03:40:31,780 --> 03:40:33,550
Okay, so here's what we are going to do.

3359
03:40:33,550 --> 03:40:36,627
We're going to change
our validator code so

3360
03:40:36,627 --> 03:40:41,038
that instead of importing
the invalidEmailDomain function,

3361
03:40:41,038 --> 03:40:46,461
we are going to import a function that
will create that invalid email domain.

3362
03:40:46,461 --> 03:40:47,474
So let's save that.

3363
03:40:47,474 --> 03:40:53,824
Let's go back to our validator file,
and instead of exporting this function,

3364
03:40:53,824 --> 03:40:59,251
what we will do then is export
the createInvalidDomainValidator.

3365
03:40:59,251 --> 03:41:04,579
So that it would accept the hosts that
we wanted to work with, which is going

3366
03:41:04,579 --> 03:41:10,340
to be just an array of strings, and
this is going to return a ValidatorFn.

3367
03:41:10,340 --> 03:41:14,093
This is the type that we need
to import from @angular/forms.

3368
03:41:14,093 --> 03:41:18,911
But from there, all we really
need to do is just cut and paste.

3369
03:41:18,911 --> 03:41:21,712
So let's take this, cut it out and

3370
03:41:21,712 --> 03:41:26,356
paste it inside of our
createInvalidDomainValidator.

3371
03:41:26,356 --> 03:41:31,135
We can get rid of this hosts variable
because now we are relying upon the hosts

3372
03:41:31,135 --> 03:41:34,579
that were passed to
createInvalidDomainValidator.

3373
03:41:34,579 --> 03:41:37,339
And let's do this.

3374
03:41:37,339 --> 03:41:43,409
We will simply return our function, and
we will use an arrow function here.

3375
03:41:43,409 --> 03:41:47,544
So that should give us the same
functionality as we did before,

3376
03:41:47,544 --> 03:41:50,840
but now we have a validator
that is dynamic.

3377
03:41:50,840 --> 03:41:53,963
We can create it however
we need to create it with

3378
03:41:53,963 --> 03:41:58,240
whatever hosts that we want to
prevent the user from using.

3379
03:41:58,240 --> 03:41:59,597
Let's add another one,

3380
03:41:59,597 --> 03:42:03,867
just to make sure that everything does
indeed actually work as we expect it to.

3381
03:42:03,867 --> 03:42:08,347
So let's also prevent hotmail.com.

3382
03:42:08,347 --> 03:42:10,200
I still have a Hotmail account.

3383
03:42:10,200 --> 03:42:14,582
It long ago became my spam account,
but still it can be useful here.

3384
03:42:14,582 --> 03:42:17,550
So let's test Hotmail.

3385
03:42:17,550 --> 03:42:19,650
That email provider is not allowed.

3386
03:42:19,650 --> 03:42:21,929
Let's try Yahoo and Gmail.

3387
03:42:21,929 --> 03:42:26,974
Now, of course, our validators can be
as simple or as complex as we need.

3388
03:42:26,974 --> 03:42:31,931
Even though ours is a little more dynamic,
I would still say that it is simple.

3389
03:42:31,931 --> 03:42:35,160
Single page applications
are not a new concept,

3390
03:42:35,160 --> 03:42:38,800
it's been around for
many, many, many years.

3391
03:42:38,800 --> 03:42:43,073
And, of course, thankfully, the way
that we create and develop single page

3392
03:42:43,073 --> 03:42:47,480
applications has changed over the years
to where now it's relatively simple,

3393
03:42:47,480 --> 03:42:50,266
whereas at the beginning
it was very cumbersome.

3394
03:42:50,266 --> 03:42:55,244
Now if you're not familiar with
the concept of a single page application,

3395
03:42:55,244 --> 03:42:59,840
it is an entire web application that
is loaded into a single web page.

3396
03:42:59,840 --> 03:43:03,482
This is very different from
a traditional web application.

3397
03:43:03,482 --> 03:43:05,397
So here we have tutsplus.com.

3398
03:43:05,397 --> 03:43:07,663
This is a normal website.

3399
03:43:07,663 --> 03:43:11,420
So we go to tutsplus.com,
we click on a link.

3400
03:43:11,420 --> 03:43:16,540
This link is going to send
a request to the HTTP server.

3401
03:43:16,540 --> 03:43:19,080
The server will handle that request.

3402
03:43:19,080 --> 03:43:23,880
It will generate the output, which is
the HTML that is sent to the browser, and

3403
03:43:23,880 --> 03:43:27,108
then it will send that
response back to the browser.

3404
03:43:27,108 --> 03:43:31,878
With a single-page application,
the server, for all intents and

3405
03:43:31,878 --> 03:43:33,641
purposes, is left out.

3406
03:43:33,641 --> 03:43:36,792
The initial page is sent from the server.

3407
03:43:36,792 --> 03:43:40,652
But clicking on a link to go to other
parts of the application doesn't

3408
03:43:40,652 --> 03:43:43,991
necessarily mean that it will
send a request to the server.

3409
03:43:43,991 --> 03:43:48,248
Our Angular application is going
to be handling those requests.

3410
03:43:48,248 --> 03:43:52,111
And the way that that works
is by using a router.

3411
03:43:52,111 --> 03:43:55,846
And if you're not familiar
with the idea of a router,

3412
03:43:55,846 --> 03:44:00,338
it's very simple, it essentially
routes a URL to a component.

3413
03:44:00,338 --> 03:44:04,583
So for a traditional website,
the server handles all of that,

3414
03:44:04,583 --> 03:44:09,240
it accepts a request for a given URL,
and then it returns a response.

3415
03:44:09,240 --> 03:44:13,655
The result being a completely separate
page within an Angular application.

3416
03:44:13,655 --> 03:44:17,459
The Angular application receives the URL,
and

3417
03:44:17,459 --> 03:44:21,558
it loads another component
that resembles a page.

3418
03:44:21,558 --> 03:44:27,610
If that's clear as mud, hopefully getting
into it will be a little bit clearer.

3419
03:44:27,610 --> 03:44:30,370
So, the first thing we need to
do is create a new project.

3420
03:44:30,370 --> 03:44:33,919
Now, we could add the router
to our existing wish list.

3421
03:44:33,919 --> 03:44:39,046
However, if you ever plan on creating or
writing a single-page application,

3422
03:44:39,046 --> 03:44:43,407
even if you don't intend to use
the routing capabilities up front,

3423
03:44:43,407 --> 03:44:48,093
it makes sense to go ahead and
just create your project using the router.

3424
03:44:48,093 --> 03:44:52,473
So, we're going to create a new
project called router app, and

3425
03:44:52,473 --> 03:44:56,546
the very first question is if
we want to use Angular router.

3426
03:44:56,546 --> 03:45:02,200
The default is no, but in this case, yes,
we do, and let's use just ordinary css.

3427
03:45:02,200 --> 03:45:06,773
And then when our project is created,
we will create a couple of components that

3428
03:45:06,773 --> 03:45:11,950
will represent individual pages,
that we will, quote-unquote, navigate to.

3429
03:45:11,950 --> 03:45:16,290
Let's generate the first component,
and we'll just call this first.

3430
03:45:16,290 --> 03:45:19,812
Then we will do the same thing
except we'll call it second, so,

3431
03:45:19,812 --> 03:45:23,792
that this is going to give us two
components that we can then then navigate

3432
03:45:23,792 --> 03:45:26,740
to, to represent individual
pages if you will.

3433
03:45:26,740 --> 03:45:31,474
And before we start up our application,
let's go ahead and load up our code editor

3434
03:45:31,474 --> 03:45:36,345
because there are quite a few differences
between an application that has the router

3435
03:45:36,345 --> 03:45:40,207
and then just a normal application
that we have been working with.

3436
03:45:40,207 --> 03:45:43,224
And we'll start with the app module, so

3437
03:45:43,224 --> 03:45:48,833
let's go into the source folder inside
of app, we'll look at app module.

3438
03:45:48,833 --> 03:45:53,288
And for the most part everything looks
normal except that now we have this app

3439
03:45:53,288 --> 03:45:54,800
routing module.

3440
03:45:54,800 --> 03:45:58,204
This is a module that contains
the routing information

3441
03:45:58,204 --> 03:46:02,320
because what we have to do is
essentially define our routes.

3442
03:46:02,320 --> 03:46:06,770
Basically we say that we want this
particular path to go to this particular

3443
03:46:06,770 --> 03:46:08,080
component.

3444
03:46:08,080 --> 03:46:12,400
And all of that is defined inside
of this AppRoutingModule, and

3445
03:46:12,400 --> 03:46:15,520
this is inside of
the AppRoutingModule file.

3446
03:46:15,520 --> 03:46:20,629
So, let's go ahead and let's open that up,
and we will see our module

3447
03:46:20,629 --> 03:46:25,566
is defined here, it is importing
the router module and for route and

3448
03:46:25,566 --> 03:46:31,400
then the routes are being passed to
this and then exports the router module.

3449
03:46:31,400 --> 03:46:35,036
But what's important here
is this routes variable,

3450
03:46:35,036 --> 03:46:39,494
this is an array of objects that
essentially defines our routes.

3451
03:46:39,494 --> 03:46:43,781
At the most basic level,
there will be two properties,

3452
03:46:43,781 --> 03:46:47,887
there will be the path Which
is essentially the URL and

3453
03:46:47,887 --> 03:46:52,009
then the component that we
want that path to route to.

3454
03:46:52,009 --> 03:46:57,010
So, we have our first component which we
need to import both the first component

3455
03:46:57,010 --> 03:47:02,220
and the second component as well, but
I want you to notice the path itself.

3456
03:47:02,220 --> 03:47:07,118
Now, there are some frameworks that
want you to put a slash before this,

3457
03:47:07,118 --> 03:47:10,746
but these paths are all
relative to our application.

3458
03:47:10,746 --> 03:47:15,526
So, the route of our application
as it is currently is local

3459
03:47:15,526 --> 03:47:20,019
host port believe 4200, so
the path that we specify

3460
03:47:20,019 --> 03:47:24,721
within a route is going to be
that first segment in the URL.

3461
03:47:24,721 --> 03:47:28,428
So, in this case it will be first or
it would be second, so,

3462
03:47:28,428 --> 03:47:31,370
let's take a look at that in the browser.

3463
03:47:31,370 --> 03:47:35,243
So, let's hop on over there to
our Angular application, and

3464
03:47:35,243 --> 03:47:38,580
at first is going to look
like a normal application.

3465
03:47:38,580 --> 03:47:43,075
We have the boilerplate
page that we would get from

3466
03:47:43,075 --> 03:47:48,020
the app template, but
now let's go to slash first.

3467
03:47:48,020 --> 03:47:52,930
We're going to see the same thing here,
but notice way down here at the bottom,

3468
03:47:52,930 --> 03:47:54,617
there's the first works,

3469
03:47:54,617 --> 03:47:58,950
that is the content from the first
component that we created.

3470
03:47:58,950 --> 03:48:05,160
If we go to slash second, then it will
change to second works or it won't.

3471
03:48:05,160 --> 03:48:07,400
Did I set up the route correct?

3472
03:48:07,400 --> 03:48:11,745
No, so the path of seconds was being
routed to the first component, so

3473
03:48:11,745 --> 03:48:15,429
that's why we saw the content for
this first component, so

3474
03:48:15,429 --> 03:48:19,750
we can change that to second component,
which we need to import.

3475
03:48:19,750 --> 03:48:23,256
And then once that's done,
then whenever we go to slash second,

3476
03:48:23,256 --> 03:48:25,710
there we have the content that we wanted.

3477
03:48:25,710 --> 03:48:29,447
So, this is the idea behind routing,
you have a URL,

3478
03:48:29,447 --> 03:48:33,849
and then our Angular application
is going to handle that URL and

3479
03:48:33,849 --> 03:48:39,185
it's going to route it to a component
that is essentially a different page.

3480
03:48:39,185 --> 03:48:44,834
But in this particular case it looks like
the majority of the pages are the same and

3481
03:48:44,834 --> 03:48:48,908
that's because the app component
is still being loaded,

3482
03:48:48,908 --> 03:48:53,810
this is essentially the template or
the home of our application.

3483
03:48:53,810 --> 03:48:58,730
So, if we wanted to, let's keep all
of the css, and there's a lot of css.

3484
03:48:58,730 --> 03:49:03,421
Let's also keep the toolbar, but
right here in this div element let's

3485
03:49:03,421 --> 03:49:07,110
get rid of all of the content
inside of this div element.

3486
03:49:07,110 --> 03:49:10,857
And then at the very bottom
you see this router outlet,

3487
03:49:10,857 --> 03:49:15,179
this is an important component
because this essentially tells

3488
03:49:15,179 --> 03:49:20,600
the angular router where to load
the component that we are navigating to.

3489
03:49:20,600 --> 03:49:23,150
So whenever we go to slash first,
the content for

3490
03:49:23,150 --> 03:49:25,840
the first component is loaded right here.

3491
03:49:25,840 --> 03:49:29,025
The same is true for
the second, and really for

3492
03:49:29,025 --> 03:49:34,670
any route that we attempt to go to, the
output is rendered here at this outlet.

3493
03:49:34,670 --> 03:49:38,142
So, now if we go back to the browser,
we have our navbar at the top,

3494
03:49:38,142 --> 03:49:41,780
we can see that the second works
because we are at the second page.

3495
03:49:41,780 --> 03:49:44,237
Let's go to first and
there we go to first, but

3496
03:49:44,237 --> 03:49:48,780
if we go to the route of our application,
it's not going to put anything there.

3497
03:49:48,780 --> 03:49:50,487
And the reason is very simple,

3498
03:49:50,487 --> 03:49:53,778
because the route of our
application is our app component.

3499
03:49:53,778 --> 03:49:58,904
However, we can change that by
specifying a different route,

3500
03:49:58,904 --> 03:50:02,204
so we have first and second as the paths.

3501
03:50:02,204 --> 03:50:07,980
If we don't have anything for a path, that
is going to be essentially our homepage.

3502
03:50:07,980 --> 03:50:11,614
So, now we have set the first
component to be our homepage,

3503
03:50:11,614 --> 03:50:13,940
it still is going to load the navbar and

3504
03:50:13,940 --> 03:50:18,940
everything else because that is still
being loaded from the app component.

3505
03:50:18,940 --> 03:50:24,149
But now you can see that we see
the content for the first component, but

3506
03:50:24,149 --> 03:50:30,130
notice the URL, we are at home, there
are no segments after the host import.

3507
03:50:30,130 --> 03:50:35,020
But what about if we go to slash third,
what happen there?

3508
03:50:35,020 --> 03:50:36,416
Well, we see nothing, but

3509
03:50:36,416 --> 03:50:40,690
we want to display something to the user
because slash third doesn't exist.

3510
03:50:40,690 --> 03:50:44,852
And just like a typical website, we want
to tell the user, hey, you tried to go to

3511
03:50:44,852 --> 03:50:49,660
some place that doesn't exist, and we will
look at how to do that in the next lesson.

3512
03:50:49,660 --> 03:50:54,124
The concept of single page applications
has been around for many, many,

3513
03:50:54,124 --> 03:50:55,210
many years.

3514
03:50:55,210 --> 03:51:01,263
And even so it is very easy to get into
the mindset of using this new technology,

3515
03:51:01,263 --> 03:51:05,410
this new methodology of
creating a web application.

3516
03:51:05,410 --> 03:51:09,894
And so we tend to just forget everything
else that we know about typical

3517
03:51:09,894 --> 03:51:11,414
web applications, but

3518
03:51:11,414 --> 03:51:16,359
the one thing that we need to remember
is that this is still a web application.

3519
03:51:16,359 --> 03:51:21,435
Yes, it is very different from
a traditional web application,

3520
03:51:21,435 --> 03:51:26,887
but it is still loaded into the browser,
users still expect a typical

3521
03:51:26,887 --> 03:51:32,248
web application experience so
we need to provide that experience.

3522
03:51:32,248 --> 03:51:36,316
And one of the things that we
need to do provide a page for

3523
03:51:36,316 --> 03:51:40,880
the users when they try to go
to a page that doesn't exist.

3524
03:51:40,880 --> 03:51:43,637
Like for example, we have two pages,

3525
03:51:43,637 --> 03:51:48,819
the first is the default page which
is handled by that first component.

3526
03:51:48,819 --> 03:51:54,335
Then we have the second page, which
all we have to do to go to that second

3527
03:51:54,335 --> 03:51:59,868
page is change the URL, To have
a second segment, and that's great.

3528
03:51:59,868 --> 03:52:03,813
But if we go to third, well,
it takes us back to our default, and

3529
03:52:03,813 --> 03:52:05,947
we don't necessarily want that.

3530
03:52:05,947 --> 03:52:11,643
We want to tell the user, hey, you tried
to go to this page it doesn't exist.

3531
03:52:11,643 --> 03:52:16,160
It's not technically a 404, but
that is basically what they expect to see.

3532
03:52:16,160 --> 03:52:20,884
So to provide this experience,
the first thing we need is a component

3533
03:52:20,884 --> 03:52:25,720
that we can use to handle those
cases when a page is not-found.

3534
03:52:25,720 --> 03:52:28,950
So let's generate a new component.

3535
03:52:28,950 --> 03:52:31,392
We can call it simply not-found.

3536
03:52:31,392 --> 03:52:35,251
And let's go ahead and
change the template so that it says that,

3537
03:52:35,251 --> 03:52:38,550
you've tried to go to
a page that doesn't exist.

3538
03:52:38,550 --> 03:52:41,346
Now, I know technically we
aren't dealing with pages,

3539
03:52:41,346 --> 03:52:45,710
we are dealing with components, but
remember, the end user doesn't know that.

3540
03:52:45,710 --> 03:52:48,319
To them,
this is just another web application.

3541
03:52:48,319 --> 03:52:52,836
It might behave a little bit differently,
might be a little bit more responsive,

3542
03:52:52,836 --> 03:52:57,159
because it is a single page application,
but ultimately from their mindset,

3543
03:52:57,159 --> 03:52:59,140
they are still working with pages.

3544
03:52:59,140 --> 03:53:04,310
So the page you tried to
go to does not exist.

3545
03:53:04,310 --> 03:53:06,010
Great, so we have that message.

3546
03:53:06,010 --> 03:53:10,898
Now we need to set up a route so that when
the user goes to something that doesn't

3547
03:53:10,898 --> 03:53:13,509
exist, we route them to that component.

3548
03:53:13,509 --> 03:53:16,725
So first of all,
inside of our routing file,

3549
03:53:16,725 --> 03:53:19,784
we need to import the NotFoundComponent.

3550
03:53:19,784 --> 03:53:24,768
Then we need to define our routes,
and we do that by setting

3551
03:53:24,768 --> 03:53:29,257
the path to a wildcard,
it is simply too asterisks.

3552
03:53:29,257 --> 03:53:33,630
And then of course, we set
the component to our NotFoundComponent.

3553
03:53:33,630 --> 03:53:35,450
And that's it, that's all we had to do.

3554
03:53:35,450 --> 03:53:38,462
So, whenever,
we go back to the browser, of course,

3555
03:53:38,462 --> 03:53:41,500
the default is going to
go to the FirstComponent.

3556
03:53:41,500 --> 03:53:45,130
Whenever we change the path, the second
it, of course goes to the second.

3557
03:53:45,130 --> 03:53:48,878
And then no matter what we do for
the other URLs,

3558
03:53:48,878 --> 03:53:51,890
it will go to our NotFoundComponent.

3559
03:53:51,890 --> 03:53:57,440
So third of course, doesn't exist some,
random text, of course, doesn't exist.

3560
03:53:57,440 --> 03:54:00,042
And we can even have
multiple segments here,

3561
03:54:00,042 --> 03:54:03,816
it doesn't matter because it is
a wild card, it is a catch-all.

3562
03:54:03,816 --> 03:54:08,118
So any path that doesn't
match the empty string for

3563
03:54:08,118 --> 03:54:11,621
the default route or the second string for

3564
03:54:11,621 --> 03:54:17,200
our SecondComponent is going to
be handled by this wildcard.

3565
03:54:17,200 --> 03:54:18,838
Now, since we're here,

3566
03:54:18,838 --> 03:54:23,754
this is a perfect opportunity to talk
about our routing table, because how you

3567
03:54:23,754 --> 03:54:28,520
define your routes will change
the way that your application behaves.

3568
03:54:28,520 --> 03:54:33,050
Always remember that,
Angular uses a first-match policy.

3569
03:54:33,050 --> 03:54:37,974
So when the application receives
a request, it's not technically a request,

3570
03:54:37,974 --> 03:54:42,088
but I'm gonna call it a request,
it is gonna look at that path, and

3571
03:54:42,088 --> 03:54:47,135
then it is going to look at the routing
table, and it is going to go in order.

3572
03:54:47,135 --> 03:54:51,370
So the first route in our routing
table is our default route,

3573
03:54:51,370 --> 03:54:53,788
where the path is an empty string.

3574
03:54:53,788 --> 03:54:59,735
So for our default page,
it found a match right in that first rule.

3575
03:54:59,735 --> 03:55:02,945
So let's go to our second page.

3576
03:55:02,945 --> 03:55:08,187
When our application receives this
request, and it's going to take that path,

3577
03:55:08,187 --> 03:55:11,965
and it's going to look at
the first route in the table, and

3578
03:55:11,965 --> 03:55:15,607
it won't find a match because
the path doesn't match.

3579
03:55:15,607 --> 03:55:17,700
So then it looks at the second rule.

3580
03:55:17,700 --> 03:55:19,697
Well, there it will find a match.

3581
03:55:19,697 --> 03:55:23,278
So it will route that request
to the SecondComponent.

3582
03:55:23,278 --> 03:55:28,633
Now, if we move the wildcard route to
any other spot within the routing table,

3583
03:55:28,633 --> 03:55:32,300
then we are going to
mess up our application.

3584
03:55:32,300 --> 03:55:36,242
So in this case,
the default route is still going to work,

3585
03:55:36,242 --> 03:55:40,400
because that is the first rule,
it will match that rule.

3586
03:55:40,400 --> 03:55:45,314
However, anything that we type for
the path after that, will be matched

3587
03:55:45,314 --> 03:55:50,000
by the wildcard because that is
the second rule in our routing table.

3588
03:55:50,000 --> 03:55:54,810
So now, well, we have syntax there,
so I need to save that file.

3589
03:55:54,810 --> 03:56:00,057
So now that the wildcard route is
the second route in the table,

3590
03:56:00,057 --> 03:56:06,096
the URL for our SecondComponent is
being handled by the wildcard route.

3591
03:56:06,096 --> 03:56:10,924
So as you're defining your routes,
be mindful of the route order,

3592
03:56:10,924 --> 03:56:13,550
because it does make a difference and

3593
03:56:13,550 --> 03:56:19,417
you can very easily break your application
by defining your routes incorrectly.

3594
03:56:19,417 --> 03:56:23,604
One of the most basic things that we want
to do within a single page application is

3595
03:56:23,604 --> 03:56:25,730
navigate to different components, and

3596
03:56:25,730 --> 03:56:28,980
we essentially have two
different ways of doing that.

3597
03:56:28,980 --> 03:56:31,364
The first uses an a element.

3598
03:56:31,364 --> 03:56:36,212
So it's very similar to what we
would do with normal HTML, the only

3599
03:56:36,212 --> 03:56:41,857
difference is that instead of using
an href, we use a router link attribute.

3600
03:56:41,857 --> 03:56:47,720
And then the value of this router link
is the path that we want to navigate to.

3601
03:56:47,720 --> 03:56:50,862
So I want to add a link for
the home page, in fact,

3602
03:56:50,862 --> 03:56:53,710
let's get rid of everything else here.

3603
03:56:53,710 --> 03:56:57,425
And we also want a link
to go to our second page.

3604
03:56:57,425 --> 03:57:00,736
So the path will be simply second.

3605
03:57:00,736 --> 03:57:04,140
And then for the text,
let's have second page.

3606
03:57:04,140 --> 03:57:05,047
So let's take a look at this.

3607
03:57:05,047 --> 03:57:12,450
Let's go to the browser and
we need our links to be visible.

3608
03:57:12,450 --> 03:57:14,600
So, let's add some CSS here.

3609
03:57:14,600 --> 03:57:19,737
For the a elements inside of a toolbar,
we'll set the foreground color to white.

3610
03:57:19,737 --> 03:57:23,106
Let's also add some margin to the right.

3611
03:57:23,106 --> 03:57:24,962
Let's just set it to 15 pixels,

3612
03:57:24,962 --> 03:57:28,493
that will be enough to separate
the two different items and it is.

3613
03:57:28,493 --> 03:57:33,343
So now,
if you look in the lower left hand corner,

3614
03:57:33,343 --> 03:57:37,857
you can see the URL for
the home is our home URL.

3615
03:57:37,857 --> 03:57:39,577
If I hover over the second page,

3616
03:57:39,577 --> 03:57:43,740
we can see that the URL was automatically
generated and it goes to the second.

3617
03:57:43,740 --> 03:57:47,487
So if we click on any one of this links,
of course,

3618
03:57:47,487 --> 03:57:52,240
it is going to navigate us to
the appropriate component.

3619
03:57:52,240 --> 03:57:55,220
That's fantastic, but we have another way.

3620
03:57:55,220 --> 03:57:58,177
But sometimes we can't
always use an a element,

3621
03:57:58,177 --> 03:58:01,600
sometimes we need to
navigate programmatically.

3622
03:58:01,600 --> 03:58:04,540
So let's look at how we can do that.

3623
03:58:04,540 --> 03:58:11,620
And what I'm going to do is, lift out
the ContactModule from our wish-list.

3624
03:58:11,620 --> 03:58:12,930
So let's go there.

3625
03:58:12,930 --> 03:58:16,812
I'm just gonna copy this entire
contact folder, because remember,

3626
03:58:16,812 --> 03:58:17,929
this is the module,

3627
03:58:17,929 --> 03:58:22,160
everything as far as our contact form
is concerned is inside of this module.

3628
03:58:22,160 --> 03:58:23,960
So we can just copy that.

3629
03:58:23,960 --> 03:58:30,057
And then we want to go to our router-app,
so that we can just drop that in.

3630
03:58:30,057 --> 03:58:35,767
Now of course, since we wrote our
ContactModule to be a module,

3631
03:58:35,767 --> 03:58:41,264
we can just drop it in at it to
import that into our AppModule and

3632
03:58:41,264 --> 03:58:43,624
then we will be good to go.

3633
03:58:43,624 --> 03:58:47,240
I mean,
that is the general idea behind modules.

3634
03:58:47,240 --> 03:58:49,218
So let's go to AppModule.

3635
03:58:49,218 --> 03:58:53,836
And we want to import the ContactModule.

3636
03:58:53,836 --> 03:58:58,454
Let's see if Visual Studio, yep, it's
going to let us import that automatically,

3637
03:58:58,454 --> 03:59:00,210
so we are good to go there.

3638
03:59:00,210 --> 03:59:04,070
So that now we just need
to set up a route for that.

3639
03:59:04,070 --> 03:59:08,494
Now of course, we want to define
this route before the wildcard

3640
03:59:08,494 --> 03:59:12,009
otherwise we would never
get to the contact page.

3641
03:59:12,009 --> 03:59:16,814
But we want to set the component
to simply ContactComponent.

3642
03:59:16,814 --> 03:59:19,717
And once again, Visual Studio is
gonna make our lives easier and

3643
03:59:19,717 --> 03:59:21,554
just automatically import that for us.

3644
03:59:21,554 --> 03:59:25,986
We are good there, but of course,
we want to navigate to contact

3645
03:59:25,986 --> 03:59:29,611
programmatically as opposed
to using an a element.

3646
03:59:29,611 --> 03:59:34,354
Now, we're still gonna use an a element,
but we aren't gonna use a router link.

3647
03:59:34,354 --> 03:59:37,784
Instead we will use an href we
will set that to a pound sign or

3648
03:59:37,784 --> 03:59:42,340
hash whatever you wanna call it, and
we're going to handle the click event.

3649
03:59:42,340 --> 03:59:46,951
So the idea is that this could
be a button or something.

3650
03:59:46,951 --> 03:59:51,884
We are going to navigate to
the contact page programmatically.

3651
03:59:51,884 --> 03:59:56,715
So the first thing we should do
is preventDefault, because, yes,

3652
03:59:56,715 --> 04:00:00,781
even though the href is set to a hash or
pound, whatever,

3653
04:00:00,781 --> 04:00:05,988
we still want to prevent the browser
to navigating to that pound or hash.

3654
04:00:05,988 --> 04:00:09,699
And then let's have a method
called goToContact.

3655
04:00:09,699 --> 04:00:12,944
So that is the code that we will execute,
and

3656
04:00:12,944 --> 04:00:15,937
then the text will be simply Contact Us.

3657
04:00:15,937 --> 04:00:20,607
So we need to define this
goToContact method in our component.

3658
04:00:20,607 --> 04:00:24,204
So let's go to the app_component and
let's add it to the class.

3659
04:00:24,204 --> 04:00:27,753
Now, we navigate by using a router object,
and

3660
04:00:27,753 --> 04:00:30,873
that can be injected into our component.

3661
04:00:30,873 --> 04:00:35,990
So let's define a constructor that's
going to have a private router,

3662
04:00:35,990 --> 04:00:41,380
and the type is going to be router, and
we import that from Angular Router.

3663
04:00:41,380 --> 04:00:46,783
And now that we have that router object,
we can use its navigate method.

3664
04:00:46,783 --> 04:00:52,843
Now this is going to seem a little weird,
but this is really a good design

3665
04:00:52,843 --> 04:00:57,910
because what you do is pass
an array to the navigate method.

3666
04:00:57,910 --> 04:01:02,737
That might sound weird, but
this allows you to build a URL.

3667
04:01:02,737 --> 04:01:07,506
So typically, in the past what we
do in just normal JavaScript and

3668
04:01:07,506 --> 04:01:12,711
other frameworks is we build a URL
by concatenating strings together,

3669
04:01:12,711 --> 04:01:14,811
or we use a template string.

3670
04:01:14,811 --> 04:01:19,277
Or there's a variety of different
ways that we can build a URL,

3671
04:01:19,277 --> 04:01:24,180
but it involves a lot of extra work,
which I typically don't enjoy.

3672
04:01:24,180 --> 04:01:29,204
So what the navigate method
allows us to do is pass an array,

3673
04:01:29,204 --> 04:01:34,929
where the elements in that array
are the different parts of the URL,

3674
04:01:34,929 --> 04:01:37,760
and it will build that URL for us.

3675
04:01:37,760 --> 04:01:41,593
So in our case we want to navigate
to the contact page, and so

3676
04:01:41,593 --> 04:01:43,677
the path is going to be contact.

3677
04:01:43,677 --> 04:01:47,745
But if our path was actually contact/us,

3678
04:01:47,745 --> 04:01:52,380
we could pass in a second
argument to that array.

3679
04:01:52,380 --> 04:01:57,294
And then behind the scenes, Angular is
going to build that into an actual URL,

3680
04:01:57,294 --> 04:02:01,395
and we don't have to concatenate
strings or anything like that.

3681
04:02:01,395 --> 04:02:04,481
It's really a wonderful design.

3682
04:02:04,481 --> 04:02:09,319
The most basic usage of navigate is that,
passing the array that

3683
04:02:09,319 --> 04:02:14,350
contains the different pieces of the URL,
and you're good to go.

3684
04:02:14,350 --> 04:02:20,145
So if we go back to the browser,
we don't see our contact link.

3685
04:02:20,145 --> 04:02:21,336
Why don't we?

3686
04:02:21,336 --> 04:02:22,671
Because I didn't save it.

3687
04:02:22,671 --> 04:02:24,168
That's kind of important.

3688
04:02:24,168 --> 04:02:25,983
So let's save the HTML.

3689
04:02:25,983 --> 04:02:26,863
Let's go back.

3690
04:02:26,863 --> 04:02:28,445
Now we see Contact Us.

3691
04:02:28,445 --> 04:02:31,366
Now, of course, if we try to
navigate to home and second page,

3692
04:02:31,366 --> 04:02:32,923
that's going to work just fine.

3693
04:02:32,923 --> 04:02:39,251
But whenever we navigate to Contact Us,
there's our form.

3694
04:02:39,251 --> 04:02:41,659
Yeah, we used Bootstrap, didn't we?

3695
04:02:41,659 --> 04:02:46,231
So let's go to index.html,
and let's see here.

3696
04:02:46,231 --> 04:02:49,896
I'm going to paste in the CDN for
Bootstrap.

3697
04:02:49,896 --> 04:02:52,602
So it's not going to look
exactly the same, but

3698
04:02:52,602 --> 04:02:55,386
it's going to look a little
bit better at least.

3699
04:02:55,386 --> 04:02:56,323
So here we go.

3700
04:02:56,323 --> 04:02:59,732
Now remember, all of the functionality
was inside of that contact module.

3701
04:02:59,732 --> 04:03:03,229
So all the validation should still work.

3702
04:03:03,229 --> 04:03:07,181
So as far as the name,
if we give focus to something else, hey,

3703
04:03:07,181 --> 04:03:09,280
that's required, fantastic.

3704
04:03:09,280 --> 04:03:12,028
And I want to use my Gmail.

3705
04:03:12,028 --> 04:03:14,283
No, that's not allowed.

3706
04:03:14,283 --> 04:03:16,902
So can we try Yahoo?

3707
04:03:16,902 --> 04:03:18,388
Nope, that's not allowed.

3708
04:03:18,388 --> 04:03:24,317
So everything else works as it did before,
except that now it is in a different app,

3709
04:03:24,317 --> 04:03:27,890
and we navigated to this
form programmatically.

3710
04:03:27,890 --> 04:03:30,506
[SOUND] Now that we know how to create and
use routes and

3711
04:03:30,506 --> 04:03:34,626
navigate using those routes, let's create
a page to display a list of products.

3712
04:03:34,626 --> 04:03:36,258
And then in the next lesson,

3713
04:03:36,258 --> 04:03:40,543
we will create a page to display
the individual details of those products.

3714
04:03:40,543 --> 04:03:45,003
So let's start by creating a module,
because we're going to be working with

3715
04:03:45,003 --> 04:03:48,036
several different pieces
all related to products.

3716
04:03:48,036 --> 04:03:51,562
We're going to have the components for
displaying our content.

3717
04:03:51,562 --> 04:03:55,397
We will also have a service to
emulate working with the data store.

3718
04:03:55,397 --> 04:04:00,418
So let's start by generating a module and
let's just call it products.

3719
04:04:00,418 --> 04:04:01,447
Very simple.

3720
04:04:01,447 --> 04:04:02,918
Then we can go ahead and

3721
04:04:02,918 --> 04:04:06,950
create the component that will
display the list of products.

3722
04:04:06,950 --> 04:04:10,235
So we will generate that component.

3723
04:04:10,235 --> 04:04:13,818
We'll call it products/productslist.

3724
04:04:13,818 --> 04:04:18,290
And then let's also specify that this
is inside of the products' module, and

3725
04:04:18,290 --> 04:04:20,341
then we will generate our service.

3726
04:04:20,341 --> 04:04:23,906
And I don't remember if we've generated
a service using the command line.

3727
04:04:23,906 --> 04:04:26,534
I remember that we did so manually.

3728
04:04:26,534 --> 04:04:31,181
So if we haven't, then, well, this is
great, we will go ahead and do that.

3729
04:04:31,181 --> 04:04:34,467
We'll use the generate command, but

3730
04:04:34,467 --> 04:04:39,197
this time we specify our service and
we want products.

3731
04:04:39,197 --> 04:04:40,628
Let's just call this products.

3732
04:04:40,628 --> 04:04:43,463
So this will be our products service.

3733
04:04:43,463 --> 04:04:49,397
And once this is done, now, whenever you
generate a service, there is no M flag,

3734
04:04:49,397 --> 04:04:53,957
so we can't specify to create
that service inside of a module.

3735
04:04:53,957 --> 04:04:57,941
But by using products in front
of the name of our service,

3736
04:04:57,941 --> 04:05:00,850
it gets placed inside of that directory.

3737
04:05:00,850 --> 04:05:02,169
So we're good to go there.

3738
04:05:02,169 --> 04:05:05,621
Everything is going to be inside
of our products' folder, and

3739
04:05:05,621 --> 04:05:07,262
that's exactly what I want.

3740
04:05:07,262 --> 04:05:11,919
So, let's go to our service because it
makes sense to start there because we need

3741
04:05:11,919 --> 04:05:16,314
some data before we have anything else,
and I'm going to paste in an array.

3742
04:05:16,314 --> 04:05:21,427
So, all this class is going to
do is provide access to either

3743
04:05:21,427 --> 04:05:27,586
the data array here or to the individual
items inside of the data array.

3744
04:05:27,586 --> 04:05:32,411
So, yes, this could be a JSON
file that we retrieve with HTTP,

3745
04:05:32,411 --> 04:05:35,703
just like we did with our wishes and
stuff.

3746
04:05:35,703 --> 04:05:40,265
But this gives us a little different
approach to that, and this also gives us

3747
04:05:40,265 --> 04:05:44,772
practice creating our own observables,
which is actually quite simple.

3748
04:05:44,772 --> 04:05:49,442
So for this lesson, we need just
one method to get all products.

3749
04:05:49,442 --> 04:05:53,283
We essentially want to
return the data array,

3750
04:05:53,283 --> 04:05:58,206
but we don't want to just return
the array because we want to

3751
04:05:58,206 --> 04:06:02,933
return an observable that will
then provide access to our

3752
04:06:02,933 --> 04:06:07,871
data array when it is subscribed to,
and this is very easy.

3753
04:06:07,871 --> 04:06:13,312
We're gonna use a function called of,
this is from the Arc.js library,

3754
04:06:13,312 --> 04:06:17,279
and this is going to return
an observable of our data.

3755
04:06:17,279 --> 04:06:21,991
And that's all that we need to do, so
that the inside of our product list,

3756
04:06:21,991 --> 04:06:26,023
we will, of course,
need to inject this product's service.

3757
04:06:26,023 --> 04:06:30,738
So let's do that first,
let's open up the code for our component,

3758
04:06:30,738 --> 04:06:32,319
and we want a private.

3759
04:06:32,319 --> 04:06:38,361
Let's call this just store, and
we need to import the product service.

3760
04:06:38,361 --> 04:06:42,161
But inside of ngOnInit,
we will use our store,

3761
04:06:42,161 --> 04:06:47,196
we'll call the getAllProducts,
and then we will subscribe.

3762
04:06:47,196 --> 04:06:52,204
This is going to give us our list of
products that we can then work with.

3763
04:06:52,204 --> 04:06:55,472
So inside of this product list component,

3764
04:06:55,472 --> 04:06:59,647
let's say that we will have
an array called products,

3765
04:06:59,647 --> 04:07:04,940
this will be of type any, and
let's initialize it as an empty array.

3766
04:07:04,940 --> 04:07:08,535
So that whenever we
subscribe to getAllProducts,

3767
04:07:08,535 --> 04:07:13,384
we will simply set the products'
property here equal to the products

3768
04:07:13,384 --> 04:07:16,490
that were provided through our data store.

3769
04:07:16,490 --> 04:07:20,309
And so this gives us our data for
our product list.

3770
04:07:20,309 --> 04:07:23,535
So let's go to our components template.

3771
04:07:23,535 --> 04:07:24,870
Let's get rid of the defaults.

3772
04:07:24,870 --> 04:07:27,762
Let's have a div with
a class of container.

3773
04:07:27,762 --> 04:07:29,933
Let's have another div
with a class of row.

3774
04:07:29,933 --> 04:07:33,922
And then inside of here let's have,
I guess, an h4 element,

3775
04:07:33,922 --> 04:07:37,102
and here we will simply
display the product name.

3776
04:07:37,102 --> 04:07:39,329
But of course we need the ng4 list.

3777
04:07:39,329 --> 04:07:40,939
I'm getting ahead of myself here.

3778
04:07:40,939 --> 04:07:45,936
So we want to generate multiple rows
based upon however many products we have.

3779
04:07:45,936 --> 04:07:50,315
So let's go ahead and
let's do that here, so that we will use.

3780
04:07:50,315 --> 04:07:57,265
The ng4 let product of products and
that should get us there.

3781
04:07:57,265 --> 04:08:02,503
Let's go to our app component
because we do need to import this or

3782
04:08:02,503 --> 04:08:06,974
not the app component,
we need to go to the app module.

3783
04:08:06,974 --> 04:08:10,925
And so,
let's import the products module and

3784
04:08:10,925 --> 04:08:17,000
we will add that to the imports array so
that then we can set up the route so

3785
04:08:17,000 --> 04:08:20,760
let's go to our Apps, routing module.

3786
04:08:20,760 --> 04:08:25,270
And let's set up a route to
take us to that product list.

3787
04:08:25,270 --> 04:08:27,520
So let's import the product
list component.

3788
04:08:27,520 --> 04:08:29,490
Let's add a route.

3789
04:08:29,490 --> 04:08:32,209
We'll say that this is
simply just products.

3790
04:08:32,209 --> 04:08:35,905
And then the component will of
course be products list component.

3791
04:08:35,905 --> 04:08:37,125
So there we go.

3792
04:08:37,125 --> 04:08:39,475
With that,
we should be able to go to the browser.

3793
04:08:39,475 --> 04:08:44,082
Let's go to /products, and we should
see our list of products, guitar,

3794
04:08:44,082 --> 04:08:45,920
piano, and drum.

3795
04:08:45,920 --> 04:08:49,766
Now, if there's one thing that I want you
to take away from this particular lesson,

3796
04:08:49,766 --> 04:08:50,570
it's this.

3797
04:08:50,570 --> 04:08:53,205
Whenever you start working with a router,

3798
04:08:53,205 --> 04:08:56,960
the way that you provide data
to your components changes.

3799
04:08:56,960 --> 04:09:01,738
Because, here, our app component
primarily exists to display

3800
04:09:01,738 --> 04:09:05,200
the individual pages that we navigate to.

3801
04:09:05,200 --> 04:09:07,614
If you remember from our wish list,

3802
04:09:07,614 --> 04:09:11,160
the app component is where
we loaded all of our data.

3803
04:09:11,160 --> 04:09:15,320
And then we supplied that data to all of
the other components that were inside of

3804
04:09:15,320 --> 04:09:16,990
the app component.

3805
04:09:16,990 --> 04:09:21,310
Well, now, app component is just
a container for everything else.

3806
04:09:21,310 --> 04:09:25,870
And so it doesn't make sense to load
our data inside of the app component

3807
04:09:25,870 --> 04:09:30,140
because we can't really provide
that data where it is needed.

3808
04:09:30,140 --> 04:09:34,640
So now the components that
represent individual pages,

3809
04:09:34,640 --> 04:09:40,385
are mostly, if not solely responsible for
getting their own data.

3810
04:09:40,385 --> 04:09:44,389
So you can almost think of
each individual component

3811
04:09:44,389 --> 04:09:48,755
that represents a page as
its own small application.

3812
04:09:48,755 --> 04:09:53,732
And so now the primary question
we have is how do we navigate to

3813
04:09:53,732 --> 04:09:56,585
a dynamically generated page?

3814
04:09:56,585 --> 04:10:01,180
Because now we have a list of products
that was dynamically generated.

3815
04:10:01,180 --> 04:10:04,810
This is completely dependent
upon the data store.

3816
04:10:04,810 --> 04:10:09,258
How do we get to an individual page for
showing the guitar information, or

3817
04:10:09,258 --> 04:10:11,330
the piano, or the drums?

3818
04:10:11,330 --> 04:10:14,609
Well, we use something
called route parameters and

3819
04:10:14,609 --> 04:10:17,673
you will learn how to use
them in the next lesson.

3820
04:10:17,673 --> 04:10:20,820
We have a page list of products.

3821
04:10:20,820 --> 04:10:25,749
And so now, we need to page to display
the individual products so that we can see

3822
04:10:25,749 --> 04:10:31,070
the whole lot of information that we have,
which is just the name and the price.

3823
04:10:31,070 --> 04:10:34,157
So, the thing about this is
that it needs to be dynamic,

3824
04:10:34,157 --> 04:10:36,270
because what we have here is dynamic.

3825
04:10:36,270 --> 04:10:40,190
What we see in our list is
completely dependent upon our data.

3826
04:10:40,190 --> 04:10:45,168
So when it comes to setting up our route,
we need something that can handle

3827
04:10:45,168 --> 04:10:49,667
dynamic data because yes,
we could create an individual route for

3828
04:10:49,667 --> 04:10:53,471
each individual products,
but that's not feasible.

3829
04:10:53,471 --> 04:10:55,310
Our data is going to change.

3830
04:10:55,310 --> 04:10:57,040
So let's talk about our URL.

3831
04:10:57,040 --> 04:11:00,646
We have our products,
which of course, is our list, and

3832
04:11:00,646 --> 04:11:05,082
typically what we would do is follow
that up with another segment, and

3833
04:11:05,082 --> 04:11:09,200
then it would be some kind of
identifier for a given product.

3834
04:11:09,200 --> 04:11:13,421
Well, we have IDs to work with,
so In our case,

3835
04:11:13,421 --> 04:11:17,341
our URL will be products/1, 2, and 3.

3836
04:11:17,341 --> 04:11:21,930
And we can make this work by using
what's called route parameters.

3837
04:11:21,930 --> 04:11:25,890
You can think of a route parameter
as a variable for your route.

3838
04:11:25,890 --> 04:11:30,713
So our route is going to look like this,
to where we still have the products part

3839
04:11:30,713 --> 04:11:35,480
of our URL, but then we are going to
follow that up with another segment.

3840
04:11:35,480 --> 04:11:39,020
And we will begin our
route parameter here.

3841
04:11:39,020 --> 04:11:41,710
It starts with a colon, and
then we give it a name.

3842
04:11:41,710 --> 04:11:45,740
ID is going to work for us because
that is what we are working with.

3843
04:11:45,740 --> 04:11:50,845
And then we just specify the component
that is going to handle this route.

3844
04:11:50,845 --> 04:11:56,501
So let's call it product detailsComponent
of course we need to create this so

3845
04:11:56,501 --> 04:11:59,630
let's hop on over to the command line.

3846
04:11:59,630 --> 04:12:06,013
We will generate that component
inside of the products module.

3847
04:12:06,013 --> 04:12:09,342
Product details I think we called it, and

3848
04:12:09,342 --> 04:12:14,761
we also need to modify our service
because we only have one method and

3849
04:12:14,761 --> 04:12:20,580
that is to get all of our products we
need one to get just a single product.

3850
04:12:20,580 --> 04:12:24,848
So with that done We should be able
to just import this, we can, and

3851
04:12:24,848 --> 04:12:28,270
I think that's it as far
as our route is concerned.

3852
04:12:28,270 --> 04:12:33,713
So remember that we have this route
parameter as the second segment for

3853
04:12:33,713 --> 04:12:35,740
our products route.

3854
04:12:35,740 --> 04:12:39,970
The parameter starts with a colon and
then we have the parameter name id.

3855
04:12:39,970 --> 04:12:41,380
Pretty easy to remember.

3856
04:12:41,380 --> 04:12:42,840
At least the name will be.

3857
04:12:42,840 --> 04:12:47,319
All right, so let's go to our product
service and we need a method to

3858
04:12:47,319 --> 04:12:52,410
get a product and let's just call it get
product to where we will have an id.

3859
04:12:52,410 --> 04:12:56,615
Let's make sure that it's the number and
this is going to be very simple.

3860
04:12:56,615 --> 04:13:02,755
All we will do is try to find
the product with the given id.

3861
04:13:02,755 --> 04:13:06,761
So we are going to compare
the id property on each one of

3862
04:13:06,761 --> 04:13:11,747
these product to the provided id,
and instead of returning this,

3863
04:13:11,747 --> 04:13:17,110
we are going to return an observable
of the product that was found.

3864
04:13:17,110 --> 04:13:18,770
So there's our method.

3865
04:13:18,770 --> 04:13:20,540
We should be able to close that.

3866
04:13:20,540 --> 04:13:21,770
It says that there's an error.

3867
04:13:21,770 --> 04:13:22,950
I don't see an error.

3868
04:13:22,950 --> 04:13:24,454
Where's our error?

3869
04:13:24,454 --> 04:13:26,815
We need another parentheses there.

3870
04:13:26,815 --> 04:13:30,500
Okay, so we can close our service
because we are done there.

3871
04:13:30,500 --> 04:13:33,040
And let's go to our
product details component.

3872
04:13:33,040 --> 04:13:34,570
Let's go to the code.

3873
04:13:34,570 --> 04:13:41,500
And we want to inject our data store here,
just like we did in the previous lesson.

3874
04:13:41,500 --> 04:13:47,097
So that is products service but
then we need some way to work with the,

3875
04:13:47,097 --> 04:13:53,484
Activated route, because remember that
this component is handling a route.

3876
04:13:53,484 --> 04:13:56,310
And since we have a route parameter,

3877
04:13:56,310 --> 04:14:00,869
which is just some information
about the activated route,

3878
04:14:00,869 --> 04:14:06,540
we need to be able to access
the information for the activated route.

3879
04:14:06,540 --> 04:14:11,420
And we can do that by
injecting the activated route.

3880
04:14:11,420 --> 04:14:13,090
Now, I'm gonna call this route.

3881
04:14:13,090 --> 04:14:18,070
This is not to be confused with router
that we used a couple of lessons ago.

3882
04:14:18,070 --> 04:14:22,118
Whenever we navigated to the contact
page and we used the router,

3883
04:14:22,118 --> 04:14:27,070
it's the same idea except that we
are working with the activated route.

3884
04:14:27,070 --> 04:14:33,140
Okay, so the first thing that we need
to do is get the id from the URL.

3885
04:14:33,140 --> 04:14:36,090
And the route gives us that.

3886
04:14:36,090 --> 04:14:41,340
It has a property called ParamMap and
this is an observable.

3887
04:14:41,340 --> 04:14:43,429
We can call subscribe and

3888
04:14:43,429 --> 04:14:49,404
our callback function is going to
work with an object of type paramMap.

3889
04:14:49,404 --> 04:14:51,560
We need to import this as well.

3890
04:14:51,560 --> 04:14:56,290
Both the activated route and
the paramMap comes from angular router.

3891
04:14:56,290 --> 04:15:02,200
And then inside of here,
we will have access to the ID parameter.

3892
04:15:02,200 --> 04:15:05,790
We'll call the get method
on our parameters object.

3893
04:15:05,790 --> 04:15:10,460
We'll pass in the string of id and
then that's going to get us our id.

3894
04:15:10,460 --> 04:15:11,580
So let's do that.

3895
04:15:11,580 --> 04:15:17,400
And then we will feed that into our
call to getting the individual product.

3896
04:15:17,400 --> 04:15:20,044
So let's do this, let's have a property.

3897
04:15:20,044 --> 04:15:23,625
Let's call this simply
product type any and

3898
04:15:23,625 --> 04:15:27,600
let's initialize it as an empty object.

3899
04:15:27,600 --> 04:15:30,800
So that after we have the id,
we will use our store.

3900
04:15:30,800 --> 04:15:32,730
We will call get product.

3901
04:15:32,730 --> 04:15:36,199
We will pass in the id and
we need to subscribe there.

3902
04:15:36,199 --> 04:15:41,258
But that is going to give us our product,
which we will then just

3903
04:15:41,258 --> 04:15:47,379
set to the product property on this class,
and that is going to get us there.

3904
04:15:47,379 --> 04:15:50,992
Now, notice that there's a red
squiggly here for the id.

3905
04:15:50,992 --> 04:15:56,751
That's because getProduct is expecting
a number, we are passing a string.

3906
04:15:56,751 --> 04:16:01,311
One thing to remember is that whenever
you work with route parameters,

3907
04:16:01,311 --> 04:16:02,757
it comes from the URL.

3908
04:16:02,757 --> 04:16:06,966
And URLs are strings,
they are always strings.

3909
04:16:06,966 --> 04:16:11,538
So you will need to coerce the data coming
from your route parameters into whatever

3910
04:16:11,538 --> 04:16:13,350
type of data that you need.

3911
04:16:13,350 --> 04:16:15,140
In our case, we need a number.

3912
04:16:15,140 --> 04:16:16,637
So let's do this,

3913
04:16:16,637 --> 04:16:22,640
because it could be possible that we
don't have an actual value for id.

3914
04:16:22,640 --> 04:16:25,685
So let's check if we have a value for id.

3915
04:16:25,685 --> 04:16:27,589
Because in the case that we do,

3916
04:16:27,589 --> 04:16:32,960
that's really the only time that we want
to fetch information from our data store.

3917
04:16:32,960 --> 04:16:39,866
So now we can convert that id into
an integer, we'll pass that to getProduct.

3918
04:16:39,866 --> 04:16:43,140
And then that is going to work,
or at least it should work.

3919
04:16:43,140 --> 04:16:45,440
There aren't any errors that I see.

3920
04:16:45,440 --> 04:16:49,088
So let's go to the template, and
let's modify our template here,

3921
04:16:49,088 --> 04:16:51,570
we want to display
the product information.

3922
04:16:51,570 --> 04:16:55,983
So let's have a div of container,
I guess we can go ahead and have a row.

3923
04:16:55,983 --> 04:17:02,929
And then let's have an h3, which we'll
start off with the product name,

3924
04:17:02,929 --> 04:17:07,950
and then with smaller text
we'll have the price.

3925
04:17:07,950 --> 04:17:12,020
So we will simply output product.price,
and that should work.

3926
04:17:12,020 --> 04:17:16,329
Let's go to the browser,
let's go to products/1, and we should see,

3927
04:17:16,329 --> 04:17:18,020
I think that's guitar?

3928
04:17:18,020 --> 04:17:21,600
Yes, it is, if we go to /2, we see piano.

3929
04:17:21,600 --> 04:17:24,710
If we go to /3, we see drums.

3930
04:17:24,710 --> 04:17:29,471
Now the next thing I want to do is
add links to our products list, so

3931
04:17:29,471 --> 04:17:35,820
that the text here will be links, so that
we can easily navigate to those pages.

3932
04:17:35,820 --> 04:17:39,430
So let's go to our
products list component.

3933
04:17:39,430 --> 04:17:43,782
All we need is the template,
and we can still use an h4, but

3934
04:17:43,782 --> 04:17:47,194
inside of the h4,
we will have our a element.

3935
04:17:47,194 --> 04:17:53,039
We will still use routerLink, but we
aren't going to use just the attributes,

3936
04:17:53,039 --> 04:17:55,570
we are going to bind data here.

3937
04:17:55,570 --> 04:18:00,020
The reason is because now it's
more than just a simple URL.

3938
04:18:00,020 --> 04:18:04,406
We have data that we also need
to supply with that route, and

3939
04:18:04,406 --> 04:18:06,510
we do that with an array.

3940
04:18:06,510 --> 04:18:11,915
The first element in the array is
the first segment, products, in this case.

3941
04:18:11,915 --> 04:18:16,475
The second element is going to be
whatever value that we need to supply to

3942
04:18:16,475 --> 04:18:17,800
the parameter.

3943
04:18:17,800 --> 04:18:20,270
In this case, it's the route parameter, so

3944
04:18:20,270 --> 04:18:22,940
this is going to be
the id from our product.

3945
04:18:22,940 --> 04:18:24,930
And that should be all that we need to do.

3946
04:18:24,930 --> 04:18:29,185
So let's be sure that our text
is wrapped with this a element.

3947
04:18:29,185 --> 04:18:33,785
But Visual Studio Code doesn't like this,
can't bind a router link since it

3948
04:18:33,785 --> 04:18:38,513
isn't a known property of a,
let's take a look at the browser, yep.

3949
04:18:38,513 --> 04:18:46,088
Yeah, we need to import the routing
module to our products module.

3950
04:18:46,088 --> 04:18:50,420
We can easily get that from
the app routing module, so

3951
04:18:50,420 --> 04:18:52,546
it is this router module.

3952
04:18:52,546 --> 04:18:56,351
This was automatically imported
whenever we created our project.

3953
04:18:56,351 --> 04:19:01,254
And since the app routing module
is imported into the app module,

3954
04:19:01,254 --> 04:19:04,930
then we didn't have to worry about that.

3955
04:19:04,930 --> 04:19:10,283
But since we are trying to use the router
link inside of our ProductsModule,

3956
04:19:10,283 --> 04:19:13,471
we need to import at
least the RouterModule.

3957
04:19:13,471 --> 04:19:17,795
So let's do that,
let's go to the ProductsModule,

3958
04:19:17,795 --> 04:19:20,783
we need to import the RouterModule.

3959
04:19:20,783 --> 04:19:25,014
And that should fix that, so whenever we
go back to the browser, there we go, and

3960
04:19:25,014 --> 04:19:26,648
notice that we have links now.

3961
04:19:26,648 --> 04:19:33,513
However, notice in the bottom left-hand
corner, the URL is products/products/1.

3962
04:19:33,513 --> 04:19:40,000
So what we need to do is begin our URL
inside of our component, so let's go back.

3963
04:19:40,000 --> 04:19:44,460
So for products, we need to begin that
with a slash, so let's save that.

3964
04:19:44,460 --> 04:19:49,290
Let's go back to the browser, and that
URL should be fixed, there we go, it is.

3965
04:19:49,290 --> 04:19:53,165
So if we click on Guitar,
that takes us to the guitar page,

3966
04:19:53,165 --> 04:19:57,510
if we click on Piano, and
of course, Drums, they all work.

3967
04:19:57,510 --> 04:20:02,610
So route parameters allow us to handle
routes based upon dynamic data.

3968
04:20:02,610 --> 04:20:05,870
Just think of them as variables for
your routes.

3969
04:20:05,870 --> 04:20:10,345
It's not an exaggeration to say that
Angular fundamentally changed the way that

3970
04:20:10,345 --> 04:20:12,010
we build web applications.

3971
04:20:12,010 --> 04:20:16,519
It absolutely did by making it so
much easier to build interactive and

3972
04:20:16,519 --> 04:20:18,780
responsive user interfaces.

3973
04:20:18,780 --> 04:20:19,321
In fact,

3974
04:20:19,321 --> 04:20:24,260
Angular provided the inspiration that can
be found in every UI framework today.

3975
04:20:24,260 --> 04:20:26,053
And now you have the knowledge and

3976
04:20:26,053 --> 04:20:30,540
tools to use this powerful framework to
start building your own applications.

3977
04:20:30,540 --> 04:20:34,679
Throughout this course, you learned how
to use the Angular CLI to create and

3978
04:20:34,679 --> 04:20:36,170
manage your projects.

3979
04:20:36,170 --> 04:20:37,831
You know how to use directives and

3980
04:20:37,831 --> 04:20:40,329
templates to display
your application's data.

3981
04:20:40,329 --> 04:20:43,683
And you know how to bind data
to properties and attributes,

3982
04:20:43,683 --> 04:20:45,101
as well as set up events.

3983
04:20:45,101 --> 04:20:49,290
You learned how to create your own
custom components that handle input,

3984
04:20:49,290 --> 04:20:51,223
output, and two-way binding.

3985
04:20:51,223 --> 04:20:55,822
And you learned how to use Angular's
dependency injection and HTTP services.

3986
04:20:55,822 --> 04:20:59,978
And of course, now you know how to build
single-page applications using Angular's

3987
04:20:59,978 --> 04:21:00,967
built-in router.

3988
04:21:00,967 --> 04:21:05,125
Now, I know full well how easy
it is to jump into a project and

3989
04:21:05,125 --> 04:21:07,540
almost immediately get stuck.

3990
04:21:07,540 --> 04:21:12,070
But thankfully, Angular's community is so
helpful, so don't be afraid to reach out.

3991
04:21:12,070 --> 04:21:14,945
And of course, you can always
contact me through Twitter or

3992
04:21:14,945 --> 04:21:17,220
the Tuts+ forums if you
have any questions.

3993
04:21:17,220 --> 04:21:19,120
Thank you so much for
watching this course.

3994
04:21:19,120 --> 04:21:23,962
If you found it useful, please like the
video and subscribe to Envato Tuts+ for

3995
04:21:23,962 --> 04:21:26,240
more free courses and tutorials.

3996
04:21:26,240 --> 04:21:28,540
We have a lot, and there are more to come.

3997
04:21:28,540 --> 04:21:32,490
From all of us here at Tuts+, thank you,
and I will see you next time.

